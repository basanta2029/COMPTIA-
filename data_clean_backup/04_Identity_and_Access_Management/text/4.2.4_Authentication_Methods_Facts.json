{
  "metadata": {
    "chapter_num": "4",
    "section_num": "4.2.4",
    "title": "Authentication Methods Facts",
    "content_type": "text",
    "filename": "4.2.4_Authentication_Methods_Facts_[text].txt",
    "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.2.4_Authentication_Methods_Facts_[text].txt",
    "word_count": 1917,
    "has_content": true
  },
  "full_content": "Security Pro 8.0 While an on-premises network can use a local directory to manage accounts and rights, as organizations move services to the cloud, these authorizations have to be implemented using federated identity management solutions. Local, network, and remote authentication Windows authentication Linux authentication Directory services Single sign-on authentication Federation Open authorization Local, Network, and Remote Authentication One of the most important features of an operating system is the authentication provider, which is the software architecture and code that underpins the mechanism by which the user is authenticated before starting a shell. Knowledge-based authentication relies on cryptographic hashes. A plaintext password is not usually transmitted or stored in a credential database because of the risk of compromise. Instead, the password is stored as a cryptographic hash. When a user enters a password to log in, an authenticator converts what is typed into a hash and transmits that to an authority. The authority compares the submitted hash to the one in the database and authenticates the subject only if they match. Windows Authentication Windows authentication involves a complex architecture of components (docs.microsoft.com/en-us/windows-server/security/windows-authentication/credentials-processes-in-windows-authentication), but the following three scenarios are typical: Windows local sign-in — is the Local Security Authority Subsystem Service (LSASS) that compares the submitted credential to a hash stored in the Security Accounts Manager (SAM) database, which is part of the registry. This is also referred to as interactive logon. Windows network sign-in — is LSASS, which can pass the credentials for authentication to an Active Directory (AD) domain controller. The preferred system for network authentication is based on Kerberos, but legacy network applications might use NT LAN Manager (NTLM) authentication. Remote sign-in — is used if the user's device is not directly connected to the local network. Authentication can take place over a virtual private network (VPN), enterprise Wi-Fi, or web portal. These use protocols to create a secure connection between the client machine, the remote access device, and the authentication server. Linux Authentication In Linux, local user account names are stored in /etc/passwd . When a user logs in to a local interactive shell, the password is checked against a hash stored in /etc/shadow. Interactive login over a network is typically accomplished using Secure Shell (SSH). With SSH, the user can be authenticated using cryptographic keys instead of a password. A pluggable authentication module (PAM) is a package for enabling different authentication providers, such as smart-card log-in. The PAM framework can also be used to implement authentication to network directory services. Directory Services A directory service stores information about users, computers, security groups/roles, and services. Each object in the directory has a number of attributes. The directory schema describes the types of attributes, what information they contain, and whether they are required or optional. In order for products from different vendors to be interoperable, most directory services are based on the Lightweight Directory Access Protocol (LDAP), which was developed from a standard called X.500. Within an X.500-like directory, a distinguished name (DN) is a collection of attributes that define a unique identifier for any given resource. A distinguished name is made up of attribute-value pairs separated by commas. The most specific attribute is listed first, and successive attributes become progressively broader. This most specific attribute is the relative distinguished name, as it uniquely identifies the object within the context of successive (parent) attribute values. Browsing objects in an Active Directory LDAP schema Screenshot used with permission from Microsoft Description Some of the attributes commonly used include common name (CN), organizational unit (OU), organization (O), country (C), and domain component (DC). For example, the distinguished name of a web server operated by Widget in the UK might be the following: CN=WIDGETWEB, OU=Marketing, O=Widget, C=UK, DC=widget, DC=foo Single Sign-on Authentication A single sign-on (SSO) system allows the user to authenticate once and then receive authorizations on compatible application servers without having to enter credentials again. Kerberos is a single sign-on network authentication and authorization protocol used on many networks, notably as implemented by Microsoft's Active Directory (AD) service. Kerberos was named after the three-headed guard dog of Hades (Cerberus) because it consists of three parts. Clients request services from application servers, which rely on an intermediary—a key distribution center (KDC) —to vouch for their identity. There are two services that make up a KDC: the Authentication Service and the Ticket Granting Service. Kerberos Authentication Service Images © 123RF.com Description Kerberos can authenticate human users and application services. These are collectively referred to as principals. Using authentication to a Windows domain as an example, the first step in Kerberos SSO is to authenticate with a KDC server implemented as a domain controller. The principal sends the authentication service (AS) a request for a Ticket Granting Ticket (TGT). This is composed by encrypting the date and time on the local computer with the user's password hash as the key. The password hash itself is not transmitted over the network. Although we refer to passwords for simplicity, the system can use other authenticators, such as smart card login. The AS checks that the user account is present, that it can decode the request by matching the user's password hash with the one in the Active Directory database, and that the request has not expired. If the request is valid, the AS responds with the following data: Ticket Granting Ticket (TGT) — contains information about the client (name and IP address) plus a time stamp and validity period. This is encrypted using the KDC's secret key. TGS session key — communicates between the client and the Ticket Granting Service (TGS). This is encrypted using a hash of the user's password. The TGT is an example of a logical token. All the TGT does is identify who you are and confirm that you have been authenticated—it does not provide you with access to any domain resources. Federation Federation is the notion that a network needs to be accessible to more than just a well-defined group of employees. In business, a company might need to make parts of its network open to partners, suppliers, and customers. The company can manage its employee accounts easily enough. Managing accounts for each supplier or customer internally may be more difficult. Federation means the company trusts accounts created and managed by a different network. As another example, in the consumer world, a user might want to use both Google Workspace and Twitter. If Google and Twitter establish a federated network for the purpose of authentication and authorization, then the user can log on to Twitter using their Google credentials or vice versa. An on-premises network can use technologies such as LDAP and Kerberos, very often implemented as a Windows Active Directory network, because the administration of accounts and devices can be centralized. When implementing federation, authentication and authorization design comes with more constraints and additional requirements to ensure interoperability between different platforms. Web applications might not support Kerberos, while third-party networks might not support direct federation with Active Directory/LDAP. The design for these cloud networks likely requires the use of other standard protocols or frameworks for interoperability between web applications. These interoperable federation protocols use claims-based identity. While the technical implementation and terminology are different, the overall model is similar to that of Kerberos SSO: The principal attempts to access a service provider (SP). The service provider redirects the principal to an identity provider (IdP) to authenticate. The principal authenticates with the identity provider and obtains a claim in the form of some sort of token or document signed by the IdP. The principal presents the claim to the service provider. The SP can validate that the IdP has signed the claim because of its trust relationship with the IdP. The service provider can now connect the authenticated principal to its own accounts database to determine its permissions and other attributes. It may be able to query attributes of the user account profile held by the IdP if the principal has authorized this type of access. Federated identity management overview Images © 123RF.com Description A federated network or cloud needs specific protocols and technologies to implement user identity assertions and transmit claims between the principal, the relying party, and the identity provider. Security Assertion Markup Language (SAML) is one such solution. SAML assertions (claims) are written in eXtensible Markup Language (XML). Communications are established using HTTP/HTTPS and the Simple Object Access Protocol (SOAP). The secure tokens are signed using the XML signature specification. The use of a digital signature allows the relying party to trust the identity provider. An example of a SAML implementation is Amazon Web Services (AWS), which functions as a SAML service provider. This allows companies using AWS to develop cloud applications to manage their customers' user identities and provide them with permissions on AWS without having to create accounts for them on AWS directly. <samlp:Response      xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\" xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\" ID=\"200\" Version=\"2.0\" IssueInstant=\"2020-01-01T20:00:10Z \" Destination=\"https://sp.foo/saml/acs\" InResponseTo=\"100\". <saml:Issue>https://idp.foo/sso</saml:Issuer>r<saml:Issuer>https://idp.foo/sso</saml:Issuer> <ds:Signatur>...</ds:Signature>e<ds:Signature>...</ds:Signature> <samlp:Statu>...(success)...</samlp:Status.s<samlp:Status>...(success)...</samlp:Status. <saml:Assertion xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" ID=\"2000\" Version=\"2.0\" IssueInstant=\"2020-01-01T20:00:09Z\"> <saml:Issuer>https://idp.foo/sso</saml:Issuer> <ds:Signature>...</ds:Signature> <saml:Subjec>...t<saml:Subject>... <saml:Condition>...s<saml:Conditions>... <saml:AudienceRestrictio>...n<saml:AudienceRestriction>... <saml:AuthnStatemen>...t<saml:AuthnStatement>... <saml:AttributeStatemen>t<saml:AttributeStatement> <saml:Attribut>...e<saml:Attribute>... <saml:Attribut>...e<saml:Attribute>... </saml:AttributeStatemen>t</saml:AttributeStatement> </saml:Assertio>n</saml:Assertion> </samlp:Response> Open Authorization Many public clouds use application programming interfaces (APIs) based on Representational State Transfer (REST) rather than SOAP. These are called RESTful APIs. Where SOAP is a tightly specified protocol, REST is a looser architectural framework. This allows the service provider more choice over implementation elements. Compared to SOAP and SAML, there is better support for mobile apps. Authentication and authorization for a RESTful API are often implemented using the  Open Authorization (OAuth) protocol. OAuth is designed to facilitate the sharing of information (resources) within a user profile between sites. The user creates a password-protected account at an identity provider (IdP). The user can link that identity to an OAuth consumer site without giving the password to the consumer site. A user (resource owner) can grant an OAuth client authorization to access some part of their account. A client in this context is an app or consumer site. The user account is hosted by one or more resource servers. A resource server is called an API server because it hosts the functions that allow OAuth clients (consumer sites and mobile apps) to access user attributes. An authorization server processes authorization requests. A single authorization server can manage multiple resource servers; equally, the resource and authorization server could be the same server instance. The client app or service must be registered with the authorization server. As part of this process, the client registers a redirect URL, which is the endpoint that will process authorization tokens. Registration also provides the client with an ID and a secret. The ID can be publicly exposed, but the secret must be kept confidential between the client and the authorization server. When the client application requests authorization, the user approves the authorization server to grant the request using an appropriate method. OAuth supports several grant types—or flows—for use in different contexts, such as server to server or mobile app to server. Depending on the flow type, the client will end up with an access token validated by the authorization server. The client presents the access token to the resource server, which then accepts the request for the resource if the token is valid. OAuth uses the  JavaScript Object Notation (JSON) Web Token (JWT) format for claims data. JWTs can be passed as Base64-encoded strings in URLs and HTTP headers and can be digitally signed for authentication and integrity. Play Video Video Control Resume Play 1.0x Volume Control Interactive Script Theater Mode Full Screen",
  "chunks": [
    {
      "chunk_id": "4.2.4_chunk_1",
      "content": "Security Pro 8.0",
      "summary": "Security Pro 8.0",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.2.4",
        "title": "Authentication Methods Facts",
        "content_type": "text",
        "filename": "4.2.4_Authentication_Methods_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.2.4_Authentication_Methods_Facts_[text].txt",
        "word_count": 1917,
        "has_content": true
      },
      "section_header": "Introduction",
      "timestamp_range": null
    },
    {
      "chunk_id": "4.2.4_chunk_2",
      "content": "While an on-premises network can use a local directory to manage accounts and rights, as organizations move services to the cloud, these authorizations have to be implemented using federated identity management solutions.",
      "summary": "4.2.4 Authentication Methods Facts: While an on-premises network can use a local directory to manage accounts and rights, as organizations move services to the cloud, these authorizations have to be implemented using federated identity management solutions.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.2.4",
        "title": "Authentication Methods Facts",
        "content_type": "text",
        "filename": "4.2.4_Authentication_Methods_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.2.4_Authentication_Methods_Facts_[text].txt",
        "word_count": 1917,
        "has_content": true
      },
      "section_header": "4.2.4 Authentication Methods Facts",
      "timestamp_range": null
    },
    {
      "chunk_id": "4.2.4_chunk_3",
      "content": "Local, network, and remote authentication Windows authentication Linux authentication Directory services Single sign-on authentication Federation Open authorization Local, Network, and Remote Authentication One of the most important features of an operating system is the authentication provider, which is the software architecture and code that underpins the mechanism by which the user is authenticated before starting a shell. Knowledge-based authentication relies on cryptographic hashes. A plaintext password is not usually transmitted or stored in a credential database because of the risk of compromise. Instead, the password is stored as a cryptographic hash. When a user enters a password to log in, an authenticator converts what is typed into a hash and transmits that to an authority. The authority compares the submitted hash to the one in the database and authenticates the subject only if they match. Windows Authentication Windows authentication involves a complex architecture of components (docs.microsoft.com/en-us/windows-server/security/windows-authentication/credentials-processes-in-windows-authentication), but the following three scenarios are typical: Windows local sign-in — is the Local Security Authority Subsystem Service (LSASS) that compares the submitted credential to a hash stored in the Security Accounts Manager (SAM) database, which is part of the registry. This is also referred to as interactive logon. Windows network sign-in — is LSASS, which can pass the credentials for authentication to an Active Directory (AD) domain controller. The preferred system for network authentication is based on Kerberos, but legacy network applications might use NT LAN Manager (NTLM) authentication. Remote sign-in — is used if the user's device is not directly connected to the local network. Authentication can take place over a virtual private network (VPN), enterprise Wi-Fi, or web portal. These use protocols to create a secure connection between the client machine, the remote access device, and the authentication server. Linux Authentication In Linux, local user account names are stored in /etc/passwd . When a user logs in to a local interactive shell, the password is checked against a hash stored in /etc/shadow. Interactive login over a network is typically accomplished using Secure Shell (SSH). With SSH, the user can be authenticated using cryptographic keys instead of a password. A pluggable authentication module (PAM) is a package for enabling different authentication providers, such as smart-card log-in. The PAM framework can also be used to implement authentication to network directory services. Directory Services A directory service stores information about users, computers, security groups/roles, and services. Each object in the directory has a number of attributes. The directory schema describes the types of attributes, what information they contain, and whether they are required or optional. In order for products from different vendors to be interoperable, most directory services are based on the Lightweight Directory Access Protocol (LDAP), which was developed from a standard called X.500. Within an X.500-like directory, a distinguished name (DN) is a collection of attributes that define a unique identifier for any given resource. A distinguished name is made up of attribute-value pairs separated by commas. The most specific attribute is listed first, and successive attributes become progressively broader. This most specific attribute is the relative distinguished name, as it uniquely identifies the object within the context of successive (parent) attribute values. Browsing objects in an Active Directory LDAP schema Screenshot used with permission from Microsoft Description Some of the attributes commonly used include common name (CN), organizational unit (OU), organization (O), country (C), and domain component (DC). For example, the distinguished name of a web server operated by Widget in the UK might be the following: CN=WIDGETWEB, OU=Marketing, O=Widget, C=UK, DC=widget, DC=foo Single Sign-on Authentication A single sign-on (SSO) system allows the user to authenticate once and then receive authorizations on compatible application servers without having to enter credentials again. Kerberos is a single sign-on network authentication and authorization protocol used on many networks, notably as implemented by Microsoft's Active Directory (AD) service. Kerberos was named after the three-headed guard dog of Hades (Cerberus) because it consists of three parts. Clients request services from application servers, which rely on an intermediary—a key distribution center (KDC) —to vouch for their identity. There are two services that make up a KDC: the Authentication Service and the Ticket Granting Service. Kerberos Authentication Service Images © 123RF.com Description Kerberos can authenticate human users and application services. These are collectively referred to as principals. Using authentication to a Windows domain as an example, the first step in Kerberos SSO is to authenticate with a KDC server implemented as a domain controller. The principal sends the authentication service (AS) a request for a Ticket Granting Ticket (TGT). This is composed by encrypting the date and time on the local computer with the user's password hash as the key. The password hash itself is not transmitted over the network. Although we refer to passwords for simplicity, the system can use other authenticators, such as smart card login. The AS checks that the user account is present, that it can decode the request by matching the user's password hash with the one in the Active Directory database, and that the request has not expired. If the request is valid, the AS responds with the following data: Ticket Granting Ticket (TGT) — contains information about the client (name and IP address) plus a time stamp and validity period. This is encrypted using the KDC's secret key. TGS session key — communicates between the client and the Ticket Granting Service (TGS). This is encrypted using a hash of the user's password. The TGT is an example of a logical token. All the TGT does is identify who you are and confirm that you have been authenticated—it does not provide you with access to any domain resources. Federation Federation is the notion that a network needs to be accessible to more than just a well-defined group of employees. In business, a company might need to make parts of its network open to partners, suppliers, and customers. The company can manage its employee accounts easily enough. Managing accounts for each supplier or customer internally may be more difficult. Federation means the company trusts accounts created and managed by a different network. As another example, in the consumer world, a user might want to use both Google Workspace and Twitter. If Google and Twitter establish a federated network for the purpose of authentication and authorization, then the user can log on to Twitter using their Google credentials or vice versa. An on-premises network can use technologies such as LDAP and Kerberos, very often implemented as a Windows Active Directory network, because the administration of accounts and devices can be centralized. When implementing federation, authentication and authorization design comes with more constraints and additional requirements to ensure interoperability between different platforms. Web applications might not support Kerberos, while third-party networks might not support direct federation with Active Directory/LDAP. The design for these cloud networks likely requires the use of other standard protocols or frameworks for interoperability between web applications. These interoperable federation protocols use claims-based identity. While the technical implementation and terminology are different, the overall model is similar to that of Kerberos SSO: The principal attempts to access a service provider (SP). The service provider redirects the principal to an identity provider (IdP) to authenticate. The principal authenticates with the identity provider and obtains a claim in the form of some sort of token or document signed by the IdP. The principal presents the claim to the service provider. The SP can validate that the IdP has signed the claim because of its trust relationship with the IdP. The service provider can now connect the authenticated principal to its own accounts database to determine its permissions and other attributes. It may be able to query attributes of the user account profile held by the IdP if the principal has authorized this type of access. Federated identity management overview Images © 123RF.com Description A federated network or cloud needs specific protocols and technologies to implement user identity assertions and transmit claims between the principal, the relying party, and the identity provider. Security Assertion Markup Language (SAML) is one such solution. SAML assertions (claims) are written in eXtensible Markup Language (XML). Communications are established using HTTP/HTTPS and the Simple Object Access Protocol (SOAP). The secure tokens are signed using the XML signature specification. The use of a digital signature allows the relying party to trust the identity provider. An example of a SAML implementation is Amazon Web Services (AWS), which functions as a SAML service provider. This allows companies using AWS to develop cloud applications to manage their customers' user identities and provide them with permissions on AWS without having to create accounts for them on AWS directly. <samlp:Response      xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\" xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\" ID=\"200\" Version=\"2.0\" IssueInstant=\"2020-01-01T20:00:10Z \" Destination=\"https://sp.foo/saml/acs\" InResponseTo=\"100\". <saml:Issue>https://idp.foo/sso</saml:Issuer>r<saml:Issuer>https://idp.foo/sso</saml:Issuer> <ds:Signatur>...</ds:Signature>e<ds:Signature>...</ds:Signature> <samlp:Statu>...(success)...</samlp:Status.s<samlp:Status>...(success)...</samlp:Status. <saml:Assertion xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" ID=\"2000\" Version=\"2.0\" IssueInstant=\"2020-01-01T20:00:09Z\"> <saml:Issuer>https://idp.foo/sso</saml:Issuer> <ds:Signature>...</ds:Signature> <saml:Subjec>...t<saml:Subject>... <saml:Condition>...s<saml:Conditions>... <saml:AudienceRestrictio>...n<saml:AudienceRestriction>... <saml:AuthnStatemen>...t<saml:AuthnStatement>... <saml:AttributeStatemen>t<saml:AttributeStatement> <saml:Attribut>...e<saml:Attribute>... <saml:Attribut>...e<saml:Attribute>... </saml:AttributeStatemen>t</saml:AttributeStatement> </saml:Assertio>n</saml:Assertion> </samlp:Response> Open Authorization Many public clouds use application programming interfaces (APIs) based on Representational State Transfer (REST) rather than SOAP. These are called RESTful APIs. Where SOAP is a tightly specified protocol, REST is a looser architectural framework. This allows the service provider more choice over implementation elements. Compared to SOAP and SAML, there is better support for mobile apps. Authentication and authorization for a RESTful API are often implemented using the  Open Authorization (OAuth) protocol. OAuth is designed to facilitate the sharing of information (resources) within a user profile between sites. The user creates a password-protected account at an identity provider (IdP). The user can link that identity to an OAuth consumer site without giving the password to the consumer site. A user (resource owner) can grant an OAuth client authorization to access some part of their account. A client in this context is an app or consumer site. The user account is hosted by one or more resource servers. A resource server is called an API server because it hosts the functions that allow OAuth clients (consumer sites and mobile apps) to access user attributes. An authorization server processes authorization requests. A single authorization server can manage multiple resource servers; equally, the resource and authorization server could be the same server instance. The client app or service must be registered with the authorization server. As part of this process, the client registers a redirect URL, which is the endpoint that will process authorization tokens. Registration also provides the client with an ID and a secret. The ID can be publicly exposed, but the secret must be kept confidential between the client and the authorization server. When the client application requests authorization, the user approves the authorization server to grant the request using an appropriate method. OAuth supports several grant types—or flows—for use in different contexts, such as server to server or mobile app to server. Depending on the flow type, the client will end up with an access token validated by the authorization server. The client presents the access token to the resource server, which then accepts the request for the resource if the token is valid. OAuth uses the  JavaScript Object Notation (JSON) Web Token (JWT) format for claims data. JWTs can be passed as Base64-encoded strings in URLs and HTTP headers and can be digitally signed for authentication and integrity. Play Video Video Control Resume Play",
      "summary": "This lesson covers the following topics:: Windows network sign-in — is LSASS, which can pass the credentials for authentication to an Active Directory (AD) domain controller. Kerberos is a single sign-on network authentication and authorization protocol used on many networks, notably as implemented by Microsoft's Active Directory (AD) service.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.2.4",
        "title": "Authentication Methods Facts",
        "content_type": "text",
        "filename": "4.2.4_Authentication_Methods_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.2.4_Authentication_Methods_Facts_[text].txt",
        "word_count": 1917,
        "has_content": true
      },
      "section_header": "This lesson covers the following topics:",
      "timestamp_range": null
    },
    {
      "chunk_id": "4.2.4_chunk_4",
      "content": "1.0x Volume Control Interactive Script Theater Mode Full Screen",
      "summary": "1.0x Volume Control Interactive Script Theater Mode Full Screen",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.2.4",
        "title": "Authentication Methods Facts",
        "content_type": "text",
        "filename": "4.2.4_Authentication_Methods_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.2.4_Authentication_Methods_Facts_[text].txt",
        "word_count": 1917,
        "has_content": true
      },
      "section_header": "CC",
      "timestamp_range": null
    }
  ],
  "num_chunks": 4,
  "document_summary": "Authentication Methods Facts (text): Windows network sign-in — is LSASS, which can pass the credentials for authentication to an Active Directory (AD) domain controller. Kerberos is a single sign-on network authentication and authorization protocol used on many networks, notably as implemented by Microsoft's Active Directory (AD) service. If Google and Twitter establish a federated network for the purpose of authentication and authorization, then the user can log on to Twitter using their Google credentials or vice versa."
}