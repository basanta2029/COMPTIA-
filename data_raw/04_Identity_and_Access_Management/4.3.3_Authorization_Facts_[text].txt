Security Pro 8.0

4.3.3 Authorization Facts

Authorization is the process of determining what rights and privileges a particular entity should have on available resources and then enforcing those rights.

This lesson covers the following topics:

Authorization
Permissions, privileges, and roles
Access control lists (ACLs)
Authorization with single sign-on
Authorization

In this lesson, you will learn to:

Examine the access token
Learning Outcomes

As you study this lesson, answer the following questions:

How is authorization different from authentication?
How does an access control list (ACL) help to increase network security?
What is the difference between a Discretionary access control list (DACL) and a system access control list (SACL)?
Key Terms

The key terms for this lesson include:

Term
Definition
Authorization	Granting a user on the computer system the right to use a resource.
Access control list (ACL)	A collection of access control entries that determines which users are allowed or denied access to an object and the privileges given to that user.
Effective permissions	Access rights are cumulative, giving the user combined permissions from multiple groups.
Deny permissions	Always override Allow permissions.
Certification Exam Objectives

This section helps you prepare for the following certification exam objectives:

Exam	
Objective
CompTIA Security+ SY0-701	
1.2 Summarize fundamental security concepts.

Authentication, Authorization, and Accounting (AAA)
Authorization models
1.4 Explain the importance of using appropriate cryptographic solutions.

Obfuscation
Tokenization
2.5 Explain the purpose of mitigation techniques used to secure the enterprise.

Access control
Access control list (ACL)
Permissions
4.6 Given a scenario, implement and maintain identity and access management.

Permission assignments and implications
Single sign-on (SSO)
Access controls
Discretionary
TestOut Security Pro	
2.5.2 Access control

5.2.1 Access control list (ACL)
5.2.2 Permissions
4.6.8 Access control

6.8.3 Role-based
Permissions, Privileges, and Roles

A crucial part of any security administrator's job is to control access to resources. For example, with file system security, each object in the file system has an access control list (ACL) associated with it. The ACL contains a list of accounts (principals) allowed to access the resource and the permissions they have over it. The order of ACEs in the ACL is essential in determining effective permissions for a given account. ACLs can be enforced by a file system that supports permissions, such as NTFS, ext3/ext4, or ZFS.

Types of permissions are described in the table below.

Permission Type
Description
Effective permissions	Access rights (permissions) are cumulative. If you are a member of two groups with different permissions, you have the combined permissions of both groups (this is known as effective permissions). Effective permissions are the combination of inherited permissions and explicit permissions.
Deny permissions	Deny permissions always override Allow permissions. For example, if a user belongs to two groups and specific permission is allowed for one group and denied for the other, the permission is denied. However, the exception to this rule comes with inherited permissions. If an object has an explicit Allow permission entry, inherited Deny permissions do not prevent access to the object. Explicit permissions override inherited permissions, including Deny permissions.
Cumulative permissions	
The following suggestions will help you plan permissions and mitigate issues related to cumulative permissions:

Identify the users and their access needs (the actions each user needs to be able to perform).
Create a group for each type of user with similar needs. Then, make the users members of the appropriate group.
Assign each group (not the user) the permissions appropriate to the group's data access needs. Grant only the necessary permissions.
Take inheritance into account as you assign permissions. Inheritance means permissions granted to a parent container object flow down to child objects within the container. Set permissions as high as possible on the parent container and allow each child container to inherit the permissions.
Override inheritance on a case-by-case basis when necessary.
Access Control Lists (ACLs)

Access control lists (ACLs) in computer systems and networks are used to enforce access control policies. An ACL is a list of rules or entries that specify which users or groups are allowed or denied access to specific resources or perform certain actions. In networks, ACLs are associated with routers, firewalls, or similar devices and define rules that determine how network traffic is filtered or forwarded based on criteria like source IP addresses, destination IP addresses, ports, or protocols.

ACLs can help to control network access and protect against unauthorized or malicious activities. ACLs control access to files, directories, or system resources in operating systems and file systems. Each access control entry (ACE) typically contains a user or group identifier and associated permissions controlling actions that are allowed or denied. These permissions often include read, write, execute, and sometimes more granular limits such as modify, delete, or list.

While ACLs offer flexibility and control, managing complex access control policies with numerous ACL entries can become challenging. Complexity increases the risk of misconfigurations. Therefore, proper planning, periodic reviews, and best practice configurations are essential when implementing and maintaining ACLs.

For example,  Discretionary access control (DAC) is based on the primacy of the resource owner. In a DAC model, every resource has an owner. The owner creates a file or service, although ownership can be assigned to another user. The owner has full control over the resource, and they can modify its access control list (ACL) to grant rights to others.

An access control system ensures that an information system meets the goals of the CIA triad. Access control governs how subjects/principals may interact with objects. Subjects are people, devices, software processes, or any other system that can request and be granted access to a resource. Objects are the resources. An object could be a network, server, database, app, or file. Subjects are assigned rights or permissions on resources.

A security principal is an object that can be given permissions to an object. Security principals include user accounts, computer accounts, and security group accounts.

Each security principal is given a unique identification number called a Security ID (SID).
When a security principal logs on, an access token is generated. The access token controls access to resources and contains the SID for the user or computer, for all groups the user or computer is a member of, and the user rights granted to the security principal.
When the security principal tries to access a resource or take action, information in the access token is checked. For example, when a user tries to access a file, the access token is checked for the user's SID and all groups. The SIDs are then compared to those in the object's DACL to identify permissions that apply.
On a Microsoft system, the access token is only generated during authentication. Changes to group memberships or user rights do not occur until the user logs on again and a new access token is created.
Authorization with Single Sign-on

After completing authentication, the client can decrypt the Ticket Granting Service (TGS) session key but not the Ticket Granting Ticket (TGT). This establishes that the client and key distribution center(KDC) know the same shared secret and that the client cannot interfere with the TGT.

To access resources within the domain, the principal requests a service ticket (a token that grants access to a target application server). This process of granting service tickets is handled by the TGS.
The principal sends the TGS a copy of its TGT and the name of the application server it wishes to access, plus an authenticator consisting of a time-stamped client ID encrypted using the TGS session key.
The TGS should be able to decrypt both messages using the KDC's secret key for the first and the TGS session key for the second. This confirms that the request is genuine. It also checks that the ticket has not expired and has not been used before (replay attack). The TGS service responds with the following:

A Service session key — is used between the client and the application server. This is encrypted with the TGS session key.
A Service ticket — contains information about the principal, such as a time stamp, system IP address, Security Identifier (SID) and the SIDs of groups to which it belongs, and the service session key. This is encrypted using the application server's secret key.
The principal forwards the service ticket, which it cannot decrypt, to the application server and adds another time-stamped authenticator, which is encrypted using the service session key.
Kerberos Ticket Granting Service

Images © 123RF.com
Description
The application server decrypts the service ticket to obtain the service session key using its secret key, confirming that the principal has sent it an untampered message. It then decrypts the authenticator using the service session key.
Optionally, the application server responds to the principal with the time stamp used in the authenticator, which is encrypted using the service session key. The principal decrypts the time stamp, verifies that it matches the value already sent, and concludes that the application server is trustworthy.
This means that the server is authenticated to the principal (referred to as mutual authentication). This prevents an on-path attack, where a malicious user could intercept communications between the principal and server.

The server now responds to access requests (assuming they conform to the server's access control list).
One of the noted drawbacks of Kerberos is that the KDC represents a single point of failure for the network. In practice, backup KDC servers can be implemented (for example, Active Directory supports multiple domain controllers, each of which is running the KDC service).
