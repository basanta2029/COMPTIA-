Security Pro 8.0

3.5.2 Public Key Infrastructure Facts

Public Key Infrastructure (PKI) is the framework that helps to establish trust in the use of public key cryptography to sign and encrypt messages via digital certificates. A digital certificate is a public assertion of identity validated by a certificate authority (CA).

This lesson covers the following topics:

Certificate authorities
Digital certificates
Certificate attributes
Certificate Authorities

Public key cryptography solves the problem of distributing encryption keys when you want to communicate securely with others or authenticate a message that you send to others.

When you want others to send you confidential messages, you give them your public key to encrypt the message. The message can then only be decrypted by your private key, which you keep known only to yourself.
When you want to authenticate yourself to others, you sign a hash of your message with your private key. You give others your public key to use to verify the signature. As only you know the private key, everyone can be assured that only you could have created the signature.
The basic problem with public key cryptography is that while the owner of a private key can authenticate messages, there is no mechanism for establishing the owner's identity. This problem is particularly evident with e-commerce. How can you be sure that a shopping site or banking service is really maintained by whom it claims? The fact that the site is distributing a public key to secure communications is no guarantee of actual identity. How do you know that you are corresponding directly with the site using its genuine public key? How can you be sure there is no threat actor with network access intercepting and modifying what you think the legitimate server is sending you?

Public key infrastructure (PKI) aims to prove that the owners of public keys are who they say they are. Under PKI, anyone issuing a public key should publish it in a digital certificate. The certificate's validity is guaranteed by a certificate authority (CA).

PKI can use private or third-party CAs. A private CA can be set up within an organization for internal communications. The certificates it issues will only be trusted within the organization. For public or business-to-business communications, a third-party CA can be used to establish a trust relationship between servers and clients. Examples of third-party CAs include Comodo, DigiCert, GeoTrust, IdenTrust, and Let's Encrypt.

Public key infrastructure allows clients to establish a trust relationship with servers via certificate authorities

Description
The functions of a third-party public CA are as follows:

Provide a range of certificate services useful to the community of users serviced by the CA.
Ensure the validity of certificates and the identity of those applying for them (registration).
Establish trust in the CA with users, governments, regulatory authorities, and enterprises such as financial institutions.
Manage the servers (repositories) that store and administer the certificates.
Perform key and certificate lifecycle management, notably revoking invalid certificates.
Digital Certificates

A digital certificate is essentially a wrapper for a subject's public key. As well as the public key, it contains information about the subject and the certificate's issuer. The certificate is digitally signed to prove that it was issued to the subject by a particular CA. The subject could be a human user (for certificates allowing the signing of messages, for instance) or a computer server (for a web server hosting confidential transactions, for instance).

Digital certificate details showing the subject's public key

Screenshot used with permission from Microsoft
Description
Digital certificates are based on the X.509 standard approved by the International Telecommunications Union and standardized by the Internet Engineering Task Force (tools.ietf.org/html/rfc5280). RSA also created a set of standards, referred to as Public Key Cryptography Standards (PKCS), to promote the use of public key infrastructure.
Certificate Attributes

Each CA is responsible for maintaining a database containing the information or attributes of each certificate. The attributes that can be included are:

Version - The X.509 version used for the certificate.
Serial Number - A unique identifier for each certificate.
Signature algorithm - The algorithm used to sign the certificate (SHA-2, RSA, etc.).
Issuer - The CA that issues the certificate.
Valid From and Valid To - The two fields that show the validity period of the certificate.
Subject - The field that contains the name and location information of the organization.
Public Key - The algorithm used to create the key and the public key information.
Depending on the organization, there may also be additional optional fields called extensions in the certificate.

One of the key attributes is the Valid To field. If a certificate is not renewed by this date, it will expire and no longer be valid. Aside from expiration, some other reasons a certificate might be invalidated are:

The organization no longer exists.
The private key has been compromised.
The issued certificate is discovered to be fake.
If a certificate is invalidated for these or other reasons, it will be added to a certificate revocation list (CRL). The CRL is a blacklist of certificates. CAs must maintain and constantly update the CRLs as part of their databases. Web browsers automatically download updated CRLs at set intervals.

The X.509 standard also defines an internet protocol that can be used to determine the validity or state of a certificate. This is called the Online Certificate Status Protocol (OCSP). OCSP can be used to simplify the process of checking whether or not a certificate is valid.

OCSP is designed to replace CRLs. Instead of a CA maintaining the CRL, an OCSP server called a responder maintains the lists of any revoked certificate. When the browser connects to a site, the browser sends a request to the OCSP responder to check the validity of the certificate. OCSP provides the following benefits:

Timely information on the status of a certificate.
Better bandwidth management because the client does not download the entire CRL.
A grace period for expired certificates.
