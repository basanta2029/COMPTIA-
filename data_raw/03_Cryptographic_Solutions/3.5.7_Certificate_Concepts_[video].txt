Click one of the buttons to take you to that part of the video.


Certificate Concepts 00:00-00:24

Using digital certificates to share public keys and validate organizations has become a key component to doing business over the internet. Certificate Authorities, or CAs, are trusted organizations that validate and administer these certificates. In this lesson, I'll go over how CAs are set up and managed.

Certificate Chaining 00:24-00:41

To fully understand how certificates work, you need to understand how CAs are set up. To increase security, CAs operate in a hierarchy of multiple CAs. This is done so that if one of the CAs is compromised, only the certificates it issued need to be revalidated.

Root CA 00:41-00:49

The first CA is the Root CA. This is a self-signed certificate and is used to validate additional CAs.

Intermediate CAs 00:49-01:39

Under the Root CA, you have Subordinate CAs, also known as Intermediate CAs. You can have multiple Intermediate CAs based on their policies and regulations. The Intermediate CAs validate the Issuing Certificate Authorities and the Issuing CA is the one that hands out certificates. When you check the certification path in a web browser, you can usually see this structure.

For example, when we look at TestOut's certificate, we see that their server certificate was issued by this Intermediate CA, which was signed by this Root CA. This structure is known as certificate chaining, or the chain of trust.

Certificate chaining is done to protect the root certificate. If the root certificate is ever compromised, all certificates that have been issued underneath it are now invalid and need to be redone.

Online vs. Offline CA 01:39-02:20

Another common method of protecting the Root CA is to keep it offline and only bring it online when it needs to authorize a new Intermediate CA.

Once the Root CA has been set up and the intermediate certificates issued, the Root CA is generally taken offline. This means that it's isolated from network access and is usually completely turned off. If an Intermediate CA is compromised, only the certificates they issued need to be reissued. In other words, not every certificate that was issued under the Root CA is compromised.

The problem with this is that the Root CA can't manage and update the Certificate Revocation List, or CRL, if it's offline.

CRL Management 02:20-02:46

To remedy this, the Intermediate CAs can be set up to manage the CRL, or a specific Intermediate CA can be configured to handle this job.

Instead of having browsers constantly checking the CRLs, the Online Certificate Status Protocol, or OCSP, was created to replace CRLs and can be used to determine the validity of certificates. Let's see how this works.

OCSP 02:46-03:01

When OCSP servers, also called responders, receive a request from the web browser, they check with the CA and send an up-to-date certificate status. This frees up CAs from having to maintain their own CRLs.

OCSP Stapling 03:01-03:37

To further help with performance, a network might use OCSP stapling. Stapling simply means that the server that holds the certificate also provides any revocation information.

This works by having the certificate holder send a query to the OCSP responder at set intervals. Then the server staples that timestamped response to its certificate so that in the first SSL or TSL handshake the OCSP validation is already attached. Now, the user's browser doesn't need to perform a separate OCSP request.

Certificate Pinning 03:37-04:17

Keep in mind that it's possible for a man-in-the-middle attack to intercept certificates during the handshake. This would allow a hacker to set up a malicious site using a valid certificate. This can be prevented using certificate pinning.

Certificate pinning is when an application, such as a web browser, has the server's certificate hard coded in the browser itself. When the application connects to the server, it downloads and checks the certificates. If they don't match, the application blocks the connection. Just know that certificate pinning was never really adopted by modern browsers, so it would mostly be used inside of an organization that's running their own CA.

Trust Models 04:17-04:37

Let's shift gears to trust models. All CAs start with a single trust model. This means that there's one Root CA for the organization that issues and manages certificates. As you've already seen, a hierarchical structure is mainly used. It starts with the root certificate and multiple Intermediate CAs below it.

Mesh Model 04:37-04:58

It's also possible for you to set up a mesh model. In a mesh model, multiple CAs issue certificates to each other. This works great because if one CA is compromised, those certificates can still be valid because other CAs have authenticated them. The problem with this model is that it becomes extremely difficult to scale up with growth.

Bridge Model 04:58-05:36

Another thing to consider is how trusts can be set up when one organization who has their own CA structure wants to partner with another organization that has their own CA structure. In this scenario, there needs to be a way for each organization to trust the certificates issued by the other's CAs. This can be done by setting up a bridge model in which both hierarchies trust each other. In this case, clients in both organizations trust certificates issued by CAs of either organization. You can also be more restrictive by setting up trusts with individual CAs that are lower on the hierarchy.

Web of Trust 05:36-06:07

Another common setup is the web of trust. Instead of using a CA, everyone is a trusted authority.

For example, if Craig trusts Ethan and Lynette trusts Craig, Lynette will also have an indirect trust with Ethan. In other words, you trust a friend of a friend. We see this setup often in PGP.

Implementing the proper model can help ensure that certificates are properly maintained and validated. Of course, all of this also relies on keeping our encryption keys safe.

Key Safety 06:07-07:07

Keeping a backup of private keys is important, but you'll need to make sure that they can't be accessed unless absolutely necessary. Normally, the CA never gets the user's private keys.

You can, though, use key archival to back up private keys. All this means is that the user sends their private key in a secure transmission to the CA to keep safe. The problem with this is that a serious security breach can occur if private keys are compromised. The advantage is that the archive of private keys is readily available if any are lost or corrupted.

Key escrow is like key archival, except that keys are sent to a trusted third party instead of the CA holding the keys. This is often done for security or legal purposes. Getting access to these keys may require legal action, and this is by design. For example, if law enforcement needs to access and analyze emails, they would need a court order to get the keys needed.

Summary 07:07-07:36

That's it for this lesson. In this lesson, we discussed how CAs are set up to manage certificates. We first looked at the concept of certificate chaining, which is the method of using a hierarchical certificate structure. Then we covered the difference in online and offline CAs and the best practice of leaving them offline whenever possible. Finally, we discussed different trust models and how to assure key safety through key archival or escrow services.