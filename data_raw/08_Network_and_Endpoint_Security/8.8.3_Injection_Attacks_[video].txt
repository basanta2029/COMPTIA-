Transcript




close interactive script
Click one of the buttons to take you to that part of the video.
1. Injection Attacks
00:04
In this lesson, we're going to talk about injection attacks.
00:06
We're going to focus on LDAP, XML, and
00:09
command injection attacks and a variation
00:11
called the directory traversal attack.
2. LDAP Injection Attacks
00:14
A lightweight directory access protocol, or LDAP, injection
00:17
attack is used to exploit a web-based application.
00:21
If the application fails to properly validate
00:24
the input in the form fields, then it's possible
00:26
for the wrong commands to be constructed.
00:29
This could potentially provide an attacker with
00:31
unauthorized access to the LDAP directory tree.
00:34
They may be able to view more information than
00:36
they should have access to, or even modify it.
00:40
Suppose we have an application that uses LDAP
00:42
calls to communicate with the directory tree.
00:45
Client workstations can access the web
00:47
server, load the application's web page,
00:49
and query the directory services tree.
00:52
Here, if the user supplies an invalid value, or
00:55
a malicious value, unexpected behavior can occur.
00:58
For example, suppose the user puts an asterisk
01:01
(*) in this field and submits the form.
01:03
Depending on the configuration, the directory
01:05
server could respond to the LDAP query with a list
01:08
of every user in the directory services tree.
01:11
You do not want an attacker to be able
01:13
to see all the users in your tree.
01:15
An attacker could even use this field to view the
01:17
attributes of a user object, such as the password.
3. XML Injection Attacks
01:21
An XML injection attack manipulates the XML structure
01:24
used by an XML-based application or service.
01:28
It inserts malicious content into the structure,
01:30
which can affect the application's output.
01:33
An XML injection attack might cause your CDATA field to be
01:36
ignored by your XML parser and input validation filters.
01:39
It will slip by.
01:41
In this example, the payload contains a malicious URL.
01:45
If the user clicks on the link thinking it's for
01:47
something else, it will actually go to that user's banking
01:50
account and run a cross-site request forgery attack.
01:53
This is just a simple example, and the result of the
01:56
attack would depend on what the malicious URL contains.
4. Command Injection Attacks
01:59
Let's review command-injection attacks.
02:02
The purpose of this attack is to inject and
02:04
execute commands in a vulnerable application.
02:07
The vulnerable application runs commands on
02:10
behalf of the attacker with the privileges
02:12
assigned to the application itself.
02:15
Let's suppose a Linux server is running the DNS service.
02:18
If an attacker was able to exploit this service,
02:21
they could then run commands on this Linux server.
02:23
This was a very popular attack several years ago.
02:26
Many system administrators ran this service as the root user
02:29
account, which allowed them to run commands with full access.
02:33
To combat this attack, you should never
02:35
run a service as an administrative user.
02:37
Instead, create a limited user account on
02:40
the system that only has access to what
02:42
the service requires and nothing more.
5. Directory Traversal
02:45
Let's look at one more variation of the
02:47
injection attack called the directory
02:49
traversal attack or path traversal attack.
02:51
This attack's goal is to gain access to a
02:54
specific file stored elsewhere in the file system.
02:57
It usually exploits some type of
02:59
vulnerability in the application itself,
03:02
such as not properly validating user input.
03:05
In this case, characters representing the path to
03:08
the parent directory on the application server could
03:10
be manipulated to allow access to secure files.
03:14
For example, let's say there is a file
03:15
directory with two subdirectories.
03:17
Inside subdirectory A, there is a file named 123.
03:21
Inside subdirectory B, there is a file named 456.
03:25
The user, in this case, only has access to file
03:28
456, and he can search the directory hierarchy
03:31
for a vulnerability and access file 123.
03:35
Because of this vulnerability, web applications
03:37
need to be coded such that they look for all
03:40
characters that could be used for directory
03:42
traversal, whether it's the actual characters ("..",
03:44
"/", "\") or their percent encoded equivalents.
6. Summary
03:48
In this lesson, we looked at injection attacks.
03:50
We have covered LDAP, XML, and command injection attacks.
03:54
We ended by looking at directory traversal attacks.