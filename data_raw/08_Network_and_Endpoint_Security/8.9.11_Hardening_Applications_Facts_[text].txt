Security Pro 8.0

8.9.11 Hardening Applications Facts

Application hardening is the process of preventing the exploitation of vulnerabilities in software applications. Applications pose the most difficult security challenges for a security administrator because they are complex, usually developed by a third party, and designed to accept input from users.

This lesson covers the following topics:

Application hardening guidelines
Application hardening techniques
Input validation
Monitoring capabilities
Application Hardening Guidelines

Basic hardening guidelines for applications are as follows:

Assume all installed applications are flawed.
Remove all unused applications from the system.
Limit administrative privileges.
Install security software, such as antivirus, anti-spyware, and anti-rootkit software.
Use firewalls, content filters, and operating system user-authentication features.
Restrict access to the application and provide access only to those who need it.
Update all applications with the latest patches when security bulletins are released.
Identify baselines.
Application Hardening Techniques

Additional application hardening includes the following techniques:

Technique
Description
Block process spawning	Process spawning is the creation of a new process (also called a child process) by an existing process (also called a parent process). If you take the process-spawning ability from the application, threat agents cannot perform process-spawning attacks.
Control access to executable files	Executable files should be protected from modification by removing the Write permissions given to applications.
Protect OS components	Sensitive file system areas (such as Windows Registry keys) should be protected by removing Write permissions given to specific applications. In most cases, applications do not need to modify sensitive areas of the system for them to function properly.
Use exception rules	Exception rules allow an administrator to bypass a specific hardening rule when an application has a legitimate need. Administrators should exercise caution and set parameters regarding the exceptions that ensure the security of the system.
Use Data Execution Prevention	Data Execution Prevention (DEP) is a security feature that can help prevent damage to your computer from viruses and other security threats. DEP ensures that applications use computer memory safely. DEP closes an application and notifies the administrator if a program initiates run instructions from the portion of memory used for data.
Implement third-party application hardening tools	Third-party application hardening systems are developed for specific applications. The rules used by the application hardening system can be applied to the application being hardened, including libraries and SDKs. An example of these tools is AppArmor for Linux systems.
Input Validation

Input validation is an essential protection technique used in software and web development that addresses the issue of untrusted input. Untrusted input describes how an attacker can provide specially crafted data to an application to manipulate its behavior. Injection attacks exploit the input mechanisms applications rely on to execute malicious commands and scripts to access sensitive data, control the operation of the application, gain access to otherwise protected back-end systems, and disrupt operations.

OWASP provides an excellent overview of input validation. Without effective input validation, applications are vulnerable to many different classes of injection attacks, such as SQL injection, code injection, cross-site scripting (XSS), and many others.
Monitoring Capabilities

Secure coding practices focus primarily on preventing software vulnerabilities and stress enhancements to logging and monitoring capabilities. These features support security analysts tasked with detecting potential threats and malicious activity in software. Writing code with enhanced monitoring capabilities improves the granularity and effectiveness of logging and alerting systems, which are crucial system monitoring tools.

Implementing comprehensive and meaningful logging requires developers to ensure their applications generate logs that capture important events and activities to support security audits, incident response, and system troubleshooting. Secure coding practices encourage robust error handling to hide or mask sensitive debugging information, and this practice minimizes the risk of attackers exploiting information displayed in error messages. Integrating real-time alerting capabilities within the application code can significantly improve threat detection. For example, code that triggers alerts when specific events occur, such as repeated failed login attempts or unusual data transfers, helps security analysts monitor applications more effectively. These alerts often indicate a potential security breach and provide crucial information for incident response teams.
