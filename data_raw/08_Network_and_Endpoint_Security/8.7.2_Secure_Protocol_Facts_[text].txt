Security Pro 8.0

8.7.2 Secure Protocol Facts

Many protocols created in the past were designed with few to no security controls. An unsecured protocol is one that does not provide authentication or encryption or one that uses plaintext for passing authentication information or data. Newer protocols with security controls include Secure Sockets Layer (SSL), Transport Layer Security (TLS), Secure Shell (SSH), HyperText Transfer Protocol (HTTP), and HyperText Transfer Protocol Secure (HTTPS).

This lesson covers the following topics:

Remote desktop
Secure Shell
HTTPS and S-HTTP
Remote Desktop

A remote access VPN joins the user's PC or smartphone to a remote private network via a secure tunnel over a public network. Remote access can also be a means of connecting to a specific computer over a network. This type of remote access involves connecting to a terminal server on a host using software that transfers shell data only. The connection could be a client and terminal server on the same local network or across remote networks.

A graphical remote access tool sends screen and audio data from the remote host to the client and transfers mouse and keyboard input from the client to the remote host. Microsoft's Remote Desktop Protocol (RDP) can be used to access a physical machine on a one-to-one basis.

Alternatively, a site can operate a remote desktop gateway that facilitates access to virtual desktops or individual apps running on the network servers. RDP connections are encrypted by default. There are several popular alternatives to Remote Desktops. Most support remote access to platforms other than Windows (macOS and iOS, Linux, Chrome OS, and Android, for instance). Examples include TeamViewer (teamviewer.com/en) and Virtual Network Computing (VNC), which is implemented by several different providers (notably realvnc.com/en).

In the past, these remote desktop products required a dedicated client app. Remote desktop access can now just use a web browser client. The canvas element introduced in HTML5 allows a browser to draw and update a desktop with relatively little lag. It can also handle audio. This is referred to as an HTML5 VPN or as a clientless remote desktop gateway (guacamole.apache.org). This solution uses a protocol called WebSocket, which enables bidirectional messages to be sent between the server and client without requiring the overhead of separate HTTP requests.
Secure Shell

Secure Shell (SSH) is the principal means of obtaining secure remote access to a command line terminal. The main uses of SSH are for remote administration and secure file transfer (SFTP). Numerous commercial and open - source SSH products are available for all the major NOS platforms. The most widely used is OpenSSH (openssh.com).

SSH servers are identified by a public/private key pair that is referred to as the Host Key. Hostnames can be mapped to Host Keys manually by each SSH client or through various enterprise software products designed for SSH Host Key management.

Confirming the SSH server's Host Key using the PuTTY SSH client

Screenshot used with permission from PuTTY
Description
The Host Key must be changed if any compromise of the host is suspected. If an attacker has obtained the private key of a server or appliance, they can masquerade as that server or appliance and perform a spoofing attack, usually with a view to obtaining other network credentials.

The server's Host Key is used to set up a secure channel for the client to submit authentication credentials.

Type
Description
SSH client authentication	
SSH allows various methods for the client to authenticate to the server. Each of these methods can be enabled or disabled as required on the server using the /etc/ssh/sshd_config file:

Username/password - is when the client submits credentials verified by the SSH server either against a local user database or using a RADIUS server.
Public key authentication - is when each remote user's public key is added to a list of keys authorized for each local account on the SSH server.
Kerberos - is when the client submits the Kerberos credentials (a Ticket Granting Ticket) obtained when the user logs onto the workstation to the server using the Generic Security Services Application Program Interface (GSSAPI). The SSH server contacts the Ticket Granting Service (in a Windows environment, this will be a domain controller) to validate the credentials.
Managing valid client public keys is a critical security task. Many recent attacks on web servers have exploited poor key management. If a user's private key is compromised, delete the public key from the appliance, regenerate the key pair on the user's (remediated) client device, and copy the public key to the SSH server. Always delete public keys when the user's access permissions have been revoked.
SSH commands	
SSH commands are used to connect to hosts and set up authentication methods. To connect to an SSH server at 10.1.0.10 using an account named "bobby" and password authentication, run:

 ssh bobby@10.1.0.10 
The following commands create a new key pair and copy it to an account on the remote server:

 ssh-keygen -t rsa 
 ssh-copy-id bobby@10.1.0.10 
At an SSH prompt, you can now use the standard Linux shell commands. Use
 exit
to close the connection.
You can use the
 scp
command to copy a file from the remote server to the local host:
 scp bobby@10.1.0.10:/logs/audit.log audit.log 
Reverse the arguments to copy a file from the local host to the remote server. To copy the contents of a directory and any subdirectories (recursively, use the
 -r
option.
HTTPS and S-HTTP

A common unsecured protocol is the HyperText Transfer Protocol (HTTP). HTTP is used for exchanging web content and passes data in cleartext. HTTP uses TCP port 80 and is stateless, which means, by default, it does not keep track of clients. To solve this problem, cookies can be used to keep track of the client's behavior. To secure HTTP, use one of the following protocols:

Protocol
Description
HTTPS	
HyperText Transfer Protocol Secure is a secure form of HTTP that uses SSL or TLS to encrypt sensitive data before it is transmitted. HTTPS:

Is stateful, which means that it keeps track of the client. To do this, the client must communicate with the same HTTPS server for the duration of the session. Load balancing is not possible during the connection and is available only to initially determine which server will handle the client's session.
Requires TCP port 443 inbound on the webserver to be open.
Can be identified by verifying that the URL starts with https:// or by looking for a lock symbol in the browser. Double-clicking on the lock icon displays the certificate.
S-HTTP	
Secure HyperText Transfer Protocol (S-HTTP) is an alternate protocol that is not widely used because it is not as secure as HTTPS. S-HTTP:

Is connectionless, unlike SSL, which is connection-oriented.
Provides only message security, unlike HTTPS, which provides a full secure channel for all messages.
Does not use port 443.
