Transcript




close interactive script
Click one of the buttons to take you to that part of the video.
1. Exploit SQL on a Web Page
00:03
The internet used to be pretty simple and straightforward.
00:07
There was no JavaScript, Flash, CSS, backend databases,
00:10
or, really, any complex web design technologies.
00:13
That's all changed, and it's
00:15
changing more rapidly than ever.
00:17
These days, most websites are dynamic and database-driven.
00:21
Site content is dependent on user input
00:23
most of the time, and that data is written
00:25
to a database, typically an SQL database.
00:28
Like every other piece of computing technology
00:30
that's invented to solve a problem, hackers
00:32
have figured out how to attack these databases.
00:35
The term for attacking an SQL database is an SQL injection.
00:38
It's a very common way to attack databases.
00:41
The Open Web Application Security Project, OWASP,
00:44
almost always includes weak SQL databases in their list
00:47
of the top ten most widely exploited vulnerabilities.
00:51
In this demo, we're going to cover a few
00:53
SQL injections on a vulnerable web page.
00:55
This isn't a demo on SQL in general.
00:57
We're just taking a quick look at some things to be
00:59
aware of as a penetration tester or ethical hacker.
2. Our Setup
01:02
I'm on a Windows 10 system.
01:04
I've already done a few things to it.
01:06
First, I've downloaded and installed XAMPP, which is a
01:09
package that contains Apache, Maria Data Base, PHP, and Perl.
01:13
I've also downloaded and configured the Darn Vulnerable Web
01:16
Application, DVWA, which is a vulnerable PHP and MySQL web
01:21
application designed for security professionals to practice
01:24
their penetration testing and ethical hacking skills.
3. Find Username Accounts with SQL Injection
01:27
First, we want to do a few simple injections.
01:30
Let's start out by typing in a number, number 1.
01:33
Click Submit.
01:34
Now let's type in 2 and click Submit.
01:36
All this does is give you the
01:38
user ID, first name, and surname.
01:40
That's not very useful, but it does
01:42
show that it's not designed very well.
01:44
We want to get more than that, so
01:45
let's expand on our SQL injection.
01:48
We're going to enter code to pull
01:49
up records for a specific user.
01:51
By crafting our input, we can get more from
01:53
the output than the code author intended.
01:56
So, let's enter in the number 1, which is the user
01:58
ID, with a single quote followed by a true statement.
02:02
Our true statement can be anything
02:04
that's true, such as 1 is equal to 1.
02:06
It will look like this: ‘1' and 1=1#'.
02:11
Click Submit.
02:12
We see the first name and the surname for that user.
4. Find the Database Name and Username
02:15
Now let's go a little further.
02:16
Let's say we want to find out our database
02:18
name and username for the database.
02:20
For that, I'll do a select statement by entering in ‘1'
02:24
and 1=1 union select database(), user()#'and press Enter.
02:33
Now, down here, I get the name of my database,
02:36
which is dvwa, and the username is root@localhost.
5. Find a List of Tables
02:40
I want to see if I can get a
02:41
list of tables from our database.
02:43
For that, I'll do another select statement and
02:45
enter in ‘1' and 1= union select null, table_name
02:51
from information_schema.tables#' and press Submit.
02:57
Okay.
02:58
I just got a long list of tables here.
03:00
I'm looking for something that might have
03:02
a list of usernames and passwords in it.
03:04
Right here, I see a table called users, so I wonder if
03:08
that might be the list of users along with their passwords?
03:10
There's one way to find out: let's see if
03:13
we can pull information from that table.
6. Find Usernames and Passwords from a Table
03:15
To pull the information out of the Users table, I'll
03:17
enter in the following select statement: ‘1' and 1= union
03:22
select user password from users#' and click Submit.
03:27
Here, you can see a nice list of the usernames
03:29
along with the password hashes for each one.
03:31
Now we can use a cracking program to
03:33
attempt to crack any of these hashes.
7. Summary
03:35
And that's it for this demo.
03:37
In this demo, we used a vulnerable
03:38
website to practice some SQL injections.
03:40
First, we found a list of users.
03:42
Then we expanded to find the name
03:44
of the database and the username.
03:46
We ended by finding a list of tables,
03:48
specifically the user table, and then retrieved
03:50
the usernames and password hashes from that table.