Security Pro 8.0

8.3.3 Linux Host Security Facts

This lesson covers the following topics:

Protecting ports
Host-based firewalls and IPS
Hardening a Linux system
Protecting Ports

Physical device port hardening involves restricting the physical interfaces on a device that can be used to connect to it, thereby reducing potential avenues of physical attack. One common technique is disabling unnecessary physical ports such as USB, HDMI, or serial ports when they serve no business purpose. Doing so helps prevent unauthorized data transfer, installation of malicious software, or direct access to a system.

Port control software provides additional protection by only allowing authorized devices to connect via physical ports based on device identifiers. For instance, it might block all USB mass storage devices except company-approved ones.

Security analysts can leverage settings in device firmware or UEFI/BIOS for port hardening to disable physical ports or to require a password before a device can boot from a nonstandard source like a USB drive. For devices such as tablets and laptops that depend upon wireless protocols, disabling the automatic network connection feature can prevent the device from using potentially insecure or rogue networks.

As revealed by researcher Karsten Nohl in his BadUSB paper (https://assets.website-files.com/6098eeb4f4b0288367fbb639/62bc77c194c4e0fe8fc5e4b5_SRLabs-BadUSB-BlackHat-v1.pdf), exploiting the firmware of external storage devices, such as USB flash drives and even standard-looking device charging cables, presents adversaries with an incredible toolkit. The firmware can be reprogrammed to make the device look like another device class, such as a keyboard. In this case, it could then be used to inject a series of keystrokes upon an attachment or work as a keylogger. The device could also be programmed to act like a network device and corrupt name resolution, redirecting the user to malicious websites.

Another example is the O.MG cable (theverge.com/2019/8/15/20807854/apple-mac-lightning-cable-hack-mike-grover-mg-omg-cables-defcon-cybersecurity), which packs enough processing capability into an ordinary-looking USB-Lightning cable to run an access point and keylogger.

A modified device may have visual clues that distinguish it from a mass-manufactured thumb drive or cable, but these may be difficult to spot. You should warn users of the risks and repeat the advice to never attach devices of unknown provenance to their computers and smartphones. If you suspect a device is an attack vector, observe a sandboxed lab system (sometimes referred to as a sheep dip) closely when attaching the device. Look for command prompt windows or processes, such as the command interpreter starting and changes to the registry or other system files.

Not all attacks have to be so esoteric. USB sticks infected with ordinary malware are still incredibly prolific infection vectors. Hosts should always be configured to prevent autorun when USB devices are attached. USB ports can be blocked altogether using most types of host intrusion detection systems (HIDS).

Protect logical ports by implementing measures to secure and control access to ports within a computer system or network. Logical ports are software-based communication features that enable data exchange between applications or services. Common examples of logical ports include the well-known ports used by TCP/IP and UDP protocols.

Firewalls protect logical ports by examining network traffic and enforcing security policies to allow or block specific connections based on port numbers, source and destination addresses, and protocols. Service hardening practices ensure that services running on logical ports are hardened against security threats. Examples include keeping software updated and turning off unnecessary services.
Host-Based Firewalls and IPS

Host-based firewalls and intrusion prevention systems (IPS) are vital elements of endpoint hardening, as they provide controls for incoming and outgoing network traffic and are essential for detecting potential attacks. An important technique for using them when hardening endpoints involves implementing default-deny policies to block all traffic unless explicitly allowed. This tactic ensures that only approved services and applications can communicate. Configuring firewalls to block or allow traffic based on port numbers is also critical to minimize entry points for attack. Traffic filtering enables firewalls and IPS to sift through traffic based on parameters like IP addresses, protocols, and services to block malicious traffic or only allow traffic to use secure protocols.

An integral part of IPS is detecting and preventing intrusions by monitoring for known malicious patterns or anomalies in network traffic. Advanced host-based firewalls often include application control features that permit only trusted applications to communicate. The logs generated by host-based firewalls and IPS support rapid detection and response when integrated with other security tools like security information and event management (SIEM) systems.
Hardening a Linux System

The following table describes the general procedures for increasing endpoint security of a Linux system:

Security Task
Procedure
Remove unnecessary software	
Unnecessary software occupies disk space and could introduce security flaws. To remove unnecessary software:

Enter one of the following commands:
yum list installed or dnf list installed to see installed RPM packages on the computer.
apt
apt autoremove automatically removes unused packages
apt list list all installed packages
dpkg get-selections to see installed Debian packages on the computer.
Research the function of any unrecognized package to determine if it is necessary.
Use one of the following commands to uninstall unnecessary packages.
yum erase packagename
dnf remove packagename
apt remove packagename
rpm -e packagename
dpkg -r packagename
Check for unnecessary network services	
Unnecessary network services waste computer resources and increase the system's attack service. To remove unnecessary network services:

Find all installed services and determine which are not needed: DNS, SNMP, DHCP, and others.
systemctl --type=service --state=active
Use the man command and the internet to research services you do not recognize.
If the service is not needed, determine if it is a dependency for another service.
Disable the service by using the following command:
systemctl disable servicename
Use one of the following commands to stop the script immediately:
systemctl stop servicename
Use one of the following commands to remove the script package entirely:
yum erase packagename
dnf remove packagename
apt remove packagename
rpm -e packagename
dpkg -r packagename
Locate open ports	
Open ports can provide information about which operating system a computer uses. Also, they can provide entry points or information about ways to formulate an attack. To locate open ports:

Install the nmap utility if it is not already installed.
yum install nmap
dnf install nmap
apt -i nmap
Use both of the following commands to scan for open ports:
nmap -sT ipaddress|fqdn scans for TCP ports
nmap -sU ipaddress|fqdn scans for UDP ports
Determine which services use the open ports.
Disable any unused service using the open ports information. (Make sure the service used is not a dependency for another service.)
systemctl disable servicename
systemctl stop servicename
Check network connections	
Open network connections (open sockets) on a computer create a security risk. A socket is an endpoint of a bi-directional communication flow across a computer network. Use the following netstat (network statistics) or ss (socket statistics) options to identify the open network connections on Linux systems:

-a lists both listening and non-listening sockets.
-l (lowercase 'L') lists listening sockets.
-s displays statistics for each protocol.
-i displays a table of all network interfaces.
