Transcript




close interactive script
Click one of the buttons to take you to that part of the video.
1. SQL Injection
00:04
SQL injection attacks are powerful and complex.
00:06
They're the tool behind many successful
00:09
high-profile internet security breaches.
00:11
In 2011, Sony was targeted by an SQL injection attack that
00:15
compromised over a million emails, usernames, and passwords.
00:19
In 2013, the United Stated Department of
00:22
Energy was targeted, and at least 100,000
00:24
employee records were compromised.
00:26
These records included contact information, social
00:28
security numbers, and even bank account numbers.
00:31
Perhaps the most ironic attack occurred when
00:33
mysql.com was attacked, releasing a large
00:37
list of usernames and passwords to hackers.
00:39
In each of these instances, the vulnerability
00:41
wasn't in the SQL software, but in the way the
00:44
websites and applications were implemented.
00:46
Each of these attacks could have been prevented with
00:48
careful front-end configuration and penetration testing.
2. How Web Applications Work
00:52
Because the SQL injection attacks target web
00:54
applications, let's review how they work.
00:57
When a user connects to a web application,
00:59
they make a request through the browser.
01:01
This request travels over the
01:02
internet and to the web server.
01:04
The web server accepts the request and
01:06
sends it to the corresponding web app.
01:09
The web application accesses the database, completes
01:12
the requested task, and then responds to the web server.
01:15
Once the transaction is complete, the web server
01:18
sends the requested information to the user's browser.
3. Databases
01:22
Because attackers are seeking information stored in
01:24
the database, we also need to review how those work.
01:27
Databases store all sorts of information, including
01:30
application data, configuration data, customer data, login
01:34
information, and--well--the possibilities are endless, so
01:38
you can imagine why databases are valuable targets.
01:41
A database is typically described by the way it stores data.
01:44
A relational database can be organized
01:46
in different ways, depending on need.
01:48
For example, customer orders can be sorted by
01:51
customer number, zip code, or product number.
01:54
A distributed database is designed so it's easy to
01:57
replicate to various locations across a network.
02:00
An object-oriented database is designed
02:02
around object classes and sub-classes.
02:05
Inside these databases are various methods
02:07
used to organize, manage, and retrieve data.
02:10
Records and rows are used to represent a
02:12
collection of relative data, such as information
02:15
about a product, a user, or a customer.
02:18
Think about the times you've gone shopping online, and
02:20
you've sorted your selection by color, cost, or rating.
02:23
These filters are possible because of these databases.
02:26
When you think about the number of times you've
02:28
entered contact information, account information,
02:31
or other personal information, you can start to
02:33
understand how valuable these stores of data are.
02:37
SQL was specifically designed
02:39
to request data from a database.
02:40
These requests take the form of a query--a
02:42
question--that asks the database to provide
02:45
information specific to your request.
4. How an SQL Injection Works
02:48
It's important to note that SQL injections
02:50
are a result of flaws in web applications,
02:53
not in the database or the web server.
02:55
These attacks exploit non-validated input
02:58
vulnerabilities and use them to send SQL commands
03:00
through the web application and to the database.
03:03
This is done by injecting a code into an existing line of
03:06
code before sending it onto the database for execution.
03:09
If the injection is successful, the malicious code runs on
03:12
the backend database and returns the requested information.
03:16
So, how does an SQL injection work?
03:19
Let's start with a very basic example.
03:22
Let's say you're logging into your account.
03:24
Normally, the user will enter their username-bobsmith--and
03:27
their password-secret--into the appropriate spaces.
03:30
Once they click Submit, the web application will send a
03:33
string to the web server that contains the credentials.
03:36
The command tells the database to check
03:38
for the provided username and compare it to
03:40
the stored password before granting access.
03:44
Assuming that the user is found,
03:45
they're directed to the requested page.
03:47
As you can see, the data that the user entered
03:50
is put into the same query as the commands.
03:52
As a result, this code is
03:54
susceptible to SQL injection attacks.
03:57
If the login fields haven't been restricted,
03:59
an attacker can add anything they want to them.
04:02
Let's say the attacker knows that Bob's username
04:04
is bobsmith, but they don't know Bob's password.
04:07
They may be able to enter
04:09
'bobsmith'--'in the username field.
04:11
The single quote indicates that data
04:13
has ended and a command is beginning.
04:15
The double dashes indicate that code is
04:17
ending and a comment is being entered.
04:20
Comments are code that a program doesn't execute--they
04:23
usually contain explanations or reminders for the programmer.
04:26
Because of this, the application
04:28
knows to ignore the comments.
04:31
Now, because the command treats everything after the
04:33
dashes as comments, the instruction to verify the
04:36
username with a given password is no longer visible,
04:39
and the user is granted access to the user account.
04:43
Although it's fairly easy to detect the
04:45
initial vulnerabilities for this attack,
04:47
SQL injections are extremely complex.
04:50
They require a lot of patience and a high
04:52
level of database and coding expertise.
04:55
So, why would attackers go to all this trouble?
04:57
Well, with great effort comes great reward, and
05:00
that's what these attackers are counting on.
05:02
SQL injections can be used to
05:03
implement several types of attacks.
05:06
When an attacker attempts an authentication bypass, they
05:09
log into an application with administrative privileges
05:11
without having to give a valid username or password.
05:15
An information disclosure attack provides an attacker
05:18
with sensitive information from the database.
05:20
An attacker can use a compromised data integrity attack
05:23
to deface a web page or alter a database's contents.
05:27
Attackers can use an SQL injection attack to compromise
05:30
data's availability; in other words, they can use it to
05:33
delete information stored in the database.
05:35
Attackers can also use this type of attack to remotely
05:38
execute code and compromise the host operating system.
5. Summary
05:42
Well, that's all for this lesson.
05:44
We talked about SQL injections and how they relate
05:46
to web application and database technologies.