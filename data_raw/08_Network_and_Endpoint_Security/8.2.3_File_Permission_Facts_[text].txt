Security Pro 8.0

8.2.3 File Permission Facts

This lesson covers the following topics:

File system permissions
Managing file system permissions
File System Permissions

With file system security, each object in the file system has an access control list (ACL) associated with it. The ACL contains a list of accounts (principals) allowed to access the resource and the permissions they have over it. The order of ACEs in the ACL is important in determining effective permissions for a given account. ACLs can be enforced by a file system that supports permissions, such as NTFS, ext3/ext4, or ZFS.

Configuring an access control entry for a folder

Screenshot used with permission from Microsoft
Description
For example, in Linux, there are three basic permissions:

Read (r) - is the ability to access and view the contents of a file or list the contents of a directory.
Write (w) - is the ability to save changes to a file or create, rename, and delete files in a directory (also requires execute).
Execute (x) - is the ability to run a script, program, or other software file, or the ability to access a directory, execute a file from that directory, or perform a task on that directory, such as file search.
These permissions can be applied in the context of the owner user ( u), a group account ( g), and all other users/world ( o). A permission string lists the permissions granted in each of these contexts:

 drwxr-xr-x home 
The string above shows that for the directory ( d), the owner has read, write, and execute permissions, while the group context and other users have read and execute permissions.

The chmod command is used to modify permissions. It can be used in symbolic mode or absolute mode. In symbolic mode, the command works as follows:

 chmod g+w, o-x home 
The effect of this command is to append write permission to the group context and remove execute permission from the other context. By contrast, the command can also be used to replace existing permissions. For example, the following command applies the configuration shown in the first permission string:

 chmod u=rwx,g=rx,o=rx home 
In absolute mode, permissions are assigned using octal notation, where r=4, w=2, and x=1. For example, the following command has the same effect:

 chmod 755 home 
In this example, the 755 correlates to the permissions assigned to the user, group, and others, where user permissions are represented by 7, group permissions are 5, and others are also 5. The numbers are generated by adding the values associated with r (read), w (write), and x (execute). The only combination of values that can result in 7 is 4+2+1 or r, w, x. Similarly, the only combination of values resulting in 5 is 4+1, or r,x. This means the owner has r,w, and x, whereas the group and others have only r and x.
Managing File System Permissions

On a Windows system, access to files is controlled through two sets of permissions: share and New Technology File System (NTFS). The following table describes permissions specific to each type.

Permission Type
Description
Share
Share permissions control access through a network connection with the file server.

If files are accessed locally, share permissions do not control access.
Share permissions have three levels of permissions:
Reader (read-only)
Contributor (read and write)
Owner or Co-owner (full control or all permissions)
Share permissions can be set only on a folder.
NTFS	
NTFS permissions:

Can be set on drives, folders, and files.
Control both local and network access.
Have dozens of permissions that offer granular control over what actions are allowed.
Can be set only on volumes formatted with NTFS.
Be aware that:

Both share and NTFS permissions use a discretionary access control list (DACL) for controlling access. The access list identifies the users or groups and their associated permissions to files or folders.
Both share and NTFS permissions include Allow or Deny permissions. Deny permissions override Allow permissions.
Both share and NTFS permissions must be configured to allow access through the share. If a user is allowed share access but no NTFS permissions are set for the user or a group to which the user belongs, no access will be allowed.
Effective permissions to shared folders are the more restrictive of either share or NTFS permissions.
A user's effective permissions cannot be greater than the share permissions assigned to the user or a group to which the user belongs. For this reason, a common strategy for combining share and NTFS permissions is to:
Assign Co-owner share permissions to Everyone.
Use NTFS permissions to control access. Use the principle of least privilege by assigning NTFS permissions only to necessary groups and by assigning only the necessary permissions to those groups. Even though Everyone has share permissions, only the users or groups with NTFS permissions will have access.
Permissions for folders and files can be inherited. On Windows systems, the Advanced Security settings identify when permission inheritance is in effect.
Whenever possible, assign permissions to groups rather than users. Users receive the permissions assigned to their groups.
