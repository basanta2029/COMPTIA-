Security Pro 8.0

10.5.2 Mobile Device Connection Facts

Whether it is a tablet, smartphone, or e-reader, all mobile devices share some common characteristics.

This lesson covers the following topics:

Connection types
Security considerations
Application management
Apps security issues
Connection Types

Mobile devices can use various methods to connect to the internet, network, and other devices. Connection methods include:

Cellular
WiFi
Bluetooth
NFC
ANT
Infrared
USB
SATCOM (satellite)
Security Considerations

Mobile device security considerations include:

Device content management.
Remote wipe.
The ability to restrict the device to a particular geographical area (geofencing).
The ability to manage location information (known as geolocation).
The requirement to lock the screen with passwords.
The management of push notification services that can send messages and information to the device when the screen is locked, and the application is not active.
The ability to store and manage passwords for networks, websites, etc.
Biometrics.
Full device encryption.
Application Management

Security considerations regarding the management of applications on the mobile devices include:

Rooting/jailbreaking/sideloading to load apps from third-party app stores or other websites.
Flashing with custom firmware.
Carrier unlocking. This is the ability to use different mobile carrier networks.
The ability to receive over-the-air (OTA) firmware updates and app updates.
Camera usage and geolocation information in pictures.
Text and multimedia message protocols (SMS/MMS).
Connection to external media.
Connection using USB OTG (on-the-go).
The use of a microphone for recording purposes.
Tethering. This is the ability to share internet connectivity with other devices.
Apps Security Issues

When working with mobile device apps, be aware of the following security issues:

Security Issue
Implementation
App control	
Application control is implemented in a similar manner for most mobile device operating systems.

For iOS devices, all apps come from Apple's App Store, which uses the following mechanisms to secure apps:
Running apps are sandboxed. This means they cannot access data stored by other running apps, nor can they access system files and resources.
All iOS apps must be digitally signed by Apple or by a third-party developer using an Apple-issued certificate. This ensures that apps from the App Store haven't been tampered with.
App developers can use encryption APIs to protect app data. Data can be symmetrically encrypted using AES, RC4, or 3DES.
For Windows RT devices, all apps come from Microsoft's Windows Store. The following mechanisms secure apps:
Windows RT refuses to load modules not digitally signed by Microsoft. This ensures that apps from the Windows Store have not been tampered with.
All apps available through the Windows Store use the Windows RT API, which contains significant security enhancements, including:
Windows anti-buffer-overflow memory restrictions
Data Execution Prevention (DEP)
Address Space Layout Randomization (ASLR)
SafeSEH, sacrificial canary values
Be aware, however, that iOS devices can be jailbroken. Jailbreaking allows apps to be installed from sources other than the App Store. Likewise, apps that aren't from the Windows Store can be installed on Windows RT devices using a process called sideloading. Either of these actions can seriously compromise the security of the device and should be avoided.

Apps for the Android operating system are not as tightly controlled as those for iOS and Windows RT. Some Android app stores implement good security and tightly controlled apps, much like the App Store and the Windows Store, but others do not. It is strongly recommended that you use apps that come only from a reputable source, such as the following:

Google Play Store
Amazon Appstore for Android
Samsung Apps
Authentication and credential management	
The average end user must remember passwords for various network resources and services, including web-based services. To make life easier, the credential management function implemented in most mobile operating systems can store usernames and passwords for the end user. A good example is Credential Manager in Windows RT.

The iOS operating system performs a similar function using an encrypted keychain for storing digital identities, usernames, and passwords. When the user accesses a password-protected network resource or website, the credential management software supplies the necessary username and password, effectively allowing the user to log in automatically.

While credential management software is convenient for the end user, it can also represent a security risk. For example, suppose a user has stored credentials to a sensitive network resource or website on a mobile device and then loses that device. If the user fails to secure the device with a password or PIN, a malicious individual could exploit the stored credentials to gain unauthorized access.

It is recommended that you train users not to store credentials to sensitive network resources on their mobile devices.
App allow listing	
App allow listing is the process of defining specific apps that users can have on their mobile devices. For example, Windows RT provides a feature named Assigned Access, which allows you to define an allow list of Windows Store applications. Assigned Access ensures that the device has installed only the apps required for its intended purpose. Apps that aren't on the allow list are not allowed.

For iOS and Android devices, app allow lists can be defined and enforced using a mobile device management (MDM) solution.
Geo-tagging	
Geo-tagging embeds GPS coordinates within mobile device files, such as image or video files created with the device's camera. While this feature can be useful in some circumstances, it can also create security concerns.

For example, if a user regularly posts geo-tagged images to a social media site, cybercriminals could analyze the images and quickly discover where the user works, even the cubicle location. The attacker could possibly derive the user's work hours and personal habits, such as restaurants the user visits for lunch. All of this information could be compiled and used for social engineering attacks on the organization.

As a consequence, it is recommended that this functionality be disabled on mobile devices you manage.
