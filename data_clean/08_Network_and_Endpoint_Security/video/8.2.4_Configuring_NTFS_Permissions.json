{
  "metadata": {
    "chapter_num": "8",
    "section_num": "8.2.4",
    "title": "Configuring NTFS Permissions",
    "content_type": "video",
    "filename": "8.2.4_Configuring_NTFS_Permissions_[video].txt",
    "file_path": "data_raw/08_Network_and_Endpoint_Security/8.2.4_Configuring_NTFS_Permissions_[video].txt",
    "word_count": 2128,
    "has_content": true
  },
  "full_content": "Transcript close interactive script In this demonstration, we're going to practice configuring NTFS permissions. NTFS permissions let you control access to the Windows file system. Let's open our file browser on this Windows server system and go to our computer (or, as they call it in 2019 and Windows 10, This PC). Let's go to the Data volume. It has two subfolders here, one called Documents, and one called Reports. First, let's set NTFS permissions at the volume level. To do this, we right-click on the Data volume and select Properties. Then we need to select the Security tab, and we see a list of users and groups that have been given some level of access to the Data volume. So, if we select a particular user or group, such as the Everyone group, we see the permissions that are assigned to this group below. The permissions that we see in this example are default permissions. They were automatically assigned to this volume when it was created. The security principles that you see and the permissions that have been assigned to each one of these principles were assigned by default, so the Windows system assigned them when the data volume was originally created. For example, when the Users group was created, it was granted Read &amp; Execute, List Folder Contents, and Read. But you can see it wasn't granted Full Control. The Administrators group was granted Full Control and all the other rights. Members of the Administrators group were assigned Full Control to this volume. So members of the Administrators group can do whatever they want to the files and folders on the Data volume. If a user doesn't have Full Control, Modify, or Read &amp; Execute, then they're only allowed to read and see what's inside the folder and open files, but not necessarily create or delete them. Basically, they're not allowed to make any changes to a file because they don't have the rights and privileges to modify. Using groups to assign NTFS permissions is a good practice. Using groups instead of individual users makes administration of the NTFS file system a lot easier. If changes happen in the organization, then all you have to do is modify group membership. So, instead of making specific permission assignments for individual users, like this user here, you can just remove them from that specific group, and they lose membership immediately. Or, if you have a new employee or a new person in the organization that you need to give access to, you can just add them to that group, and it'll add the rights that group has access to. So, let's add a new group to the list of security principles here. We're going to click Edit and Add. If you don't know the name, you can click Advanced and Find now. This will show you every user and group listed in Active Directory. Let's type —�data'. It's beneficial to name your groups in a convention that suits you for easy tracking. As you can see, this organization used Data as the data drive, Documents for the documents folder, and Write to allow write access to that folder. Let's select data.all group, since that group describes access to the whole data volume. Now we can assign users to the data.all group to allow them write and modify privileges. So, by default, this group receives the Read &amp; Execute permissions, which allow them to execute executable files. They can also list folder contents and read those files. They can open them up and view the contents. But they're not allowed to modify or make any changes to those files because they don't have the Modify or Write permissions. We need to get the users in the data.all group more access to this volume. Let's grant them the Modify permission. That causes them to have the Write permission automatically. We're not going to give them Full Control, so let's click OK and OK. We assigned those permissions at the volume level. Let's go into the Data volume and view how the permissions that we assigned affect the subfolders of the data volume. We're going to double-click Data volume. Let's right-click on Documents and go to Properties. We're going to the Security tab again. The Data.all group, here, is now a security principal of this group as well. So, basically, any users who are members of the Data.all group will receive Modify, Read &amp; Execute, List Folder Contents, Read, and Write permissions to the Documents folder. But there's something different about these check marks. Previously, the check marks were black for the permissions assigned to the data.all group. In the Documents folder, they're greyed out. Whenever you see grey check marks on the Security tab in the permissions, that indicates that the permissions aren't explicitly assigned to this group on the folder level; they're being inherited from the Data volume or from the folder above them. So, we assigned the permissions to the volume itself. Because Documents is in a subfolder of Data, it automatically inherited the same permission assignments that were assigned to the volume. Inheritance makes permissions easier for system administrators to manage. And using inheritance, we assign the most common set of permissions that we want most of our users to have at the volume level. In this way, most of our user accounts have the permissions they need. Then we can set up exceptions for individual users or groups who need either more or less access than the average user. However, we can change these permissions if necessary. You override an inherited permission assignment by making an explicit permission assignment somewhere lower in the file system. For example, suppose we need to change the level of access that the Data.all group has to the Documents folder. To do this, we make an explicit permission assignment for the Data.all group to Documents. The assignment we make will override any permissions that are being inherited from the Data volume itself. First, let's click on Advanced. Here, you can see that Data.all is receiving its permission assignment by inheritance from drive D:, so D: is the root of the data volume. To change this, we click Disable inheritance. This will warn us that the inheritance permissions will no longer propagate down to the Documents folder. We have to decide how we want to handle the situation. We have two options to choose from. One is to convert inherited permissions into explicit permissions on this object, and the other is to remove all inherited permissions from the object. So, if we click this option, the gray check marks will change to black, allowing us to edit them. If we click the other option to remove all inherited permissions from this object, we basically remove all permissions and start from scratch. We're going to use the first option. We're going to convert inherited permissions into explicit permissions on this object. Inheritance is now turned off. For now, we're going to click OK. The check marks have gone from gray to black, and now we can edit them. The change that we made applied to all of our security principals, not just the Data.all group. Let's click another one—\"see, they're all black. On other operating systems, inheritance can be managed on a per-user or per-group basis. That's not the case with NTFS. We either allow inheritance for all security principals, or we turn inheritance off for all security principals, which is what we just did here. This is why selecting the Convert option is usually best. If we had selected the Remove all option, then all of the permissions to this folder would have been removed. That means we would have to go back and individually reassign what rights we wanted them to have. There may be situations where that is the best option, but in this case, it's not. Let's suppose you want to remove the Modify permission for the members of the Data.all group to the Documents folder. We don't care if the users in the Data.all group have Modify permissions to every other folder on the Data volume, such as Reports, but we don't want that permission to be applied to the Documents folder specifically. We can turn that off by clicking Edit, selecting the Data.all group, unchecking Modify, and then clicking OK and OK. The Data.all group still has a Modify permission to the Data volume itself because we haven't change permissions to the Report folder. They could also go in and modify Reports. Here, we can see that the Data.all group still has the inherited permissions to Reports. However, because we used an explicit assignment to the Documents folder, the Data.all group no longer has the ability to modify permissions to documents. So, let's take a look at how to manage permissions properly. It's best practice to use groups to allow or deny access, as I mentioned before. In this case, we'd like to block Samantha Carter from viewing the Reports folder. We haven't done this before, so we'll have to create a new security group for this purpose. In order to do that, we'll go to Server Manager &gt; Tools, and click on Active Directory Users and Computers. We've made a folder called Sec for all our security groups. Let's create a new security group by right-clicking and selecting New &gt; Group. We want our group name to be —�Data.reports.deny'. Let's select Domain Local and click OK. Our organization likes to have a description in the security group, so let's put a description in there. Right-click on data.reports.deny and select Properties. In the description field, type —�Deny Data Drive Report Access'. Next, we're going to click on the Members tab and click Add. In the Enter field, type —�Sam' and hit Check names. Now the full name of Samantha Carter is populated. Click OK and OK. Now that the security group is set up, we need to add this group to the Reports folder. Open the File Explorer, Click the Data drive, and right-click the Reports folder and select Properties. Under the Security tab, we want to edit permissions. Let's click the Add button and type —�data.reports.deny' in the Enter field. Click Check names to make sure your typing is correct and then click OK. Instead of the regular Read permissions listed, we're going to deny all Read permissions and then click OK. Notice that there's a window that pops up saying, —You're setting a Deny permissions entry. Deny entries take precedence over Allow entries. This means that if a user is a member of two groups, one that's allowed a permission and another that's denied the same permission, the user is denied that permission. Do you want to continue?—� Click Yes on the prompt. As you can see, the data.reports.deny group is set to Deny for all three permissions. For example, if Samantha was in both data.reports.write and data.reports.deny, she'll be denied access to read. And that's it for this demonstration. In this demo, we configured NTFS permissions in the Windows file system using groups.",
  "chunks": [
    {
      "chunk_id": "8.2.4_chunk_1",
      "content": "In this demonstration, we're going to practice configuring NTFS permissions. NTFS permissions let you control access to the Windows file system. Let's open our file browser on this Windows server system and go to our computer (or, as they call it in 2019 and Windows 10, This PC). Let's go to the Data volume. It has two subfolders here, one called Documents, and one called Reports.",
      "summary": "This section covers the practical application of configuring NTFS permissions to manage access to the Windows file system. Participants will learn to navigate the file browser on a Windows server, specifically focusing on setting permissions for subfolders like Documents and Reports within the Data volume. Understanding NTFS permissions is crucial for maintaining security and controlling user access to sensitive files.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.2.4",
        "title": "Configuring NTFS Permissions",
        "content_type": "video",
        "filename": "8.2.4_Configuring_NTFS_Permissions_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.2.4_Configuring_NTFS_Permissions_[video].txt",
        "word_count": 2128,
        "has_content": true
      },
      "section_header": "Configuring NTFS Permissions",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.2.4_chunk_2",
      "content": "First, let's set NTFS permissions at the volume level. To do this, we right-click on the Data volume and select Properties. Then we need to select the Security tab, and we see a list of users and groups that have been given some level of access to the Data volume. So, if we select a particular user or group, such as the Everyone group, we see the permissions that are assigned to this group below. The permissions that we see in this example are default permissions. They were automatically assigned to this volume when it was created. The security principles that you see and the permissions that have been assigned to each one of these principles were assigned by default, so the Windows system assigned them when the data volume was originally created. For example, when the Users group was created, it was granted Read &amp; Execute, List Folder Contents, and Read. But you can see it wasn't granted Full Control. The Administrators group was granted Full Control and all the other rights. Members of the Administrators group were assigned Full Control to this volume. So members of the Administrators group can do whatever they want to the files and folders on the Data volume. If a user doesn't have Full Control, Modify, or Read &amp; Execute, then they're only allowed to read and see what's inside the folder and open files, but not necessarily create or delete them. Basically, they're not allowed to make any changes to a file because they don't have the rights and privileges to modify.",
      "summary": "The NTFS permissions at the volume level determine user access to files and folders within a data volume, with default permissions assigned upon creation. For instance, the Administrators group is granted Full Control, allowing complete access, while the Users group typically has limited permissions such as Read & Execute and List Folder Contents, preventing them from modifying files. Understanding these permissions is crucial for managing security and access control in a Windows environment.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.2.4",
        "title": "Configuring NTFS Permissions",
        "content_type": "video",
        "filename": "8.2.4_Configuring_NTFS_Permissions_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.2.4_Configuring_NTFS_Permissions_[video].txt",
        "word_count": 2128,
        "has_content": true
      },
      "section_header": "NTFS Permissions at the Volume Level",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.2.4_chunk_3",
      "content": "Using groups to assign NTFS permissions is a good practice. Using groups instead of individual users makes administration of the NTFS file system a lot easier. If changes happen in the organization, then all you have to do is modify group membership. So, instead of making specific permission assignments for individual users, like this user here, you can just remove them from that specific group, and they lose membership immediately. Or, if you have a new employee or a new person in the organization that you need to give access to, you can just add them to that group, and it'll add the rights that group has access to.",
      "summary": "Utilizing groups for NTFS permission assignments streamlines file system administration by allowing changes to be made at the group level rather than for individual users. This approach simplifies user management, as adding or removing users from a group automatically grants or revokes access rights, enhancing efficiency and security in organizational settings. Overall, it promotes better scalability and easier maintenance of permissions as organizational roles evolve.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.2.4",
        "title": "Configuring NTFS Permissions",
        "content_type": "video",
        "filename": "8.2.4_Configuring_NTFS_Permissions_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.2.4_Configuring_NTFS_Permissions_[video].txt",
        "word_count": 2128,
        "has_content": true
      },
      "section_header": "Use Groups Instead of Individual Users",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.2.4_chunk_4",
      "content": "So, let's add a new group to the list of security principles here. We're going to click Edit and Add. If you don't know the name, you can click Advanced and Find now. This will show you every user and group listed in Active Directory. Let's type —�data'. It's beneficial to name your groups in a convention that suits you for easy tracking. As you can see, this organization used Data as the data drive, Documents for the documents folder, and Write to allow write access to that folder. Let's select data.all group, since that group describes access to the whole data volume. Now we can assign users to the data.all group to allow them write and modify privileges. So, by default, this group receives the Read &amp; Execute permissions, which allow them to execute executable files. They can also list folder contents and read those files. They can open them up and view the contents. But they're not allowed to modify or make any changes to those files because they don't have the Modify or Write permissions. We need to get the users in the data.all group more access to this volume. Let's grant them the Modify permission. That causes them to have the Write permission automatically. We're not going to give them Full Control, so let's click OK and OK. We assigned those permissions at the volume level. Let's go into the Data volume and view how the permissions that we assigned affect the subfolders of the data volume. We're going to double-click Data volume. Let's right-click on Documents and go to Properties. We're going to the Security tab again. The Data.all group, here, is now a security principal of this group as well. So, basically, any users who are members of the Data.all group will receive Modify, Read &amp; Execute, List Folder Contents, Read, and Write permissions to the Documents folder. But there's something different about these check marks. Previously, the check marks were black for the permissions assigned to the data.all group. In the Documents folder, they're greyed out. Whenever you see grey check marks on the Security tab in the permissions, that indicates that the permissions aren't explicitly assigned to this group on the folder level; they're being inherited from the Data volume or from the folder above them. So, we assigned the permissions to the volume itself. Because Documents is in a subfolder of Data, it automatically inherited the same permission assignments that were assigned to the volume. Inheritance makes permissions easier for system administrators to manage. And using inheritance, we assign the most common set of permissions that we want most of our users to have at the volume level. In this way, most of our user accounts have the permissions they need. Then we can set up exceptions for individual users or groups who need either more or less access than the average user. However, we can change these permissions if necessary. You override an inherited permission assignment by making an explicit permission assignment somewhere lower in the file system. For example, suppose we need to change the level of access that the Data.all group has to the Documents folder. To do this, we make an explicit permission assignment for the Data.all group to Documents. The assignment we make will override any permissions that are being inherited from the Data volume itself. First, let's click on Advanced. Here, you can see that Data.all is receiving its permission assignment by inheritance from drive D:, so D: is the root of the data volume. To change this, we click Disable inheritance. This will warn us that the inheritance permissions will no longer propagate down to the Documents folder.",
      "summary": "In this section, users learn how to create and manage security groups in Active Directory, specifically focusing on assigning permissions to a new group called \"data.all.\" By granting Modify permissions, users can write and modify files within the Data volume, while understanding the concept of permission inheritance, which simplifies management by allowing subfolders to inherit permissions from their parent folders. Additionally, users can override inherited permissions when necessary to tailor access for specific groups or individuals.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.2.4",
        "title": "Configuring NTFS Permissions",
        "content_type": "video",
        "filename": "8.2.4_Configuring_NTFS_Permissions_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.2.4_Configuring_NTFS_Permissions_[video].txt",
        "word_count": 2128,
        "has_content": true
      },
      "section_header": "Add a New Group",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.2.4_chunk_5",
      "content": "We have to decide how we want to handle the situation. We have two options to choose from. One is to convert inherited permissions into explicit permissions on this object, and the other is to remove all inherited permissions from the object. So, if we click this option, the gray check marks will change to black, allowing us to edit them. If we click the other option to remove all inherited permissions from this object, we basically remove all permissions and start from scratch. We're going to use the first option. We're going to convert inherited permissions into explicit permissions on this object. Inheritance is now turned off. For now, we're going to click OK. The check marks have gone from gray to black, and now we can edit them. The change that we made applied to all of our security principals, not just the Data.all group. Let's click another one—\"see, they're all black. On other operating systems, inheritance can be managed on a per-user or per-group basis. That's not the case with NTFS. We either allow inheritance for all security principals, or we turn inheritance off for all security principals, which is what we just did here. This is why selecting the Convert option is usually best. If we had selected the Remove all option, then all of the permissions to this folder would have been removed. That means we would have to go back and individually reassign what rights we wanted them to have. There may be situations where that is the best option, but in this case, it's not. Let's suppose you want to remove the Modify permission for the members of the Data.all group to the Documents folder. We don't care if the users in the Data.all group have Modify permissions to every other folder on the Data volume, such as Reports, but we don't want that permission to be applied to the Documents folder specifically. We can turn that off by clicking Edit, selecting the Data.all group, unchecking Modify, and then clicking OK and OK. The Data.all group still has a Modify permission to the Data volume itself because we haven't change permissions to the Report folder. They could also go in and modify Reports. Here, we can see that the Data.all group still has the inherited permissions to Reports. However, because we used an explicit assignment to the Documents folder, the Data.all group no longer has the ability to modify permissions to documents.",
      "summary": "In this section, we explore the management of inherited permissions in NTFS, focusing on the options to convert them into explicit permissions or remove them entirely. Choosing to convert inherited permissions allows for greater control over specific objects, enabling edits while maintaining existing permissions for other folders. This practical application demonstrates how to customize access rights, such as removing Modify permissions for a specific group on a designated folder without affecting their permissions on other folders.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.2.4",
        "title": "Configuring NTFS Permissions",
        "content_type": "video",
        "filename": "8.2.4_Configuring_NTFS_Permissions_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.2.4_Configuring_NTFS_Permissions_[video].txt",
        "word_count": 2128,
        "has_content": true
      },
      "section_header": "Convert Inherited Permissions",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.2.4_chunk_6",
      "content": "So, let's take a look at how to manage permissions properly. It's best practice to use groups to allow or deny access, as I mentioned before. In this case, we'd like to block Samantha Carter from viewing the Reports folder. We haven't done this before, so we'll have to create a new security group for this purpose. In order to do that, we'll go to Server Manager &gt; Tools, and click on Active Directory Users and Computers. We've made a folder called Sec for all our security groups. Let's create a new security group by right-clicking and selecting New &gt; Group. We want our group name to be —�Data.reports.deny'. Let's select Domain Local and click OK. Our organization likes to have a description in the security group, so let's put a description in there. Right-click on data.reports.deny and select Properties. In the description field, type —�Deny Data Drive Report Access'. Next, we're going to click on the Members tab and click Add. In the Enter field, type —�Sam' and hit Check names. Now the full name of Samantha Carter is populated. Click OK and OK. Now that the security group is set up, we need to add this group to the Reports folder. Open the File Explorer, Click the Data drive, and right-click the Reports folder and select Properties. Under the Security tab, we want to edit permissions. Let's click the Add button and type —�data.reports.deny' in the Enter field. Click Check names to make sure your typing is correct and then click OK. Instead of the regular Read permissions listed, we're going to deny all Read permissions and then click OK. Notice that there's a window that pops up saying, —You're setting a Deny permissions entry. Deny entries take precedence over Allow entries. This means that if a user is a member of two groups, one that's allowed a permission and another that's denied the same permission, the user is denied that permission. Do you want to continue?—� Click Yes on the prompt. As you can see, the data.reports.deny group is set to Deny for all three permissions. For example, if Samantha was in both data.reports.write and data.reports.deny, she'll be denied access to read.",
      "summary": "The \"Manage Permissions\" section of the CompTIA Security+ course emphasizes the importance of using security groups to control access to resources effectively. It demonstrates how to create a security group to deny access to a specific user, Samantha Carter, for the Reports folder, highlighting the process of setting permissions in Active Directory and the precedence of deny entries over allow entries. This practical application reinforces the principle of least privilege by ensuring that users only have access necessary for their roles.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.2.4",
        "title": "Configuring NTFS Permissions",
        "content_type": "video",
        "filename": "8.2.4_Configuring_NTFS_Permissions_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.2.4_Configuring_NTFS_Permissions_[video].txt",
        "word_count": 2128,
        "has_content": true
      },
      "section_header": "Manage Permissions",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.2.4_chunk_7",
      "content": "And that's it for this demonstration. In this demo, we configured NTFS permissions in the Windows file system using groups.",
      "summary": "In this demonstration, participants learned how to configure NTFS permissions within the Windows file system by utilizing user groups to manage access control effectively. This practical application highlights the importance of proper permission settings to enhance security and protect sensitive data from unauthorized access. Understanding NTFS permissions is crucial for implementing robust security measures in a Windows environment.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.2.4",
        "title": "Configuring NTFS Permissions",
        "content_type": "video",
        "filename": "8.2.4_Configuring_NTFS_Permissions_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.2.4_Configuring_NTFS_Permissions_[video].txt",
        "word_count": 2128,
        "has_content": true
      },
      "section_header": "Summary",
      "timestamp_range": ""
    }
  ],
  "num_chunks": 7
}