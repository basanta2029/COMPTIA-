{
  "metadata": {
    "chapter_num": "8",
    "section_num": "8.9.7",
    "title": "Implementing Application Allowed Lists with AppLocker",
    "content_type": "video",
    "filename": "8.9.7_Implementing_Application_Allowed_Lists_with_AppLocker_[video].txt",
    "file_path": "data_raw/08_Network_and_Endpoint_Security/8.9.7_Implementing_Application_Allowed_Lists_with_AppLocker_[video].txt",
    "word_count": 1547,
    "has_content": true
  },
  "full_content": "Transcript close interactive script In this demonstration, we'll practice implementing application deny and allow lists using AppLocker. AppLocker is a very useful feature of Windows. It allows you to control what applications are allowed or not allowed to run on machines in your domain. As a real-world example of why you might do this, I had a junior administrator once that ran some registry cleaning software on a production SQL server, and it damaged SQL. The database would still run, but I was not able to upgrade it to a newer version of SQL. After I set up a new SQL server and got the database moved over and functioning, I took the time to set up some AppLocker rules. I downloaded every registry cleaning software I could find and made Deny rules in AppLocker, so no one would ever be able to run a registry cleaner on a production server again. You can use it to accomplish such things as preventing malware from being installed, preventing unsupported applications from being installed. The process of implementing application block and allow lists is fairly complex. First, you must implement the rules for executable files. Then, you test those rules to verify that they are working as you expect without negatively affecting users. After you analyze events created by AppLocker, you can then modify the rules and enforce them. Let's begin with the first step of defining the executable rules. In this scenario, we'll enforce the AppLocker policy settings using Group Policy. By doing this, anytime a user logs into the domain, the AppLocker settings are automatically enforced. Let's open the Group Policy Manager. The default domain policy would be a bad choice of Group Policy objects (GPOs) to use. Improperly configured Applocker rules can render your system completely inoperable. If you put your rules in the Default Domain Policy and they don't work as expected, you're going to cause widespread problems across your whole domain. So, let's create a new GPO called Applocker. Let's right-click it and select Edit. We're going to resize this screen so we can see what's going on a little better. Under Computer Configuration, we'll expand Policies &gt; Windows Settings &gt; Security Settings &gt; Application Control Policies. When we expand AppLocker, we can see these sets of application rules we can use. Let's select AppLocker and click Configure rule enforcement. For our purposes today, we'll focus on Executable rules. We'll select the Configured checkbox here. After that we need to define whether we want to enforce those rules or just audit them. We'll choose to audit only for now. You could immediately enforce the rules if you wanted, however, in a production environment you want to make sure that the rules you define work properly for the end users in the organization. When we select Audit, the events are generated by AppLocker and we can access those in Event Viewer. We can analyze Event Viewer events to decide whether the rules are working correctly or whether we need to modify them. Let's go to Executable Rules. Notice that there are no rules here. We're enforcing them, but there are no rules to enforce. So, let's right-click here and select Create New Rule. In the Before You Begin screen, it tells you how the rule works and some preparatory steps you need to follow. For example, you need to make sure that the applications you want to create the rule for are installed on this system. We've already done that. There are other steps, but we don't need to worry about them. Let's click Next. Now we have to specify the action to be used in the AppLocker rule. As noted up here, an allow action permits the affected files to run. A deny action, on the other hand, prevents the files from running. We want to use an Allow rule. Another thing we do on this page is specify who this rule applies to. The application we are allowing is called SalesBuilder. It's used by the Sales department. As such, we want this rule to apply only to the Sales group. So, let's specify that this rule applies to the Sales group by clicking Select. We'll type in Sales and click Check Names. Windows has found the group, so we'll click OK. Click Next. At this point, we need to specify the primary condition that will be used in the rule. We have three options. We'll use the Path option. We would use the Publisher option if the application we want to create the rule for is signed by a known software publisher, but since ours is an in-house application that isn't signed, we can't' use that option. Let's click Next. Now we need to specify the path to the application. We'll click Browse Folders and let's browse to the folder where the executable resides. It's SalesBuilder; select it. Notice that we have two options for specifying a path. We can specify a file or specify a folder. Because we want the rule to apply to all files in the SalesBuilder folder, we specified a folder instead of a file. Click Next. We don't want to create any exceptions. The default rule name isn't very friendly, so I'm going to give this rule a more descriptive name. Notice that we're presented with this dialogue here. It tells us that we've created a custom rule, but there are default rules that should be created so that important system files will still be able to be run. If you don't create these default rules, you may not be able to run most of the applications that you need. Let's create the default rules along with the rule we just defined by clicking Yes. And there you go. Notice that the default rules allow basically full access to anyone in the administrator's group. The Everyone group is allowed access to all files located in the Windows folder and it is also allowed access to files that are installed in the Program Files folder. We had to create this custom rule because SalesBuilder is not installed in the Program Files folder. It's installed in the root directory of the C: drive. We created a special rule that allows the Sales group to run the application. It's important to know that the rules we just configured won't be applied to any users who are currently logged in while we defined these rules. The rules won't take effect until those users log out and log back in, or until you run GPUpdate on the workstation. Now, it's important to note that AppLocker uses the Application Identity service on individual workstations to verify the attributes of the executable files we specified in our executable rules. Therefore, we need to make sure that the Application Identity service is always started by default. We can do this using Group Policy. By doing this when the user logs into the domain, we enforce the AppLocker rules and we make sure that the Application Identity service automatically runs as well. So, let's edit our AppLocker policy again. We'll go to Computer Configuration &gt; Policies &gt; Windows settings &gt; Security Settings. Under Security Settings let's select System Services. Over here in the right pane, we'll right-click Application Identity. And then we'll define this to start automatically. Click OK. With the rules configured and the Application Identity service starting automatically, we can test our AppLocker policy. We can have end users log in to the domain, run the application as they normally would, and then we analyze the AppLocker events. Based on what we see in Event Viewer, we would decide whether the rules we set up are functioning correctly. If they are, we can enforce the policy. If not, we would go in and modify the policy to work the way it should. That's it for this demonstration. In this demo, we implemented application block and allow lists with AppLocker.",
  "chunks": [
    {
      "chunk_id": "8.9.7_chunk_1",
      "content": "In this demonstration, we'll practice implementing application deny and allow lists using AppLocker. AppLocker is a very useful feature of Windows. It allows you to control what applications are allowed or not allowed to run on machines in your domain. As a real-world example of why you might do this, I had a junior administrator once that ran some registry cleaning software on a production SQL server, and it damaged SQL. The database would still run, but I was not able to upgrade it to a newer version of SQL. After I set up a new SQL server and got the database moved over and functioning, I took the time to set up some AppLocker rules. I downloaded every registry cleaning software I could find and made Deny rules in AppLocker, so no one would ever be able to run a registry cleaner on a production server again. You can use it to accomplish such things as preventing malware from being installed, preventing unsupported applications from being installed.",
      "summary": "This section focuses on implementing application deny and allow lists using AppLocker, a Windows feature that helps manage which applications can run on domain machines. By creating specific rules, administrators can prevent unauthorized or harmful software, such as registry cleaners, from executing, thereby protecting critical systems like production SQL servers. Practical applications include enhancing security by blocking malware and unsupported applications, ensuring a stable and secure operating environment.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.9.7",
        "title": "Implementing Application Allowed Lists with AppLocker",
        "content_type": "video",
        "filename": "8.9.7_Implementing_Application_Allowed_Lists_with_AppLocker_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.9.7_Implementing_Application_Allowed_Lists_with_AppLocker_[video].txt",
        "word_count": 1547,
        "has_content": true
      },
      "section_header": "Implementing Application Deny and Allow Lists with AppLocker",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.9.7_chunk_2",
      "content": "The process of implementing application block and allow lists is fairly complex. First, you must implement the rules for executable files. Then, you test those rules to verify that they are working as you expect without negatively affecting users. After you analyze events created by AppLocker, you can then modify the rules and enforce them. Let's begin with the first step of defining the executable rules. In this scenario, we'll enforce the AppLocker policy settings using Group Policy. By doing this, anytime a user logs into the domain, the AppLocker settings are automatically enforced. Let's open the Group Policy Manager. The default domain policy would be a bad choice of Group Policy objects (GPOs) to use. Improperly configured Applocker rules can render your system completely inoperable. If you put your rules in the Default Domain Policy and they don't work as expected, you're going to cause widespread problems across your whole domain. So, let's create a new GPO called Applocker. Let's right-click it and select Edit. We're going to resize this screen so we can see what's going on a little better.",
      "summary": "The process of whitelisting applications involves creating and enforcing rules for executable files using AppLocker and Group Policy. It requires careful testing and analysis to ensure that the rules function correctly without disrupting user operations. Proper configuration is crucial, as mistakes can lead to significant issues across the domain, highlighting the importance of using a dedicated Group Policy Object (GPO) rather than the Default Domain Policy.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.9.7",
        "title": "Implementing Application Allowed Lists with AppLocker",
        "content_type": "video",
        "filename": "8.9.7_Implementing_Application_Allowed_Lists_with_AppLocker_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.9.7_Implementing_Application_Allowed_Lists_with_AppLocker_[video].txt",
        "word_count": 1547,
        "has_content": true
      },
      "section_header": "Whitelist an Application",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.9.7_chunk_3",
      "content": "Under Computer Configuration, we'll expand Policies &gt; Windows Settings &gt; Security Settings &gt; Application Control Policies. When we expand AppLocker, we can see these sets of application rules we can use. Let's select AppLocker and click Configure rule enforcement. For our purposes today, we'll focus on Executable rules. We'll select the Configured checkbox here. After that we need to define whether we want to enforce those rules or just audit them. We'll choose to audit only for now. You could immediately enforce the rules if you wanted, however, in a production environment you want to make sure that the rules you define work properly for the end users in the organization. When we select Audit, the events are generated by AppLocker and we can access those in Event Viewer. We can analyze Event Viewer events to decide whether the rules are working correctly or whether we need to modify them.",
      "summary": "In the \"Configure Rule Enforcement\" section of the CompTIA Security+ course, learners explore AppLocker under Windows Security Settings to manage application control policies. The focus is on configuring executable rules, allowing users to choose between enforcing or auditing these rules; auditing is recommended initially to ensure proper functionality without disrupting end users. By analyzing events generated in Event Viewer, administrators can assess the effectiveness of the rules and make necessary adjustments.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.9.7",
        "title": "Implementing Application Allowed Lists with AppLocker",
        "content_type": "video",
        "filename": "8.9.7_Implementing_Application_Allowed_Lists_with_AppLocker_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.9.7_Implementing_Application_Allowed_Lists_with_AppLocker_[video].txt",
        "word_count": 1547,
        "has_content": true
      },
      "section_header": "Configure Rule Enforcement",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.9.7_chunk_4",
      "content": "Let's go to Executable Rules. Notice that there are no rules here. We're enforcing them, but there are no rules to enforce. So, let's right-click here and select Create New Rule. In the Before You Begin screen, it tells you how the rule works and some preparatory steps you need to follow. For example, you need to make sure that the applications you want to create the rule for are installed on this system. We've already done that. There are other steps, but we don't need to worry about them. Let's click Next.",
      "summary": "In the \"Create a New Rule\" section of the CompTIA Security+ course, learners are guided through the process of establishing executable rules to enhance system security. The content emphasizes the importance of ensuring that the relevant applications are installed prior to rule creation and outlines preparatory steps necessary for effective rule implementation. This practical application reinforces the need for proactive security measures in managing software behavior on systems.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.9.7",
        "title": "Implementing Application Allowed Lists with AppLocker",
        "content_type": "video",
        "filename": "8.9.7_Implementing_Application_Allowed_Lists_with_AppLocker_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.9.7_Implementing_Application_Allowed_Lists_with_AppLocker_[video].txt",
        "word_count": 1547,
        "has_content": true
      },
      "section_header": "Create a New Rule",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.9.7_chunk_5",
      "content": "Now we have to specify the action to be used in the AppLocker rule. As noted up here, an allow action permits the affected files to run. A deny action, on the other hand, prevents the files from running. We want to use an Allow rule. Another thing we do on this page is specify who this rule applies to. The application we are allowing is called SalesBuilder. It's used by the Sales department. As such, we want this rule to apply only to the Sales group. So, let's specify that this rule applies to the Sales group by clicking Select. We'll type in Sales and click Check Names. Windows has found the group, so we'll click OK. Click Next.",
      "summary": "In the \"Set Permissions\" section of the CompTIA Security+ course, learners explore how to create AppLocker rules to manage application access effectively. The focus is on defining \"Allow\" and \"Deny\" actions for specific applications, such as SalesBuilder, and applying these rules to designated user groups, like the Sales department. This practical application helps ensure that only authorized personnel can run critical software, enhancing organizational security.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.9.7",
        "title": "Implementing Application Allowed Lists with AppLocker",
        "content_type": "video",
        "filename": "8.9.7_Implementing_Application_Allowed_Lists_with_AppLocker_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.9.7_Implementing_Application_Allowed_Lists_with_AppLocker_[video].txt",
        "word_count": 1547,
        "has_content": true
      },
      "section_header": "Set Permissions",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.9.7_chunk_6",
      "content": "At this point, we need to specify the primary condition that will be used in the rule. We have three options. We'll use the Path option. We would use the Publisher option if the application we want to create the rule for is signed by a known software publisher, but since ours is an in-house application that isn't signed, we can't' use that option. Let's click Next. Now we need to specify the path to the application. We'll click Browse Folders and let's browse to the folder where the executable resides. It's SalesBuilder; select it. Notice that we have two options for specifying a path. We can specify a file or specify a folder. Because we want the rule to apply to all files in the SalesBuilder folder, we specified a folder instead of a file. Click Next. We don't want to create any exceptions. The default rule name isn't very friendly, so I'm going to give this rule a more descriptive name.",
      "summary": "In this section of the CompTIA Security+ course, learners are guided on how to create security rules by specifying conditions, particularly focusing on the Path option for in-house applications. Participants will navigate to the folder containing the executable, choose to apply the rule to all files within that folder, and rename the rule for clarity. This practical application emphasizes the importance of customizing security settings to enhance application protection.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.9.7",
        "title": "Implementing Application Allowed Lists with AppLocker",
        "content_type": "video",
        "filename": "8.9.7_Implementing_Application_Allowed_Lists_with_AppLocker_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.9.7_Implementing_Application_Allowed_Lists_with_AppLocker_[video].txt",
        "word_count": 1547,
        "has_content": true
      },
      "section_header": "Specify Conditions and Path",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.9.7_chunk_7",
      "content": "Notice that we're presented with this dialogue here. It tells us that we've created a custom rule, but there are default rules that should be created so that important system files will still be able to be run. If you don't create these default rules, you may not be able to run most of the applications that you need. Let's create the default rules along with the rule we just defined by clicking Yes. And there you go. Notice that the default rules allow basically full access to anyone in the administrator's group. The Everyone group is allowed access to all files located in the Windows folder and it is also allowed access to files that are installed in the Program Files folder. We had to create this custom rule because SalesBuilder is not installed in the Program Files folder. It's installed in the root directory of the C: drive. We created a special rule that allows the Sales group to run the application.",
      "summary": "In this section, the importance of creating default rules alongside custom rules for security configurations is emphasized, ensuring that essential system files and applications can operate smoothly. Default rules typically grant full access to the administrator's group and allow the \"Everyone\" group access to files in the Windows and Program Files directories. A custom rule is also demonstrated, allowing specific user groups, like the Sales group, to run applications located outside standard directories, such as the root of the C: drive.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.9.7",
        "title": "Implementing Application Allowed Lists with AppLocker",
        "content_type": "video",
        "filename": "8.9.7_Implementing_Application_Allowed_Lists_with_AppLocker_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.9.7_Implementing_Application_Allowed_Lists_with_AppLocker_[video].txt",
        "word_count": 1547,
        "has_content": true
      },
      "section_header": "Create Default Rules",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.9.7_chunk_8",
      "content": "It's important to know that the rules we just configured won't be applied to any users who are currently logged in while we defined these rules. The rules won't take effect until those users log out and log back in, or until you run GPUpdate on the workstation. Now, it's important to note that AppLocker uses the Application Identity service on individual workstations to verify the attributes of the executable files we specified in our executable rules. Therefore, we need to make sure that the Application Identity service is always started by default. We can do this using Group Policy. By doing this when the user logs into the domain, we enforce the AppLocker rules and we make sure that the Application Identity service automatically runs as well. So, let's edit our AppLocker policy again. We'll go to Computer Configuration &gt; Policies &gt; Windows settings &gt; Security Settings. Under Security Settings let's select System Services. Over here in the right pane, we'll right-click Application Identity. And then we'll define this to start automatically. Click OK. With the rules configured and the Application Identity service starting automatically, we can test our AppLocker policy. We can have end users log in to the domain, run the application as they normally would, and then we analyze the AppLocker events. Based on what we see in Event Viewer, we would decide whether the rules we set up are functioning correctly. If they are, we can enforce the policy. If not, we would go in and modify the policy to work the way it should.",
      "summary": "In this section, the importance of the Application Identity service in enforcing AppLocker rules is highlighted, emphasizing that these rules only take effect after users log out or run GPUpdate. By configuring Group Policy to ensure the Application Identity service starts automatically, administrators can effectively manage application access based on predefined executable rules. Testing the AppLocker policy through user logins and analyzing Event Viewer logs allows for adjustments to ensure proper functionality and enforcement of security policies.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.9.7",
        "title": "Implementing Application Allowed Lists with AppLocker",
        "content_type": "video",
        "filename": "8.9.7_Implementing_Application_Allowed_Lists_with_AppLocker_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.9.7_Implementing_Application_Allowed_Lists_with_AppLocker_[video].txt",
        "word_count": 1547,
        "has_content": true
      },
      "section_header": "Start Application Identity Service Automatically",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.9.7_chunk_9",
      "content": "That's it for this demonstration. In this demo, we implemented application block and allow lists with AppLocker.",
      "summary": "In this demonstration, we explored the implementation of application block and allow lists using AppLocker, a key security feature in Windows environments. This approach helps organizations control which applications can run on their systems, enhancing security by preventing unauthorized software execution. Understanding and applying these concepts is crucial for effective application whitelisting and overall cybersecurity management.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.9.7",
        "title": "Implementing Application Allowed Lists with AppLocker",
        "content_type": "video",
        "filename": "8.9.7_Implementing_Application_Allowed_Lists_with_AppLocker_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.9.7_Implementing_Application_Allowed_Lists_with_AppLocker_[video].txt",
        "word_count": 1547,
        "has_content": true
      },
      "section_header": "Summary",
      "timestamp_range": ""
    }
  ],
  "num_chunks": 9
}