{
  "metadata": {
    "chapter_num": "8",
    "section_num": "8.7.1",
    "title": "Secure Protocols",
    "content_type": "video",
    "filename": "8.7.1_Secure_Protocols_[video].txt",
    "file_path": "data_raw/08_Network_and_Endpoint_Security/8.7.1_Secure_Protocols_[video].txt",
    "word_count": 1349,
    "has_content": true
  },
  "full_content": "Transcript close interactive script Let's spend a few minutes talking about cryptographic protocols. We're first going to look at Secure Sockets Layer, or SSL. Then we'll discuss its newer version, Transport Layer Security, or TLS. Both SSL and TLS are cryptographic protocols that provide security for TCP/IP communications. Many application protocols use SSL specifically for secure communications. But both can be used to secure HTTP, which is the protocol meant for requesting and transmitting files over the internet. The problem is that HTTP sends data in cleartext, and these transmissions need to be secure. Let's say you want to buy a book online from an e-commerce website. You send them some type of payment information, which is most likely a credit card number. If you use HTTP, your credit card number, name, and address are all broadcast as cleartext over the internet. This information is all an identity thief needs to steal your identity as well as the contents of your bank account. Using SSL or TLS, you can encrypt the HTTP communications so that they're indecipherable to anyone who doesn't have the decryption keys. SSL and TLS can provide encryption for Lightweight Directory Access Protocol, or LDAP, and File Transfer Protocol, or FTP. LDAP is a protocol used to access directories from services which store sensitive authentication information like Active Directory, eDirectory, and OpenLDAP. This information is transmitted over a network in cleartext unless an encryption protocol is applied. Likewise, FTP needs a protocol like SSL or TLS to encrypt FTP communications or your files and authentication is sent in cleartext as well. An SSL or TLS session typically has a server system and a client system. To use SSL or TLS, you encrypt the communications in that session. The server must have a certificate issued by an e-certificate authority. It could be issued by trusted certificate authorities such as Ntrust, or it could be minted by your own in-house certificate authority. Either way, you're encrypting the communications between the client and the server using SSL or TLS. The use of a certificate issued by an e-certificate authority indicates asymmetric encryption and the use of public keys between the client and the server. It's important to understand that TLS is a successor to SSL. It was designed to be more secure, though not backwards compatible with SSL. TLS is an application-independent encryption mechanism. In other words, the application that needs the encryption decides the best way to initiate the TLS handshake process. Also, TLS uses Diffie-Hellman to establish the session key, which the client and server use for the duration of the session. This process of establishing an SSL tunnel is known as the SSL handshake. An SSL or TLS session begins when a client initiates a secure connection with the server. The client sends a special message to the server called a client hello message. The client hello message specifies the highest SSL or TLS protocol version that it supports. It also contains a random number, a list of suggested ciphers, and compression methods. When the server receives the client hello message, it responds with a message called a server hello. The server hello message contains the chosen protocol version, another random number, a selected cipher, and a selected compression method. All these are chosen from the list that was offered initially by the client hello message. The chosen protocol version is the highest common version that both support. For example, if the client supports TLS 1.0 and the server supports TLS 1.2, they settle on TLS 1.0. The server then sends a message to the client called the certificate message. Then the server sends another message to the client called the server hello done message which indicates that the server is done with the negotiation phase. Once the client knows that the server is done, it responds with a client key exchange message. Both the client and server use the random number that they sent each other to compute a common secret, which is called the master secret. At this point, all other data for the connection is derived from the master secret. The client sends a changed cipher spec message that says to the server, Everything that I'm going to be sending you from now on will be encrypted.ï¿½ After that, the client informs the server that it's done by sending it a finished message. The finished message contains some important information like a hash and MAC. The server receives the hash and MAC and attempts to decrypt this finished message and verify it. If it fails to decrypt the message, the handshake is considered to have failed and the connection is ended. But, if it is able to decrypt the message and verify the hash and MAC, the server responds to the client with a change cipher spec message. This says to the client, Everything coming from me will now be encrypted. The server then sends a finished message. Just as the finished message from the client had a hash and MAC, the finished message from the server also contains both. If they pass verification from the server, the SSL or TLS handshake is considered to be complete. Another often overlooked vulnerability is DNS security. DNS is like a phone book for the internet. It takes names that people can remember and converts them to IP addresses that couldn't conceivably be memorized by humans. The problem is that DNS queries and responses are transmitted in cleartext by default. This means that anyone could intercept the information during transmission, including someone with malintent. For example, a hacker could send false information to a DNS server with the knowledge that the server will cache it to make for faster connections in the future. When this happens, the server is considered poisoned. Once poisoned, it may direct traffic to the attacker's website, which can be made to look like the site the user was trying to reach originally. So, the user is unaware that he or she is on a dangerous website and may share sensitive information. To protect against this risk, you may employ a standard of encryption called DNS over TLS, or DoT. DoT encrypts DNS queries through the TLS protocol by adding an encryption layer to TCP. An alternate approach is to implement DNS over HTTPS, or DoH. With this approach, both the queries and the responses are encrypted. DoH adds security by having the traffic flow integrated with HTTP or HTTP/2 traffic instead of through UDP. In this way, the queries and responses are meshed with regular internet traffic flow, making it difficult for an attacker to single out requests and responses. That's it for this lesson. In this lesson, we talked about the roles of SSL and TLS. We broke down how SSL handshakes work and took a closer look at some specifics regarding TLS. We finished with how TLS can help secure your DNS server with DNS over TLS and DNS over HTTPS.",
  "chunks": [
    {
      "chunk_id": "8.7.1_chunk_1",
      "content": "Let's spend a few minutes talking about cryptographic protocols. We're first going to look at Secure Sockets Layer, or SSL. Then we'll discuss its newer version, Transport Layer Security, or TLS.",
      "summary": "The Secure Protocols section of the CompTIA Security+ course covers essential cryptographic protocols, focusing on Secure Sockets Layer (SSL) and its successor, Transport Layer Security (TLS). These protocols are crucial for securing data transmission over networks, ensuring confidentiality and integrity. Understanding SSL and TLS is vital for implementing secure communications in various applications, such as web browsing and email.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.7.1",
        "title": "Secure Protocols",
        "content_type": "video",
        "filename": "8.7.1_Secure_Protocols_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.7.1_Secure_Protocols_[video].txt",
        "word_count": 1349,
        "has_content": true
      },
      "section_header": "Secure Protocols",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.7.1_chunk_2",
      "content": "Both SSL and TLS are cryptographic protocols that provide security for TCP/IP communications. Many application protocols use SSL specifically for secure communications. But both can be used to secure HTTP, which is the protocol meant for requesting and transmitting files over the internet. The problem is that HTTP sends data in cleartext, and these transmissions need to be secure. Let's say you want to buy a book online from an e-commerce website. You send them some type of payment information, which is most likely a credit card number. If you use HTTP, your credit card number, name, and address are all broadcast as cleartext over the internet. This information is all an identity thief needs to steal your identity as well as the contents of your bank account. Using SSL or TLS, you can encrypt the HTTP communications so that they're indecipherable to anyone who doesn't have the decryption keys.",
      "summary": "SSL and TLS are cryptographic protocols that secure TCP/IP communications, particularly for the HTTP protocol used in web transactions. By encrypting data, these protocols protect sensitive information, such as credit card numbers and personal details, from being transmitted in cleartext and intercepted by identity thieves. Implementing HTTPS ensures that online communications remain confidential and secure.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.7.1",
        "title": "Secure Protocols",
        "content_type": "video",
        "filename": "8.7.1_Secure_Protocols_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.7.1_Secure_Protocols_[video].txt",
        "word_count": 1349,
        "has_content": true
      },
      "section_header": "Secure HTTPS",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.7.1_chunk_3",
      "content": "SSL and TLS can provide encryption for Lightweight Directory Access Protocol, or LDAP, and File Transfer Protocol, or FTP. LDAP is a protocol used to access directories from services which store sensitive authentication information like Active Directory, eDirectory, and OpenLDAP. This information is transmitted over a network in cleartext unless an encryption protocol is applied. Likewise, FTP needs a protocol like SSL or TLS to encrypt FTP communications or your files and authentication is sent in cleartext as well. An SSL or TLS session typically has a server system and a client system.",
      "summary": "Secure LDAP utilizes SSL and TLS to encrypt communications for the Lightweight Directory Access Protocol, safeguarding sensitive authentication information stored in directories like Active Directory and OpenLDAP. Without these encryption protocols, data transmitted over LDAP and File Transfer Protocol (FTP) is vulnerable as it is sent in cleartext. Implementing SSL or TLS ensures secure interactions between server and client systems, protecting both files and authentication details.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.7.1",
        "title": "Secure Protocols",
        "content_type": "video",
        "filename": "8.7.1_Secure_Protocols_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.7.1_Secure_Protocols_[video].txt",
        "word_count": 1349,
        "has_content": true
      },
      "section_header": "Secure LDAP",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.7.1_chunk_4",
      "content": "To use SSL or TLS, you encrypt the communications in that session. The server must have a certificate issued by an e-certificate authority. It could be issued by trusted certificate authorities such as Ntrust, or it could be minted by your own in-house certificate authority. Either way, you're encrypting the communications between the client and the server using SSL or TLS. The use of a certificate issued by an e-certificate authority indicates asymmetric encryption and the use of public keys between the client and the server.",
      "summary": "In the context of SSL and TLS, secure communications require a server certificate issued by a trusted certificate authority or an in-house authority. This certificate facilitates asymmetric encryption, utilizing public keys to encrypt data exchanged between the client and server. Understanding the role of certificates is crucial for implementing secure communication protocols in cybersecurity.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.7.1",
        "title": "Secure Protocols",
        "content_type": "video",
        "filename": "8.7.1_Secure_Protocols_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.7.1_Secure_Protocols_[video].txt",
        "word_count": 1349,
        "has_content": true
      },
      "section_header": "Certificates",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.7.1_chunk_5",
      "content": "It's important to understand that TLS is a successor to SSL. It was designed to be more secure, though not backwards compatible with SSL. TLS is an application-independent encryption mechanism. In other words, the application that needs the encryption decides the best way to initiate the TLS handshake process. Also, TLS uses Diffie-Hellman to establish the session key, which the client and server use for the duration of the session. This process of establishing an SSL tunnel is known as the SSL handshake.",
      "summary": "TLS, the successor to SSL, offers enhanced security features but lacks backward compatibility with SSL. It serves as an application-independent encryption mechanism, allowing applications to determine the optimal method for initiating the TLS handshake process. The session key, established using Diffie-Hellman during the handshake, is utilized by both client and server for secure communication throughout the session.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.7.1",
        "title": "Secure Protocols",
        "content_type": "video",
        "filename": "8.7.1_Secure_Protocols_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.7.1_Secure_Protocols_[video].txt",
        "word_count": 1349,
        "has_content": true
      },
      "section_header": "SSL and TLS Versions",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.7.1_chunk_6",
      "content": "An SSL or TLS session begins when a client initiates a secure connection with the server. The client sends a special message to the server called a client hello message. The client hello message specifies the highest SSL or TLS protocol version that it supports. It also contains a random number, a list of suggested ciphers, and compression methods. When the server receives the client hello message, it responds with a message called a server hello. The server hello message contains the chosen protocol version, another random number, a selected cipher, and a selected compression method. All these are chosen from the list that was offered initially by the client hello message. The chosen protocol version is the highest common version that both support. For example, if the client supports TLS 1.0 and the server supports TLS 1.2, they settle on TLS 1.0. The server then sends a message to the client called the certificate message. Then the server sends another message to the client called the server hello done message which indicates that the server is done with the negotiation phase. Once the client knows that the server is done, it responds with a client key exchange message. Both the client and server use the random number that they sent each other to compute a common secret, which is called the master secret. At this point, all other data for the connection is derived from the master secret. The client sends a changed cipher spec message that says to the server, Everything that I'm going to be sending you from now on will be encrypted.ï¿½ After that, the client informs the server that it's done by sending it a finished message. The finished message contains some important information like a hash and MAC. The server receives the hash and MAC and attempts to decrypt this finished message and verify it. If it fails to decrypt the message, the handshake is considered to have failed and the connection is ended. But, if it is able to decrypt the message and verify the hash and MAC, the server responds to the client with a change cipher spec message. This says to the client, Everything coming from me will now be encrypted. The server then sends a finished message. Just as the finished message from the client had a hash and MAC, the finished message from the server also contains both. If they pass verification from the server, the SSL or TLS handshake is considered to be complete.",
      "summary": "The SSL/TLS session initiation involves a handshake process where the client and server exchange messages to establish a secure connection, beginning with the client hello and server hello messages that negotiate the protocol version and cipher methods. Following this, both parties generate a master secret from exchanged random numbers, which is then used to encrypt subsequent communications. The handshake concludes with both the client and server confirming the encryption setup through finished messages, ensuring that all data transmitted thereafter is secure.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.7.1",
        "title": "Secure Protocols",
        "content_type": "video",
        "filename": "8.7.1_Secure_Protocols_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.7.1_Secure_Protocols_[video].txt",
        "word_count": 1349,
        "has_content": true
      },
      "section_header": "SSL/TLS",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.7.1_chunk_7",
      "content": "Another often overlooked vulnerability is DNS security. DNS is like a phone book for the internet. It takes names that people can remember and converts them to IP addresses that couldn't conceivably be memorized by humans. The problem is that DNS queries and responses are transmitted in cleartext by default. This means that anyone could intercept the information during transmission, including someone with malintent. For example, a hacker could send false information to a DNS server with the knowledge that the server will cache it to make for faster connections in the future. When this happens, the server is considered poisoned. Once poisoned, it may direct traffic to the attacker's website, which can be made to look like the site the user was trying to reach originally. So, the user is unaware that he or she is on a dangerous website and may share sensitive information.",
      "summary": "DNS security is crucial as it protects the integrity of domain name resolution, which translates user-friendly names into IP addresses. By default, DNS queries are transmitted in cleartext, making them vulnerable to interception and manipulation, such as DNS poisoning, where attackers can redirect users to malicious websites. Understanding these vulnerabilities is essential for implementing effective security measures to safeguard users from potential threats.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.7.1",
        "title": "Secure Protocols",
        "content_type": "video",
        "filename": "8.7.1_Secure_Protocols_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.7.1_Secure_Protocols_[video].txt",
        "word_count": 1349,
        "has_content": true
      },
      "section_header": "DNS Security",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.7.1_chunk_8",
      "content": "To protect against this risk, you may employ a standard of encryption called DNS over TLS, or DoT. DoT encrypts DNS queries through the TLS protocol by adding an encryption layer to TCP. An alternate approach is to implement DNS over HTTPS, or DoH. With this approach, both the queries and the responses are encrypted. DoH adds security by having the traffic flow integrated with HTTP or HTTP/2 traffic instead of through UDP. In this way, the queries and responses are meshed with regular internet traffic flow, making it difficult for an attacker to single out requests and responses.",
      "summary": "DNS Protection involves using encryption standards like DNS over TLS (DoT) and DNS over HTTPS (DoH) to secure DNS queries. DoT adds an encryption layer to TCP, while DoH integrates encrypted DNS traffic with regular HTTP/HTTP/2 traffic, enhancing security by obscuring DNS requests from potential attackers. These methods significantly reduce the risk of DNS-related vulnerabilities by ensuring the confidentiality and integrity of DNS communications.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.7.1",
        "title": "Secure Protocols",
        "content_type": "video",
        "filename": "8.7.1_Secure_Protocols_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.7.1_Secure_Protocols_[video].txt",
        "word_count": 1349,
        "has_content": true
      },
      "section_header": "DNS Protection",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.7.1_chunk_9",
      "content": "That's it for this lesson. In this lesson, we talked about the roles of SSL and TLS. We broke down how SSL handshakes work and took a closer look at some specifics regarding TLS. We finished with how TLS can help secure your DNS server with DNS over TLS and DNS over HTTPS.",
      "summary": "This lesson covers the roles of SSL (Secure Sockets Layer) and TLS (Transport Layer Security) in securing communications over networks. It explains the SSL handshake process and delves into the specifics of TLS, highlighting its application in enhancing DNS security through DNS over TLS and DNS over HTTPS. Understanding these protocols is essential for implementing secure data transmission and protecting sensitive information online.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.7.1",
        "title": "Secure Protocols",
        "content_type": "video",
        "filename": "8.7.1_Secure_Protocols_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.7.1_Secure_Protocols_[video].txt",
        "word_count": 1349,
        "has_content": true
      },
      "section_header": "Summary",
      "timestamp_range": ""
    }
  ],
  "num_chunks": 9
}