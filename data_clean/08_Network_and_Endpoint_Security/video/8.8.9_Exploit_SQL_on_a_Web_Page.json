{
  "metadata": {
    "chapter_num": "8",
    "section_num": "8.8.9",
    "title": "Exploit SQL on a Web Page",
    "content_type": "video",
    "filename": "8.8.9_Exploit_SQL_on_a_Web_Page_[video].txt",
    "file_path": "data_raw/08_Network_and_Endpoint_Security/8.8.9_Exploit_SQL_on_a_Web_Page_[video].txt",
    "word_count": 823,
    "has_content": true
  },
  "full_content": "Transcript close interactive script The internet used to be pretty simple and straightforward. There was no JavaScript, Flash, CSS, backend databases, or, really, any complex web design technologies. That's all changed, and it's changing more rapidly than ever. These days, most websites are dynamic and database-driven. Site content is dependent on user input most of the time, and that data is written to a database, typically an SQL database. Like every other piece of computing technology that's invented to solve a problem, hackers have figured out how to attack these databases. The term for attacking an SQL database is an SQL injection. It's a very common way to attack databases. The Open Web Application Security Project, OWASP, almost always includes weak SQL databases in their list of the top ten most widely exploited vulnerabilities. In this demo, we're going to cover a few SQL injections on a vulnerable web page. This isn't a demo on SQL in general. We're just taking a quick look at some things to be aware of as a penetration tester or ethical hacker. I'm on a Windows 10 system. I've already done a few things to it. First, I've downloaded and installed XAMPP, which is a package that contains Apache, Maria Data Base, PHP, and Perl. I've also downloaded and configured the Darn Vulnerable Web Application, DVWA, which is a vulnerable PHP and MySQL web application designed for security professionals to practice their penetration testing and ethical hacking skills. First, we want to do a few simple injections. Let's start out by typing in a number, number 1. Click Submit. Now let's type in 2 and click Submit. All this does is give you the user ID, first name, and surname. That's not very useful, but it does show that it's not designed very well. We want to get more than that, so let's expand on our SQL injection. We're going to enter code to pull up records for a specific user. By crafting our input, we can get more from the output than the code author intended. So, let's enter in the number 1, which is the user ID, with a single quote followed by a true statement. Our true statement can be anything that's true, such as 1 is equal to 1. It will look like this: ‘1' and 1=1#'. Click Submit. We see the first name and the surname for that user. Now let's go a little further. Let's say we want to find out our database name and username for the database. For that, I'll do a select statement by entering in ‘1' and 1=1 union select database(), user()#'and press Enter. Now, down here, I get the name of my database, which is dvwa, and the username is root@localhost. I want to see if I can get a list of tables from our database. For that, I'll do another select statement and enter in ‘1' and 1= union select null, table_name from information_schema.tables#' and press Submit. Okay. I just got a long list of tables here. I'm looking for something that might have a list of usernames and passwords in it. Right here, I see a table called users, so I wonder if that might be the list of users along with their passwords? There's one way to find out: let's see if we can pull information from that table. To pull the information out of the Users table, I'll enter in the following select statement: ‘1' and 1= union select user password from users#' and click Submit. Here, you can see a nice list of the usernames along with the password hashes for each one. Now we can use a cracking program to attempt to crack any of these hashes. And that's it for this demo. In this demo, we used a vulnerable website to practice some SQL injections. First, we found a list of users. Then we expanded to find the name of the database and the username. We ended by finding a list of tables, specifically the user table, and then retrieved the usernames and password hashes from that table.",
  "chunks": [
    {
      "chunk_id": "8.8.9_chunk_1",
      "content": "The internet used to be pretty simple and straightforward. There was no JavaScript, Flash, CSS, backend databases, or, really, any complex web design technologies. That's all changed, and it's changing more rapidly than ever. These days, most websites are dynamic and database-driven. Site content is dependent on user input most of the time, and that data is written to a database, typically an SQL database. Like every other piece of computing technology that's invented to solve a problem, hackers have figured out how to attack these databases. The term for attacking an SQL database is an SQL injection. It's a very common way to attack databases. The Open Web Application Security Project, OWASP, almost always includes weak SQL databases in their list of the top ten most widely exploited vulnerabilities. In this demo, we're going to cover a few SQL injections on a vulnerable web page. This isn't a demo on SQL in general. We're just taking a quick look at some things to be aware of as a penetration tester or ethical hacker.",
      "summary": "The course section on exploiting SQL on a web page highlights the evolution of web technologies and the increasing complexity of dynamic, database-driven websites. It focuses on SQL injection attacks, a prevalent method used by hackers to exploit vulnerabilities in SQL databases, which are frequently listed among the top security risks by OWASP. The practical demonstration aims to equip penetration testers and ethical hackers with awareness and skills to identify and mitigate these vulnerabilities.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.8.9",
        "title": "Exploit SQL on a Web Page",
        "content_type": "video",
        "filename": "8.8.9_Exploit_SQL_on_a_Web_Page_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.8.9_Exploit_SQL_on_a_Web_Page_[video].txt",
        "word_count": 823,
        "has_content": true
      },
      "section_header": "Exploit SQL on a Web Page",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.8.9_chunk_2",
      "content": "I'm on a Windows 10 system. I've already done a few things to it. First, I've downloaded and installed XAMPP, which is a package that contains Apache, Maria Data Base, PHP, and Perl. I've also downloaded and configured the Darn Vulnerable Web Application, DVWA, which is a vulnerable PHP and MySQL web application designed for security professionals to practice their penetration testing and ethical hacking skills.",
      "summary": "In this section, the setup involves a Windows 10 system equipped with XAMPP, a software package that includes Apache, MariaDB, PHP, and Perl, facilitating a local web server environment. Additionally, the Darn Vulnerable Web Application (DVWA) has been installed and configured, providing a platform for security professionals to practice penetration testing and ethical hacking skills on a deliberately vulnerable web application. This setup is essential for hands-on learning in cybersecurity.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.8.9",
        "title": "Exploit SQL on a Web Page",
        "content_type": "video",
        "filename": "8.8.9_Exploit_SQL_on_a_Web_Page_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.8.9_Exploit_SQL_on_a_Web_Page_[video].txt",
        "word_count": 823,
        "has_content": true
      },
      "section_header": "Our Setup",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.8.9_chunk_3",
      "content": "First, we want to do a few simple injections. Let's start out by typing in a number, number 1. Click Submit. Now let's type in 2 and click Submit. All this does is give you the user ID, first name, and surname. That's not very useful, but it does show that it's not designed very well. We want to get more than that, so let's expand on our SQL injection. We're going to enter code to pull up records for a specific user. By crafting our input, we can get more from the output than the code author intended. So, let's enter in the number 1, which is the user ID, with a single quote followed by a true statement. Our true statement can be anything that's true, such as 1 is equal to 1. It will look like this: ‘1' and 1=1#'. Click Submit. We see the first name and the surname for that user.",
      "summary": "This section of the CompTIA Security+ course focuses on SQL injection techniques, demonstrating how to exploit poorly designed databases to retrieve sensitive user information. By manipulating input, such as inserting a true statement into a query, attackers can bypass security measures and access data beyond what was intended by the application. The practical application of these techniques highlights the importance of secure coding practices to prevent unauthorized data access.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.8.9",
        "title": "Exploit SQL on a Web Page",
        "content_type": "video",
        "filename": "8.8.9_Exploit_SQL_on_a_Web_Page_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.8.9_Exploit_SQL_on_a_Web_Page_[video].txt",
        "word_count": 823,
        "has_content": true
      },
      "section_header": "Find Username Accounts with SQL Injection",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.8.9_chunk_4",
      "content": "Now let's go a little further. Let's say we want to find out our database name and username for the database. For that, I'll do a select statement by entering in ‘1' and 1=1 union select database(), user()#'and press Enter. Now, down here, I get the name of my database, which is dvwa, and the username is root@localhost.",
      "summary": "In this section, learners explore SQL injection techniques by executing a select statement to retrieve database information. By using the command '1' and 1=1 union select database(), user()#', users can identify the database name and username, demonstrating a practical application of database security vulnerabilities. This exercise highlights the importance of securing databases against unauthorized access through SQL injection attacks.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.8.9",
        "title": "Exploit SQL on a Web Page",
        "content_type": "video",
        "filename": "8.8.9_Exploit_SQL_on_a_Web_Page_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.8.9_Exploit_SQL_on_a_Web_Page_[video].txt",
        "word_count": 823,
        "has_content": true
      },
      "section_header": "Find the Database Name and Username",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.8.9_chunk_5",
      "content": "I want to see if I can get a list of tables from our database. For that, I'll do another select statement and enter in ‘1' and 1= union select null, table_name from information_schema.tables#' and press Submit. Okay. I just got a long list of tables here. I'm looking for something that might have a list of usernames and passwords in it. Right here, I see a table called users, so I wonder if that might be the list of users along with their passwords? There's one way to find out: let's see if we can pull information from that table.",
      "summary": "In this section, the focus is on querying a database to retrieve a list of tables, specifically looking for sensitive information such as usernames and passwords. By using a SQL injection technique, the user executes a select statement to access the 'information_schema.tables' and identifies a 'users' table that may contain critical data. This highlights the importance of database security and the potential vulnerabilities that can be exploited through improper input validation.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.8.9",
        "title": "Exploit SQL on a Web Page",
        "content_type": "video",
        "filename": "8.8.9_Exploit_SQL_on_a_Web_Page_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.8.9_Exploit_SQL_on_a_Web_Page_[video].txt",
        "word_count": 823,
        "has_content": true
      },
      "section_header": "Find a List of Tables",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.8.9_chunk_6",
      "content": "To pull the information out of the Users table, I'll enter in the following select statement: ‘1' and 1= union select user password from users#' and click Submit. Here, you can see a nice list of the usernames along with the password hashes for each one. Now we can use a cracking program to attempt to crack any of these hashes.",
      "summary": "This section demonstrates a SQL injection technique to extract usernames and password hashes from a database table. By manipulating a select statement, the attacker gains unauthorized access to sensitive user information, which can then be targeted for password cracking. This highlights the importance of securing databases against injection vulnerabilities to protect user credentials.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.8.9",
        "title": "Exploit SQL on a Web Page",
        "content_type": "video",
        "filename": "8.8.9_Exploit_SQL_on_a_Web_Page_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.8.9_Exploit_SQL_on_a_Web_Page_[video].txt",
        "word_count": 823,
        "has_content": true
      },
      "section_header": "Find Usernames and Passwords from a Table",
      "timestamp_range": ""
    },
    {
      "chunk_id": "8.8.9_chunk_7",
      "content": "And that's it for this demo. In this demo, we used a vulnerable website to practice some SQL injections. First, we found a list of users. Then we expanded to find the name of the database and the username. We ended by finding a list of tables, specifically the user table, and then retrieved the usernames and password hashes from that table.",
      "summary": "In this CompTIA Security+ demo, participants practiced SQL injection techniques on a vulnerable website, successfully extracting sensitive information such as a list of users, database names, and table structures. The exercise highlighted key security concepts related to database vulnerabilities and the importance of securing web applications against such attacks. Practical applications included understanding how attackers exploit SQL injection to access confidential data and the need for robust security measures to prevent these exploits.",
      "metadata": {
        "chapter_num": "8",
        "section_num": "8.8.9",
        "title": "Exploit SQL on a Web Page",
        "content_type": "video",
        "filename": "8.8.9_Exploit_SQL_on_a_Web_Page_[video].txt",
        "file_path": "data_raw/08_Network_and_Endpoint_Security/8.8.9_Exploit_SQL_on_a_Web_Page_[video].txt",
        "word_count": 823,
        "has_content": true
      },
      "section_header": "Summary",
      "timestamp_range": ""
    }
  ],
  "num_chunks": 7
}