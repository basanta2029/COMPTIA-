{
  "metadata": {
    "chapter_num": "4",
    "section_num": "4.6.3",
    "title": "Linux User Commands and Files",
    "content_type": "text",
    "filename": "4.6.3_Linux_User_Commands_and_Files_[text].txt",
    "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.6.3_Linux_User_Commands_and_Files_[text].txt",
    "word_count": 924,
    "has_content": true
  },
  "full_content": "Security Pro 8.0 This lesson covers the following topics: User files User management commands User Files Linux is highly flexible regarding where user and group information is stored. The options for storing the data are: Local file system. LDAP-compliant database. Network Information System (NIS). NIS allows many Linux computers to share common user accounts, group accounts, and passwords. A Windows domain. File Description /etc/passwd The /etc/passwd file contains the user account information. Each user's data is stored in a single line on this file. There are two types of accounts in a Linux system: Standard accounts (these are user accounts). System user accounts (these are used by services). /etc/shadow In Linux, local user account names are stored in /etc/passwd. When a user logs in to a local interactive shell, the password is checked against a hash stored in /etc/shadow. There are corresponding entries in both files, and they must stay synchronized. The system provides password and user management utilities, allowing you to edit and keep the files synchronized. You can use the following commands to identify errors and synchronize the files: pwck verifies each line in the two files and identifies discrepancies. pwconv adds the necessary information to synchronize the files. Interactive login over a network is typically accomplished using Secure Shell (SSH). With SSH, the user can be authenticated using cryptographic keys instead of a password. A pluggable authentication module (PAM) is a package for enabling different authentication providers, such as smart-card log-in. The PAM framework can also be used to implement authentication to network directory services. /etc/group\tAs with Active Directory, groups can be used to simplify user access to network resources. The /etc/group file contains information about each group. File Description /etc/default/useradd The /etc/default/useradd file contains default values used by the useradd utility when creating a user account, including: Group ID. Home directory. Account expiration. Default shell. Secondary group membership. /etc/login.defs Values used for the group and user ID numbers. Parameters for password encryption in the shadow file. Password expiration values for user accounts. /etc/skel The /etc/skel directory contains a set of configuration file templates that are copied into a new user's home directory when it is created, including the following files: .bashrc .bash_logout .bash_profile .kshrc User Management Commands Although it is possible to edit the /etc/passwd and /etc/shadow files manually to manage user accounts, doing so can disable your system. Instead, use the following commands to manage user accounts: Command Command Function useradd Create a user account. The following options override the settings as found in /etc/default/useradd: -c adds a description for the account in the GECOS field of /etc/passwd. -d assigns an absolute pathname to a custom home directory location. -D displays the default values specified in the /etc/default/useradd file. -e specifies the date on which the user account will be disabled. -f specifies the number of days after a password expires until the account is permanently disabled. -M defines the secondary group membership. -m creates the user's home directory (if it does not exist). -n does not create a group with the same name as the user (Red Hat and Fedora, respectively). -p defines the encrypted password. -r specifies that the user account is a system user. -s defines the default shell. -u assigns the user a custom UID. This is useful when assigning ownership of files and directories to a different user. passwd passwd (without a username or options) changes the current user's password. Users can change their own passwords. The root user can execute all other passwd commands. -S username displays the status of the user account. LK indicates that the user account is locked, and PS indicates the user account has a password. -l disables (locks) an account. This command inserts a !! before the password in the /etc/shadow file, effectively disabling the account. -u enables (unlocks) an account. -d removes the password from an account. -n sets the minimum days before a password can be changed. -x sets the number of days before a user must change the password (password expiration time). -w sets the number of days before the password expires that the user is warned. -t sets the number of days following the password expiration that the account will be disabled. usermod Used to modify an existing user account; usermod uses several of the same switches as useradd. Be aware of the following switches: -c changes the description for the account. -l renames a user account. -L locks the user account. This command inserts a ! before the password in the /etc/shadow file, effectively disabling the account. -U unlocks the user account. userdel userdel [username] (without options) removes the user account. -r removes the user's home directory. -f forces removing the user account even when the user is logged into the system. If you are logged in as the root user, the commands in the table can be run by typing the applicable command and its options. However, if you are not logged in as the root user, you must use the sudo or su command to gain the permissions required. For example, to create a new user named Kim Sanders, you would run: sudo useradd -c \"Kim Sanders\" -m ksanders",
  "chunks": [
    {
      "chunk_id": "4.6.3_chunk_1",
      "content": "Security Pro 8.0",
      "summary": "Security Pro 8.0 covers essential Linux user commands and file management techniques critical for cybersecurity professionals, including command-line operations for system administration, file permissions, and access controls. This foundational knowledge enables security practitioners to effectively navigate Linux environments, manage user accounts, and implement proper file-level security controls. The content provides hands-on command syntax and practical applications for securing Linux systems within enterprise security frameworks.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.6.3",
        "title": "Linux User Commands and Files",
        "content_type": "text",
        "filename": "4.6.3_Linux_User_Commands_and_Files_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.6.3_Linux_User_Commands_and_Files_[text].txt",
        "word_count": 924,
        "has_content": true
      },
      "section_header": "Introduction",
      "timestamp_range": null
    },
    {
      "chunk_id": "4.6.3_chunk_2",
      "content": "This lesson covers the following topics: User files User management commands User Files Linux is highly flexible regarding where user and group information is stored. The options for storing the data are: Local file system. LDAP-compliant database. Network Information System (NIS). NIS allows many Linux computers to share common user accounts, group accounts, and passwords. A Windows domain.",
      "summary": "Linux systems store user and group authentication data in multiple locations including local file systems, LDAP-compliant databases, Network Information System (NIS), or Windows domains, with NIS enabling shared user accounts and passwords across multiple Linux computers. This flexible user management architecture requires security professionals to understand various authentication storage methods and their associated access control implications for identity and access management in Linux environments.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.6.3",
        "title": "Linux User Commands and Files",
        "content_type": "text",
        "filename": "4.6.3_Linux_User_Commands_and_Files_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.6.3_Linux_User_Commands_and_Files_[text].txt",
        "word_count": 924,
        "has_content": true
      },
      "section_header": "4.6.3 Linux User Commands and Files",
      "timestamp_range": null
    },
    {
      "chunk_id": "4.6.3_chunk_3",
      "content": "File Description /etc/passwd The /etc/passwd file contains the user account information. Each user's data is stored in a single line on this file. There are two types of accounts in a Linux system: Standard accounts (these are user accounts). System user accounts (these are used by services). /etc/shadow In Linux, local user account names are stored in /etc/passwd. When a user logs in to a local interactive shell, the password is checked against a hash stored in /etc/shadow. There are corresponding entries in both files, and they must stay synchronized. The system provides password and user management utilities, allowing you to edit and keep the files synchronized. You can use the following commands to identify errors and synchronize the files: pwck verifies each line in the two files and identifies discrepancies. pwconv adds the necessary information to synchronize the files. Interactive login over a network is typically accomplished using Secure Shell (SSH). With SSH, the user can be authenticated using cryptographic keys instead of a password. A pluggable authentication module (PAM) is a package for enabling different authentication providers, such as smart-card log-in. The PAM framework can also be used to implement authentication to network directory services. /etc/group\tAs with Active Directory, groups can be used to simplify user access to network resources. The /etc/group file contains information about each group.",
      "summary": "Linux systems store user account information in /etc/passwd and password hashes in /etc/shadow, which must remain synchronized using commands like pwck and pwconv to prevent authentication vulnerabilities. SSH enables secure network authentication using cryptographic keys instead of passwords, while Pluggable Authentication Modules (PAM) provide flexible authentication methods including smart cards and network directory services. Group permissions are managed through /etc/group to control user access to network resources.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.6.3",
        "title": "Linux User Commands and Files",
        "content_type": "text",
        "filename": "4.6.3_Linux_User_Commands_and_Files_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.6.3_Linux_User_Commands_and_Files_[text].txt",
        "word_count": 924,
        "has_content": true
      },
      "section_header": "When files are stored in the local file system, the following files are used:",
      "timestamp_range": null
    },
    {
      "chunk_id": "4.6.3_chunk_4",
      "content": "File Description /etc/default/useradd The /etc/default/useradd file contains default values used by the useradd utility when creating a user account, including: Group ID. Home directory. Account expiration. Default shell. Secondary group membership. /etc/login.defs",
      "summary": "The /etc/default/useradd configuration file contains critical default security parameters for Linux user account creation, including group ID assignments, home directory paths, account expiration settings, default shell specifications, and secondary group memberships that system administrators must properly configure to maintain secure user provisioning. This file serves as the primary template that the useradd utility references when establishing new user accounts, making its proper configuration essential for consistent security policy enforcement across user management operations.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.6.3",
        "title": "Linux User Commands and Files",
        "content_type": "text",
        "filename": "4.6.3_Linux_User_Commands_and_Files_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.6.3_Linux_User_Commands_and_Files_[text].txt",
        "word_count": 924,
        "has_content": true
      },
      "section_header": "Be aware of the following configuration files when managing user accounts:",
      "timestamp_range": null
    },
    {
      "chunk_id": "4.6.3_chunk_5",
      "content": "Values used for the group and user ID numbers. Parameters for password encryption in the shadow file. Password expiration values for user accounts. /etc/skel The /etc/skel directory contains a set of configuration file templates that are copied into a new user's home directory when it is created, including the following files: .bashrc .bash_logout .bash_profile .kshrc User Management Commands Although it is possible to edit the /etc/passwd and /etc/shadow files manually to manage user accounts, doing so can disable your system. Instead, use the following commands to manage user accounts: Command Command Function useradd Create a user account. The following options override the settings as found in /etc/default/useradd: -c adds a description for the account in the GECOS field of /etc/passwd. -d assigns an absolute pathname to a custom home directory location. -D displays the default values specified in the /etc/default/useradd file. -e specifies the date on which the user account will be disabled. -f specifies the number of days after a password expires until the account is permanently disabled. -M defines the secondary group membership. -m creates the user's home directory (if it does not exist). -n does not create a group with the same name as the user (Red Hat and Fedora, respectively). -p defines the encrypted password. -r specifies that the user account is a system user. -s defines the default shell. -u assigns the user a custom UID. This is useful when assigning ownership of files and directories to a different user. passwd",
      "summary": "The /etc/login.defs file configures critical security parameters including user/group ID ranges, password encryption settings for shadow files, and password expiration policies. The /etc/skel directory provides secure default configuration templates copied to new user home directories. User account management should utilize dedicated commands like useradd with security-focused options rather than manually editing system files to prevent system compromise.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.6.3",
        "title": "Linux User Commands and Files",
        "content_type": "text",
        "filename": "4.6.3_Linux_User_Commands_and_Files_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.6.3_Linux_User_Commands_and_Files_[text].txt",
        "word_count": 924,
        "has_content": true
      },
      "section_header": "The /etc/login.defs file contains:",
      "timestamp_range": null
    },
    {
      "chunk_id": "4.6.3_chunk_6",
      "content": "passwd (without a username or options) changes the current user's password. Users can change their own passwords. The root user can execute all other passwd commands.",
      "summary": "The passwd command allows users to change their own passwords when executed without parameters, while the root user has administrative privileges to execute all passwd command variations for any user account. This Linux password management utility is essential for maintaining user authentication security, as regular password changes help prevent unauthorized access. Root-level passwd access enables centralized password administration and account management across the system.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.6.3",
        "title": "Linux User Commands and Files",
        "content_type": "text",
        "filename": "4.6.3_Linux_User_Commands_and_Files_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.6.3_Linux_User_Commands_and_Files_[text].txt",
        "word_count": 924,
        "has_content": true
      },
      "section_header": "Assign or change a password for a user:",
      "timestamp_range": null
    },
    {
      "chunk_id": "4.6.3_chunk_7",
      "content": "-S username displays the status of the user account. LK indicates that the user account is locked, and PS indicates the user account has a password. -l disables (locks) an account. This command inserts a !! before the password in the /etc/shadow file, effectively disabling the account. -u enables (unlocks) an account. -d removes the password from an account. -n sets the minimum days before a password can be changed. -x sets the number of days before a user must change the password (password expiration time). -w sets the number of days before the password expires that the user is warned. -t sets the number of days following the password expiration that the account will be disabled. usermod Used to modify an existing user account; usermod uses several of the same switches as useradd. Be aware of the following switches: -c changes the description for the account. -l renames a user account. -L locks the user account. This command inserts a ! before the password in the /etc/shadow file, effectively disabling the account. -U unlocks the user account. userdel",
      "summary": "Linux user account management commands provide critical security controls through passwd and usermod utilities. The passwd command enables administrators to lock/unlock accounts (-l/-u), set password policies including expiration times (-x), minimum change intervals (-n), and warning periods (-w), while usermod allows account modification including locking (-L/-U) and renaming (-l) existing user accounts. Both commands secure accounts by inserting special characters (! or !!) before passwords in /etc/shadow to disable authentication.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.6.3",
        "title": "Linux User Commands and Files",
        "content_type": "text",
        "filename": "4.6.3_Linux_User_Commands_and_Files_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.6.3_Linux_User_Commands_and_Files_[text].txt",
        "word_count": 924,
        "has_content": true
      },
      "section_header": "Be aware of the following options:",
      "timestamp_range": null
    },
    {
      "chunk_id": "4.6.3_chunk_8",
      "content": "userdel [username] (without options) removes the user account. -r removes the user's home directory. -f forces removing the user account even when the user is logged into the system. If you are logged in as the root user, the commands in the table can be run by typing the applicable command and its options. However, if you are not logged in as the root user, you must use the sudo or su command to gain the permissions required. For example, to create a new user named Kim Sanders, you would run: sudo useradd -c \"Kim Sanders\" -m ksanders",
      "summary": "The userdel command removes Linux user accounts with options including -r to delete the user's home directory and -f to force removal even when the user is logged in. Administrative commands like userdel and useradd require root privileges or must be executed with sudo/su to elevate permissions for proper user account management. Proper user removal is critical for maintaining system security by eliminating unauthorized access points when employees leave or accounts are compromised.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.6.3",
        "title": "Linux User Commands and Files",
        "content_type": "text",
        "filename": "4.6.3_Linux_User_Commands_and_Files_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.6.3_Linux_User_Commands_and_Files_[text].txt",
        "word_count": 924,
        "has_content": true
      },
      "section_header": "Remove the user from the system. Be aware of the following options:",
      "timestamp_range": null
    }
  ],
  "num_chunks": 8,
  "document_summary": "Linux User Commands and Files (text): 0 This lesson covers the following topics: User files User management commands User Files Linux is highly flexible regarding where user and group information is stored. The PAM framework can also be used to implement authentication to network directory services. /etc/group\tAs with Active Directory, groups can be used to simplify user access to network resources."
}