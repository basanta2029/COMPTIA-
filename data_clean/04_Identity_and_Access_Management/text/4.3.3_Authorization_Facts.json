{
  "metadata": {
    "chapter_num": "4",
    "section_num": "4.3.3",
    "title": "Authorization Facts",
    "content_type": "text",
    "filename": "4.3.3_Authorization_Facts_[text].txt",
    "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.3.3_Authorization_Facts_[text].txt",
    "word_count": 1573,
    "has_content": true
  },
  "full_content": "Security Pro 8.0 Authorization is the process of determining what rights and privileges a particular entity should have on available resources and then enforcing those rights. Authorization Permissions, privileges, and roles Access control lists (ACLs) Authorization with single sign-on Authorization Examine the access token Learning Outcomes How is authorization different from authentication? How does an access control list (ACL) help to increase network security? What is the difference between a Discretionary access control list (DACL) and a system access control list (SACL)? Key Terms Term Definition Authorization\tGranting a user on the computer system the right to use a resource. Access control list (ACL)\tA collection of access control entries that determines which users are allowed or denied access to an object and the privileges given to that user. Effective permissions\tAccess rights are cumulative, giving the user combined permissions from multiple groups. Deny permissions\tAlways override Allow permissions. Certification Exam Objectives Exam Objective CompTIA Security+ SY0-701 Authentication, Authorization, and Accounting (AAA) Authorization models Obfuscation Tokenization Access control Access control list (ACL) Permissions Permission assignments and implications Single sign-on (SSO) Access controls Discretionary TestOut Security Pro 5.2.1 Access control list (ACL) 4.6.8 Access control Permissions, Privileges, and Roles A crucial part of any security administrator's job is to control access to resources. For example, with file system security, each object in the file system has an access control list (ACL) associated with it. The ACL contains a list of accounts (principals) allowed to access the resource and the permissions they have over it. The order of ACEs in the ACL is essential in determining effective permissions for a given account. ACLs can be enforced by a file system that supports permissions, such as NTFS, ext3/ext4, or ZFS. Types of permissions are described in the table below. Permission Type Description Effective permissions\tAccess rights (permissions) are cumulative. If you are a member of two groups with different permissions, you have the combined permissions of both groups (this is known as effective permissions). Effective permissions are the combination of inherited permissions and explicit permissions. Deny permissions\tDeny permissions always override Allow permissions. For example, if a user belongs to two groups and specific permission is allowed for one group and denied for the other, the permission is denied. However, the exception to this rule comes with inherited permissions. If an object has an explicit Allow permission entry, inherited Deny permissions do not prevent access to the object. Explicit permissions override inherited permissions, including Deny permissions. Cumulative permissions The following suggestions will help you plan permissions and mitigate issues related to cumulative permissions: Identify the users and their access needs (the actions each user needs to be able to perform). Create a group for each type of user with similar needs. Then, make the users members of the appropriate group. Assign each group (not the user) the permissions appropriate to the group's data access needs. Grant only the necessary permissions. Take inheritance into account as you assign permissions. Inheritance means permissions granted to a parent container object flow down to child objects within the container. Set permissions as high as possible on the parent container and allow each child container to inherit the permissions. Override inheritance on a case-by-case basis when necessary. Access Control Lists (ACLs) Access control lists (ACLs) in computer systems and networks are used to enforce access control policies. An ACL is a list of rules or entries that specify which users or groups are allowed or denied access to specific resources or perform certain actions. In networks, ACLs are associated with routers, firewalls, or similar devices and define rules that determine how network traffic is filtered or forwarded based on criteria like source IP addresses, destination IP addresses, ports, or protocols. ACLs can help to control network access and protect against unauthorized or malicious activities. ACLs control access to files, directories, or system resources in operating systems and file systems. Each access control entry (ACE) typically contains a user or group identifier and associated permissions controlling actions that are allowed or denied. These permissions often include read, write, execute, and sometimes more granular limits such as modify, delete, or list. While ACLs offer flexibility and control, managing complex access control policies with numerous ACL entries can become challenging. Complexity increases the risk of misconfigurations. Therefore, proper planning, periodic reviews, and best practice configurations are essential when implementing and maintaining ACLs. For example,  Discretionary access control (DAC) is based on the primacy of the resource owner. In a DAC model, every resource has an owner. The owner creates a file or service, although ownership can be assigned to another user. The owner has full control over the resource, and they can modify its access control list (ACL) to grant rights to others. An access control system ensures that an information system meets the goals of the CIA triad. Access control governs how subjects/principals may interact with objects. Subjects are people, devices, software processes, or any other system that can request and be granted access to a resource. Objects are the resources. An object could be a network, server, database, app, or file. Subjects are assigned rights or permissions on resources. A security principal is an object that can be given permissions to an object. Security principals include user accounts, computer accounts, and security group accounts. Each security principal is given a unique identification number called a Security ID (SID). When a security principal logs on, an access token is generated. The access token controls access to resources and contains the SID for the user or computer, for all groups the user or computer is a member of, and the user rights granted to the security principal. When the security principal tries to access a resource or take action, information in the access token is checked. For example, when a user tries to access a file, the access token is checked for the user's SID and all groups. The SIDs are then compared to those in the object's DACL to identify permissions that apply. On a Microsoft system, the access token is only generated during authentication. Changes to group memberships or user rights do not occur until the user logs on again and a new access token is created. Authorization with Single Sign-on After completing authentication, the client can decrypt the Ticket Granting Service (TGS) session key but not the Ticket Granting Ticket (TGT). This establishes that the client and key distribution center(KDC) know the same shared secret and that the client cannot interfere with the TGT. To access resources within the domain, the principal requests a service ticket (a token that grants access to a target application server). This process of granting service tickets is handled by the TGS. The principal sends the TGS a copy of its TGT and the name of the application server it wishes to access, plus an authenticator consisting of a time-stamped client ID encrypted using the TGS session key. The TGS should be able to decrypt both messages using the KDC's secret key for the first and the TGS session key for the second. This confirms that the request is genuine. It also checks that the ticket has not expired and has not been used before (replay attack). The TGS service responds with the following: A Service session key — is used between the client and the application server. This is encrypted with the TGS session key. A Service ticket — contains information about the principal, such as a time stamp, system IP address, Security Identifier (SID) and the SIDs of groups to which it belongs, and the service session key. This is encrypted using the application server's secret key. The principal forwards the service ticket, which it cannot decrypt, to the application server and adds another time-stamped authenticator, which is encrypted using the service session key. Kerberos Ticket Granting Service Images © 123RF.com Description The application server decrypts the service ticket to obtain the service session key using its secret key, confirming that the principal has sent it an untampered message. It then decrypts the authenticator using the service session key. Optionally, the application server responds to the principal with the time stamp used in the authenticator, which is encrypted using the service session key. The principal decrypts the time stamp, verifies that it matches the value already sent, and concludes that the application server is trustworthy. This means that the server is authenticated to the principal (referred to as mutual authentication). This prevents an on-path attack, where a malicious user could intercept communications between the principal and server. The server now responds to access requests (assuming they conform to the server's access control list). One of the noted drawbacks of Kerberos is that the KDC represents a single point of failure for the network. In practice, backup KDC servers can be implemented (for example, Active Directory supports multiple domain controllers, each of which is running the KDC service).",
  "chunks": [
    {
      "chunk_id": "4.3.3_chunk_1",
      "content": "Security Pro 8.0",
      "summary": "Authorization is the security process that determines what resources, actions, and data an authenticated user is permitted to access within a system or network. It works in conjunction with authentication to enforce access controls through methods like role-based access control (RBAC), attribute-based access control (ABAC), and discretionary access control (DAC). Proper authorization implementation ensures users can only perform actions and access resources necessary for their job functions, following the principle of least privilege.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.3.3",
        "title": "Authorization Facts",
        "content_type": "text",
        "filename": "4.3.3_Authorization_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.3.3_Authorization_Facts_[text].txt",
        "word_count": 1573,
        "has_content": true
      },
      "section_header": "Introduction",
      "timestamp_range": null
    },
    {
      "chunk_id": "4.3.3_chunk_2",
      "content": "Authorization is the process of determining what rights and privileges a particular entity should have on available resources and then enforcing those rights.",
      "summary": "Authorization is the security process that determines and enforces specific rights and privileges an authenticated entity has to access system resources. This access control mechanism ensures users, applications, or devices can only perform actions and access data according to their assigned permissions and security policies.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.3.3",
        "title": "Authorization Facts",
        "content_type": "text",
        "filename": "4.3.3_Authorization_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.3.3_Authorization_Facts_[text].txt",
        "word_count": 1573,
        "has_content": true
      },
      "section_header": "4.3.3 Authorization Facts",
      "timestamp_range": null
    },
    {
      "chunk_id": "4.3.3_chunk_3",
      "content": "Authorization Permissions, privileges, and roles Access control lists (ACLs) Authorization with single sign-on Authorization",
      "summary": "Authorization controls what authenticated users can access and do within a system through permissions, privileges, and role-based assignments managed via Access Control Lists (ACLs). Single sign-on (SSO) authorization enables users to access multiple systems and resources with one authentication, streamlining access management while maintaining security controls. These authorization mechanisms form the foundation of identity and access management by enforcing the principle of least privilege and controlling resource access based on user roles and permissions.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.3.3",
        "title": "Authorization Facts",
        "content_type": "text",
        "filename": "4.3.3_Authorization_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.3.3_Authorization_Facts_[text].txt",
        "word_count": 1573,
        "has_content": true
      },
      "section_header": "This lesson covers the following topics:",
      "timestamp_range": null
    },
    {
      "chunk_id": "4.3.3_chunk_4",
      "content": "Examine the access token Learning Outcomes",
      "summary": "This lesson covers examining access tokens, which are security credentials that contain user identity information, permissions, and group memberships used by operating systems to make authorization decisions. Students will learn how access tokens are created during authentication and how they enable systems to determine what resources a user can access and what actions they can perform. Understanding access token structure and function is essential for implementing proper authorization controls and troubleshooting access-related security issues.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.3.3",
        "title": "Authorization Facts",
        "content_type": "text",
        "filename": "4.3.3_Authorization_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.3.3_Authorization_Facts_[text].txt",
        "word_count": 1573,
        "has_content": true
      },
      "section_header": "In this lesson, you will learn to:",
      "timestamp_range": null
    },
    {
      "chunk_id": "4.3.3_chunk_5",
      "content": "How is authorization different from authentication? How does an access control list (ACL) help to increase network security? What is the difference between a Discretionary access control list (DACL) and a system access control list (SACL)? Key Terms",
      "summary": "Authorization differs from authentication by controlling what authenticated users can access rather than verifying their identity, with Access Control Lists (ACLs) serving as the primary mechanism to enforce these permissions and enhance network security. Discretionary Access Control Lists (DACLs) define user and group permissions for resource access, while System Access Control Lists (SACLs) specify which security events should be audited and logged. These authorization controls form critical layers of defense by ensuring authenticated users only access resources appropriate to their roles and maintaining audit trails for security monitoring.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.3.3",
        "title": "Authorization Facts",
        "content_type": "text",
        "filename": "4.3.3_Authorization_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.3.3_Authorization_Facts_[text].txt",
        "word_count": 1573,
        "has_content": true
      },
      "section_header": "As you study this lesson, answer the following questions:",
      "timestamp_range": null
    },
    {
      "chunk_id": "4.3.3_chunk_6",
      "content": "Term Definition Authorization\tGranting a user on the computer system the right to use a resource. Access control list (ACL)\tA collection of access control entries that determines which users are allowed or denied access to an object and the privileges given to that user. Effective permissions\tAccess rights are cumulative, giving the user combined permissions from multiple groups. Deny permissions\tAlways override Allow permissions. Certification Exam Objectives",
      "summary": "Authorization is the process of granting users specific rights to access system resources, managed through Access Control Lists (ACLs) that define allowed or denied permissions for objects. Users receive effective permissions that combine access rights from multiple group memberships, but deny permissions always take precedence over allow permissions in access control decisions.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.3.3",
        "title": "Authorization Facts",
        "content_type": "text",
        "filename": "4.3.3_Authorization_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.3.3_Authorization_Facts_[text].txt",
        "word_count": 1573,
        "has_content": true
      },
      "section_header": "The key terms for this lesson include:",
      "timestamp_range": null
    },
    {
      "chunk_id": "4.3.3_chunk_7",
      "content": "Exam Objective CompTIA Security+ SY0-701",
      "summary": "Authorization is the process of granting or denying access to specific resources and actions after a user has been authenticated, determining what authenticated users are permitted to do within a system. This security control mechanism enforces access policies through various models including role-based access control (RBAC), attribute-based access control (ABAC), and discretionary access control (DAC) to ensure users can only access resources appropriate to their assigned privileges. Proper authorization implementation prevents privilege escalation attacks and maintains the principle of least privilege by limiting user permissions to the minimum necessary for their job functions.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.3.3",
        "title": "Authorization Facts",
        "content_type": "text",
        "filename": "4.3.3_Authorization_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.3.3_Authorization_Facts_[text].txt",
        "word_count": 1573,
        "has_content": true
      },
      "section_header": "This section helps you prepare for the following certification exam objectives:",
      "timestamp_range": null
    },
    {
      "chunk_id": "4.3.3_chunk_8",
      "content": "Authentication, Authorization, and Accounting (AAA) Authorization models",
      "summary": "Authentication, Authorization, and Accounting (AAA) is a fundamental security framework where authentication verifies user identity, authorization determines what authenticated users can access or perform, and accounting tracks and logs user activities for audit purposes. Authorization models include Role-Based Access Control (RBAC), Attribute-Based Access Control (ABAC), Mandatory Access Control (MAC), and Discretionary Access Control (DAC), each defining different methods for granting or restricting resource access. These AAA components work together to ensure secure access management by controlling who can authenticate, what they can do once authenticated, and maintaining records of all security-related activities.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.3.3",
        "title": "Authorization Facts",
        "content_type": "text",
        "filename": "4.3.3_Authorization_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.3.3_Authorization_Facts_[text].txt",
        "word_count": 1573,
        "has_content": true
      },
      "section_header": "1.2 Summarize fundamental security concepts.",
      "timestamp_range": null
    },
    {
      "chunk_id": "4.3.3_chunk_9",
      "content": "Obfuscation Tokenization",
      "summary": "Obfuscation is a data protection technique that makes information difficult to understand by altering its appearance while preserving functionality, commonly used in code protection and data masking. Tokenization replaces sensitive data elements with non-sensitive substitute values called tokens that maintain referential integrity, enabling secure data processing without exposing original values. Both methods provide data protection by rendering information unusable to unauthorized parties while allowing legitimate systems to continue operations.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.3.3",
        "title": "Authorization Facts",
        "content_type": "text",
        "filename": "4.3.3_Authorization_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.3.3_Authorization_Facts_[text].txt",
        "word_count": 1573,
        "has_content": true
      },
      "section_header": "1.4 Explain the importance of using appropriate cryptographic solutions.",
      "timestamp_range": null
    },
    {
      "chunk_id": "4.3.3_chunk_10",
      "content": "Access control Access control list (ACL) Permissions",
      "summary": "Access control is a security mechanism that regulates who can access specific resources and what actions they can perform on those resources. Access Control Lists (ACLs) are structured tables that define which users or groups have specific permissions to access files, directories, or network resources. Permissions are the specific rights granted to users or processes, such as read, write, execute, or delete, which enforce the principle of least privilege by limiting access to only what is necessary for authorized functions.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.3.3",
        "title": "Authorization Facts",
        "content_type": "text",
        "filename": "4.3.3_Authorization_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.3.3_Authorization_Facts_[text].txt",
        "word_count": 1573,
        "has_content": true
      },
      "section_header": "2.5 Explain the purpose of mitigation techniques used to secure the enterprise.",
      "timestamp_range": null
    },
    {
      "chunk_id": "4.3.3_chunk_11",
      "content": "Permission assignments and implications Single sign-on (SSO) Access controls Discretionary TestOut Security Pro",
      "summary": "Permission assignments define user access rights and their security implications, requiring careful management to prevent privilege escalation and unauthorized access. Single sign-on (SSO) streamlines authentication across multiple systems while introducing centralized security risks that must be mitigated through proper implementation. Access controls, particularly discretionary access control (DAC), allow resource owners to grant permissions but require ongoing monitoring to maintain security boundaries and prevent data exposure.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.3.3",
        "title": "Authorization Facts",
        "content_type": "text",
        "filename": "4.3.3_Authorization_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.3.3_Authorization_Facts_[text].txt",
        "word_count": 1573,
        "has_content": true
      },
      "section_header": "4.6 Given a scenario, implement and maintain identity and access management.",
      "timestamp_range": null
    },
    {
      "chunk_id": "4.3.3_chunk_12",
      "content": "5.2.1 Access control list (ACL)",
      "summary": "Access Control Lists (ACLs) are security mechanisms that define which users, groups, or systems have specific permissions to access resources such as files, directories, or network services. ACLs contain entries that explicitly grant or deny permissions (read, write, execute, modify) to identified subjects, enabling granular control over resource access. They serve as the primary enforcement mechanism for implementing the principle of least privilege by allowing administrators to specify exactly what actions each entity can perform on protected resources.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.3.3",
        "title": "Authorization Facts",
        "content_type": "text",
        "filename": "4.3.3_Authorization_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.3.3_Authorization_Facts_[text].txt",
        "word_count": 1573,
        "has_content": true
      },
      "section_header": "2.5.2 Access control",
      "timestamp_range": null
    },
    {
      "chunk_id": "4.3.3_chunk_13",
      "content": "4.6.8 Access control",
      "summary": "Access control is a security mechanism that regulates who can view, use, or modify resources within a system by enforcing authentication, authorization, and accounting (AAA) principles. It implements security policies through various models including discretionary (DAC), mandatory (MAC), and role-based access control (RBAC) to ensure users receive appropriate permissions based on their identity, role, and business requirements. Effective access control systems maintain the principle of least privilege, granting users only the minimum permissions necessary to perform their job functions while protecting sensitive data and system resources from unauthorized access.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.3.3",
        "title": "Authorization Facts",
        "content_type": "text",
        "filename": "4.3.3_Authorization_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.3.3_Authorization_Facts_[text].txt",
        "word_count": 1573,
        "has_content": true
      },
      "section_header": "5.2.2 Permissions",
      "timestamp_range": null
    },
    {
      "chunk_id": "4.3.3_chunk_14",
      "content": "Permissions, Privileges, and Roles A crucial part of any security administrator's job is to control access to resources. For example, with file system security, each object in the file system has an access control list (ACL) associated with it. The ACL contains a list of accounts (principals) allowed to access the resource and the permissions they have over it. The order of ACEs in the ACL is essential in determining effective permissions for a given account. ACLs can be enforced by a file system that supports permissions, such as NTFS, ext3/ext4, or ZFS. Types of permissions are described in the table below. Permission Type Description Effective permissions\tAccess rights (permissions) are cumulative. If you are a member of two groups with different permissions, you have the combined permissions of both groups (this is known as effective permissions). Effective permissions are the combination of inherited permissions and explicit permissions. Deny permissions\tDeny permissions always override Allow permissions. For example, if a user belongs to two groups and specific permission is allowed for one group and denied for the other, the permission is denied. However, the exception to this rule comes with inherited permissions. If an object has an explicit Allow permission entry, inherited Deny permissions do not prevent access to the object. Explicit permissions override inherited permissions, including Deny permissions. Cumulative permissions The following suggestions will help you plan permissions and mitigate issues related to cumulative permissions: Identify the users and their access needs (the actions each user needs to be able to perform). Create a group for each type of user with similar needs. Then, make the users members of the appropriate group. Assign each group (not the user) the permissions appropriate to the group's data access needs. Grant only the necessary permissions. Take inheritance into account as you assign permissions. Inheritance means permissions granted to a parent container object flow down to child objects within the container. Set permissions as high as possible on the parent container and allow each child container to inherit the permissions. Override inheritance on a case-by-case basis when necessary. Access Control Lists (ACLs) Access control lists (ACLs) in computer systems and networks are used to enforce access control policies. An ACL is a list of rules or entries that specify which users or groups are allowed or denied access to specific resources or perform certain actions. In networks, ACLs are associated with routers, firewalls, or similar devices and define rules that determine how network traffic is filtered or forwarded based on criteria like source IP addresses, destination IP addresses, ports, or protocols. ACLs can help to control network access and protect against unauthorized or malicious activities. ACLs control access to files, directories, or system resources in operating systems and file systems. Each access control entry (ACE) typically contains a user or group identifier and associated permissions controlling actions that are allowed or denied. These permissions often include read, write, execute, and sometimes more granular limits such as modify, delete, or list. While ACLs offer flexibility and control, managing complex access control policies with numerous ACL entries can become challenging. Complexity increases the risk of misconfigurations. Therefore, proper planning, periodic reviews, and best practice configurations are essential when implementing and maintaining ACLs. For example,  Discretionary access control (DAC) is based on the primacy of the resource owner. In a DAC model, every resource has an owner. The owner creates a file or service, although ownership can be assigned to another user. The owner has full control over the resource, and they can modify its access control list (ACL) to grant rights to others. An access control system ensures that an information system meets the goals of the CIA triad. Access control governs how subjects/principals may interact with objects. Subjects are people, devices, software processes, or any other system that can request and be granted access to a resource. Objects are the resources. An object could be a network, server, database, app, or file. Subjects are assigned rights or permissions on resources. A security principal is an object that can be given permissions to an object. Security principals include user accounts, computer accounts, and security group accounts. Each security principal is given a unique identification number called a Security ID (SID). When a security principal logs on, an access token is generated. The access token controls access to resources and contains the SID for the user or computer, for all groups the user or computer is a member of, and the user rights granted to the security principal. When the security principal tries to access a resource or take action, information in the access token is checked. For example, when a user tries to access a file, the access token is checked for the user's SID and all groups. The SIDs are then compared to those in the object's DACL to identify permissions that apply. On a Microsoft system, the access token is only generated during authentication. Changes to group memberships or user rights do not occur until the user logs on again and a new access token is created. Authorization with Single Sign-on After completing authentication, the client can decrypt the Ticket Granting Service (TGS) session key but not the Ticket Granting Ticket (TGT). This establishes that the client and key distribution center(KDC) know the same shared secret and that the client cannot interfere with the TGT. To access resources within the domain, the principal requests a service ticket (a token that grants access to a target application server). This process of granting service tickets is handled by the TGS. The principal sends the TGS a copy of its TGT and the name of the application server it wishes to access, plus an authenticator consisting of a time-stamped client ID encrypted using the TGS session key. The TGS should be able to decrypt both messages using the KDC's secret key for the first and the TGS session key for the second. This confirms that the request is genuine. It also checks that the ticket has not expired and has not been used before (replay attack). The TGS service responds with the following: A Service session key — is used between the client and the application server. This is encrypted with the TGS session key. A Service ticket — contains information about the principal, such as a time stamp, system IP address, Security Identifier (SID) and the SIDs of groups to which it belongs, and the service session key. This is encrypted using the application server's secret key. The principal forwards the service ticket, which it cannot decrypt, to the application server and adds another time-stamped authenticator, which is encrypted using the service session key. Kerberos Ticket Granting Service Images © 123RF.com Description The application server decrypts the service ticket to obtain the service session key using its secret key, confirming that the principal has sent it an untampered message. It then decrypts the authenticator using the service session key. Optionally, the application server responds to the principal with the time stamp used in the authenticator, which is encrypted using the service session key. The principal decrypts the time stamp, verifies that it matches the value already sent, and concludes that the application server is trustworthy. This means that the server is authenticated to the principal (referred to as mutual authentication). This prevents an on-path attack, where a malicious user could intercept communications between the principal and server. The server now responds to access requests (assuming they conform to the server's access control list). One of the noted drawbacks of Kerberos is that the KDC represents a single point of failure for the network. In practice, backup KDC servers can be implemented (for example, Active Directory supports multiple domain controllers, each of which is running the KDC service).",
      "summary": "Access Control Lists (ACLs) are fundamental security mechanisms that define which users or groups can access specific resources, with permissions being cumulative across group memberships but deny permissions always overriding allow permissions. Effective access control requires assigning permissions to groups rather than individual users, following the principle of least privilege, and leveraging inheritance from parent containers to child objects. In network environments, ACLs filter traffic based on IP addresses, ports, and protocols, while in file systems they control read, write, execute, and modify permissions through Access Control Entries (ACEs) that reference Security IDs (SIDs).",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.3.3",
        "title": "Authorization Facts",
        "content_type": "text",
        "filename": "4.3.3_Authorization_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.3.3_Authorization_Facts_[text].txt",
        "word_count": 1573,
        "has_content": true
      },
      "section_header": "6.8.3 Role-based",
      "timestamp_range": null
    }
  ],
  "num_chunks": 14,
  "document_summary": "Authorization Facts (text): Authorization Permissions, privileges, and roles Access control lists (ACLs) Authorization with single sign-on Authorization Examine the access token Learning Outcomes How is authorization different from authentication. How does an access control list (ACL) help to increase network security. Certification Exam Objectives Exam Objective CompTIA Security+ SY0-701 Authentication, Authorization, and Accounting (AAA) Authorization models Obfuscation Tokenization Access control Access control list (ACL) Permissions Permission assignments and implications Single sign-on (SSO) Access controls Discretionary TestOut Security Pro 5."
}