{
  "metadata": {
    "chapter_num": "4",
    "section_num": "4.6.1",
    "title": "Linux User and Group Overview",
    "content_type": "video",
    "filename": "4.6.1_Linux_User_and_Group_Overview_[video].txt",
    "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.6.1_Linux_User_and_Group_Overview_[video].txt",
    "word_count": 1804,
    "has_content": true
  },
  "full_content": "In this video, we're going to discuss Linux users and groups. First, when you're working with Linux, it's important to understand that it's a true multi-user operating system. Each user account has their own unique, customizable computing environment. When user accounts are stored locally, Linux stores the user, group, and password information in three separate files on the local file system in the /etc directory. We'll discuss each of these files in this lesson. The first file is the passwd file. The password file is named passwd, and it's stored in the /etc directory. This file contains the user account information for your system; this is where your users are defined. But don't let the filename confuse you. This file doesn't contain any password information, only user account information. Passwords are stored in another file that we'll look at in a bit. You may hear people still refer to this file as the password file because in the early days of UNIX, passwords were stored in here alongside the usernames. But, as you can imagine, this presented a huge security risk, so this file no longer contains any passwords. To avoid confusion, I'll call this the passwd file. So, now, the passwd file is where all the user accounts are stored. Each user account on a system is represented by a single line called an account record. An account record is composed of several fields, each separated by a colon. The first field is the username. The second is the password field. The third is the user ID field. Then there's the group ID field, the full name field, the home directory field, and finally, the shell field. Let's look at an example of each field. The username field contains the username the user will use to log in to the system. For example, for this record, the user account is zday. Next, we have the password field. Since this is a remnant of when passwords used to be stored in this file, you'll only see an X in this field. Now passwords are stored in the shadow file, which we'll talk about in a bit. Next is the UID field. This contains the user ID that's assigned to the user account. This user account is assigned a UID number of 1001. Then we have the group ID field, which references the group ID number of the user's default group. In Linux, a single user account can be a member of several different groups, but by default, a user is always assigned to one group, the default group. This is almost always the Users group, which has an ID of 100. Next, we have the full name field, which just contains the user's full name. The next field specifies the user's home directory. And finally, the default shell field specifies which shell is going to run for the user by default. Most distributions set the default shell to /bin/bash. It's important to understand that the passwd file contains two different types of users. First, there's the standard user accounts. These accounts are used to log in to the system, such as the zday account we just saw. The second type of accounts are the system user accounts. These accounts can't be used to log in to the system. They're used by services or daemons that are running on the system. This is because Linux uses groups, users, and permissions to control privileges. For a service or daemon to be able to read from or write to the file system, it needs to have a user account. So, if you ever open the passwd file and wonder why there are so many users that you never created, it's because the passwd file contains both standard user accounts. Now let's talk about the shadow file, which is where passwords are stored these days. The shadow file is linked to the passwd file. Each user account defined in your passwd file has a corresponding entry in the shadow file. As with the passwd file, each user account is represented by a single line in the shadow file called a record, which is composed of several different fields separated by colons. Here's an example of a single record in the shadow file. First, we have the username field, which is the same username that's defined in the passwd file. This is what links the two records together. Next, we have the password field. Depending on the type of user account you're looking at, there are a few things you can see in the password field. For example, if the record is for a standard user account, the password field will contain a string of text. This is the user's actual password in encrypted format. Theoretically, it's possible to crack this encrypted password if someone were to gain access to this file. But it's extremely difficult to do, and it would take a very, very long time. If the record is for a system user account, the password field will contain an asterisk. Remember, system user accounts can't be used to log in to the system. The asterisk indicates that this account is disabled, which prevents it from being able to authenticate to the system. There's one more thing you might see in the password field: a blank entry. Nothing. This means that the user account doesn't have a password and doesn't require one to log in to the system. As you can imagine, this presents a huge security hole. A user account should always have either an encrypted password or an asterisk, not a blank entry. The next field is the last modified field. This field displays the numbers of days since January 1st, 1970 that the password was last changed. So, when you see a huge number here, just remember that it's counting all the days between January 1st, 1970, and the day the password was last changed. Next, we have the minimum days field. This field defines the minimum number of days that need to pass before a password can change. Usually, this is set to zero, which means the password can be changed any time. But if you want to make it so users need to keep the same password for at least a week, you could put a seven in this field. The next field is the maximum days field. This field defines the maximum number of days a password can be used. For example, if you want users to change their password after 90 days, you would enter '90' in this field, or you can set passwords to never expire by entering â€˜99999' here. Next, we have the days warning field. This field defines when a user will be warned that their password is about to expire. This field is usually set to five or seven days. The next field defines the number of days to wait after a password is expired to disable the account. This field is usually set to -1, which disables this functionality. But if you want to disable an account if its password isn't changed after it expires, then you can enter a number, 3 for example. And finally, we have the expire field. This field defines the number of days since January 1st, 1970, that must pass until the account is automatically disabled. By default, this field is blank, which means this functionality is disabled. But if you want an account to be automatically disabled on a specific date, you need to figure out the number of days between it and January 1st, 1970, and then enter that number. And don't worry, there are several tools available that can do this calculation for you. Now, because the passwd and shadow files work together, they need to stay synchronized. The main way these files become out of sync is when an administrator uses a text editor to make changes to one of the files, but forgets to make the changes to the other, such as changing a username. If the files don't match, you've got a problem. To avoid this, manage user accounts using the password and user management utilities that are provided by the operating system. Avoid using a text editor. If a problem does occur, there are few commands you can use to compare the passwd file and shadow file, such as pwck, and then re-synchronize the files if they don't match. Now, let's look at the third file, the /etc/group file. Like most operating systems, Linux uses groups to help ease system management. For example, instead of managing the privileges of each individual user, you can manage the privileges of a single group and then assign user accounts to that group. Now, any changes made to the group will be automatically applied to the users. If you're managing hundreds of users, groups make your job a lot easier. Groups on a Linux system are defined in the /etc/group file. And the structure of the group file is similar to the passwd and shadow files. Each line in the group file is a single record that defines one group on your system, and each record is composed of four fields separated by colons. The first field is the group field. It specifies the group's name. In this example, the name of the group is sales. The second field is the password field, which specifies a password for the group. This field is rarely used, and in most cases it'll contain an X, which means no password is set. The third field is the group ID number, or the GID. In this case, the GID is 33. And the last field is a list of users who are members of the group. In this example, you see that zday and rnelson are both members of the sales group. Keep in mind that some Linux distributions use an additional group file to store group passwords. This works in a similar way to the passwd and shadow files. With this model, group passwords are stored in the gshadow file. Like the group file, the gshadow file has corresponding records and fields that define each group. In the gshadow file, you'll see fields that define the group name, the password, the group admins, and the group members. So that's how Linux users and groups work on a Linux system. In this lesson, we talked about user account storage. First, we looked at the /etc/passwd file, which contains user account information. Then we looked at the shadow file, which contains user passwords and password settings. And finally, we looked at the group file, where groups and group members are defined.",
  "chunks": [
    {
      "chunk_id": "4.6.1_chunk_1",
      "content": "In this video, we're going to discuss Linux users and groups. First, when you're working with Linux, it's important to understand that it's a true multi-user operating system. Each user account has their own unique, customizable computing environment. When user accounts are stored locally, Linux stores the user, group, and password information in three separate files on the local file system in the /etc directory. We'll discuss each of these files in this lesson.",
      "summary": "Linux User and Group Overview: In this video, we're going to discuss Linux users and groups. First, when you're working with Linux, it's important to understand that it's a true multi-user operating system.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.6.1",
        "title": "Linux User and Group Overview",
        "content_type": "video",
        "filename": "4.6.1_Linux_User_and_Group_Overview_[video].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.6.1_Linux_User_and_Group_Overview_[video].txt",
        "word_count": 1804,
        "has_content": true
      },
      "section_header": "Linux User and Group Overview",
      "timestamp_range": "00:00-00:33"
    },
    {
      "chunk_id": "4.6.1_chunk_2",
      "content": "The first file is the passwd file. The password file is named passwd, and it's stored in the /etc directory. This file contains the user account information for your system; this is where your users are defined. But don't let the filename confuse you. This file doesn't contain any password information, only user account information. Passwords are stored in another file that we'll look at in a bit. You may hear people still refer to this file as the password file because in the early days of UNIX, passwords were stored in here alongside the usernames. But, as you can imagine, this presented a huge security risk, so this file no longer contains any passwords. To avoid confusion, I'll call this the passwd file. So, now, the passwd file is where all the user accounts are stored. Each user account on a system is represented by a single line called an account record. An account record is composed of several fields, each separated by a colon. The first field is the username. The second is the password field. The third is the user ID field. Then there's the group ID field, the full name field, the home directory field, and finally, the shell field. Let's look at an example of each field. The username field contains the username the user will use to log in to the system. For example, for this record, the user account is zday. Next, we have the password field. Since this is a remnant of when passwords used to be stored in this file, you'll only see an X in this field. Now passwords are stored in the shadow file, which we'll talk about in a bit. Next is the UID field. This contains the user ID that's assigned to the user account. This user account is assigned a UID number of 1001. Then we have the group ID field, which references the group ID number of the user's default group. In Linux, a single user account can be a member of several different groups, but by default, a user is always assigned to one group, the default group. This is almost always the Users group, which has an ID of 100. Next, we have the full name field, which just contains the user's full name. The next field specifies the user's home directory. And finally, the default shell field specifies which shell is going to run for the user by default. Most distributions set the default shell to /bin/bash. It's important to understand that the passwd file contains two different types of users. First, there's the standard user accounts. These accounts are used to log in to the system, such as the zday account we just saw. The second type of accounts are the system user accounts. These accounts can't be used to log in to the system. They're used by services or daemons that are running on the system. This is because Linux uses groups, users, and permissions to control privileges. For a service or daemon to be able to read from or write to the file system, it needs to have a user account. So, if you ever open the passwd file and wonder why there are so many users that you never created, it's because the passwd file contains both standard user accounts.",
      "summary": "Password File: But, as you can imagine, this presented a huge security risk, so this file no longer contains any passwords. This is because Linux uses groups, users, and permissions to control privileges.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.6.1",
        "title": "Linux User and Group Overview",
        "content_type": "video",
        "filename": "4.6.1_Linux_User_and_Group_Overview_[video].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.6.1_Linux_User_and_Group_Overview_[video].txt",
        "word_count": 1804,
        "has_content": true
      },
      "section_header": "Password File",
      "timestamp_range": "00:33-04:02"
    },
    {
      "chunk_id": "4.6.1_chunk_3",
      "content": "Now let's talk about the shadow file, which is where passwords are stored these days. The shadow file is linked to the passwd file. Each user account defined in your passwd file has a corresponding entry in the shadow file. As with the passwd file, each user account is represented by a single line in the shadow file called a record, which is composed of several different fields separated by colons. Here's an example of a single record in the shadow file. First, we have the username field, which is the same username that's defined in the passwd file. This is what links the two records together. Next, we have the password field. Depending on the type of user account you're looking at, there are a few things you can see in the password field. For example, if the record is for a standard user account, the password field will contain a string of text. This is the user's actual password in encrypted format. Theoretically, it's possible to crack this encrypted password if someone were to gain access to this file. But it's extremely difficult to do, and it would take a very, very long time. If the record is for a system user account, the password field will contain an asterisk. Remember, system user accounts can't be used to log in to the system. The asterisk indicates that this account is disabled, which prevents it from being able to authenticate to the system. There's one more thing you might see in the password field: a blank entry. Nothing. This means that the user account doesn't have a password and doesn't require one to log in to the system. As you can imagine, this presents a huge security hole. A user account should always have either an encrypted password or an asterisk, not a blank entry. The next field is the last modified field. This field displays the numbers of days since January 1st, 1970 that the password was last changed. So, when you see a huge number here, just remember that it's counting all the days between January 1st, 1970, and the day the password was last changed. Next, we have the minimum days field. This field defines the minimum number of days that need to pass before a password can change. Usually, this is set to zero, which means the password can be changed any time. But if you want to make it so users need to keep the same password for at least a week, you could put a seven in this field. The next field is the maximum days field. This field defines the maximum number of days a password can be used. For example, if you want users to change their password after 90 days, you would enter '90' in this field, or you can set passwords to never expire by entering â€˜99999' here. Next, we have the days warning field. This field defines when a user will be warned that their password is about to expire. This field is usually set to five or seven days. The next field defines the number of days to wait after a password is expired to disable the account. This field is usually set to -1, which disables this functionality. But if you want to disable an account if its password isn't changed after it expires, then you can enter a number, 3 for example. And finally, we have the expire field. This field defines the number of days since January 1st, 1970, that must pass until the account is automatically disabled. By default, this field is blank, which means this functionality is disabled. But if you want an account to be automatically disabled on a specific date, you need to figure out the number of days between it and January 1st, 1970, and then enter that number. And don't worry, there are several tools available that can do this calculation for you. Now, because the passwd and shadow files work together, they need to stay synchronized. The main way these files become out of sync is when an administrator uses a text editor to make changes to one of the files, but forgets to make the changes to the other, such as changing a username. If the files don't match, you've got a problem. To avoid this, manage user accounts using the password and user management utilities that are provided by the operating system. Avoid using a text editor. If a problem does occur, there are few commands you can use to compare the passwd file and shadow file, such as pwck, and then re-synchronize the files if they don't match.",
      "summary": "Shadow Files: Theoretically, it's possible to crack this encrypted password if someone were to gain access to this file. This means that the user account doesn't have a password and doesn't require one to log in to the system.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.6.1",
        "title": "Linux User and Group Overview",
        "content_type": "video",
        "filename": "4.6.1_Linux_User_and_Group_Overview_[video].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.6.1_Linux_User_and_Group_Overview_[video].txt",
        "word_count": 1804,
        "has_content": true
      },
      "section_header": "Shadow Files",
      "timestamp_range": "04:02-08:45"
    },
    {
      "chunk_id": "4.6.1_chunk_4",
      "content": "Now, let's look at the third file, the /etc/group file. Like most operating systems, Linux uses groups to help ease system management. For example, instead of managing the privileges of each individual user, you can manage the privileges of a single group and then assign user accounts to that group. Now, any changes made to the group will be automatically applied to the users. If you're managing hundreds of users, groups make your job a lot easier. Groups on a Linux system are defined in the /etc/group file. And the structure of the group file is similar to the passwd and shadow files. Each line in the group file is a single record that defines one group on your system, and each record is composed of four fields separated by colons. The first field is the group field. It specifies the group's name. In this example, the name of the group is sales. The second field is the password field, which specifies a password for the group. This field is rarely used, and in most cases it'll contain an X, which means no password is set. The third field is the group ID number, or the GID. In this case, the GID is 33. And the last field is a list of users who are members of the group. In this example, you see that zday and rnelson are both members of the sales group. Keep in mind that some Linux distributions use an additional group file to store group passwords. This works in a similar way to the passwd and shadow files. With this model, group passwords are stored in the gshadow file. Like the group file, the gshadow file has corresponding records and fields that define each group. In the gshadow file, you'll see fields that define the group name, the password, the group admins, and the group members.",
      "summary": "[Linux User and Group Overview] Group Files: Now, let's look at the third file, the /etc/group file. Like most operating systems, Linux uses groups to help ease system management.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.6.1",
        "title": "Linux User and Group Overview",
        "content_type": "video",
        "filename": "4.6.1_Linux_User_and_Group_Overview_[video].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.6.1_Linux_User_and_Group_Overview_[video].txt",
        "word_count": 1804,
        "has_content": true
      },
      "section_header": "Group Files",
      "timestamp_range": "08:45-10:44"
    },
    {
      "chunk_id": "4.6.1_chunk_5",
      "content": "So that's how Linux users and groups work on a Linux system. In this lesson, we talked about user account storage. First, we looked at the /etc/passwd file, which contains user account information. Then we looked at the shadow file, which contains user passwords and password settings. And finally, we looked at the group file, where groups and group members are defined.",
      "summary": "[Linux User and Group Overview] So that's how Linux users and groups work on a Linux system. First, we looked at the /etc/passwd file, which contains user account information.",
      "metadata": {
        "chapter_num": "4",
        "section_num": "4.6.1",
        "title": "Linux User and Group Overview",
        "content_type": "video",
        "filename": "4.6.1_Linux_User_and_Group_Overview_[video].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/04_Identity_and_Access_Management/4.6.1_Linux_User_and_Group_Overview_[video].txt",
        "word_count": 1804,
        "has_content": true
      },
      "section_header": "Summary",
      "timestamp_range": "10:44-11:10"
    }
  ],
  "num_chunks": 5,
  "document_summary": "Linux User and Group Overview (video): But, as you can imagine, this presented a huge security risk, so this file no longer contains any passwords. This is because Linux uses groups, users, and permissions to control privileges. This means that the user account doesn't have a password and doesn't require one to log in to the system."
}