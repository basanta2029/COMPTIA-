{
  "metadata": {
    "chapter_num": "5",
    "section_num": "5.7.4",
    "title": "Unauthorized SSH Connection",
    "content_type": "video",
    "filename": "5.7.4_Unauthorized_SSH_Connection_[video].txt",
    "file_path": "data_raw/05_Network_Architecture/5.7.4_Unauthorized_SSH_Connection_[video].txt",
    "word_count": 921,
    "has_content": true
  },
  "full_content": "Transcript close interactive script Malicious users sometimes gain access to systems with SSH connections. It's not a good idea to allow root access through SSH, but many admins modify their systems to allow it anyway. Once a malicious user has access to the system, they can pretty much do what they want. In this demo, we're going to gain access to a Linux system and create an unauthorized SSH session. The first thing we need to do is find our target. I'm on a Kali Linux system with a terminal open. I'm going to do a ping sweep using nmap on my subnet. I already know that my subnet is 10.10.10.0. So, to do this, I'll type '10.10.10.0/24', or I could also put in the IP range. In this case, that would be '10.10.10.1-254'. Press Enter. My scan completes, and down here, I can see that it found four hosts. Up here, I can see that I have a device called Router with the IP of 10.10.10.1, so that's going to be my target. I'll clear the screen. And now, I want to scan just that IP to see which ports are open. The scan completes, and this, right here, is what I'm interested in. I see that SSH is running on port 22 on this system. Now, let's use nmap and run a script that will attempt to brute force the username and password. nmap comes with something called the Nmap scripting engine. One of those scripts is for brute forcing SSH. So, let's type that in, 'nmap - -script=ssh-brute 10.10.10.1', and press Enter. nmap will begin the process of attempting to brute force the username and password. nmap is using a built-in default username list and a password list to do this. First, it will grab a username and try a password. Then it goes to the next username and tries the next password. I'm on a virtual machine without a lot of system resources, so this is going to take some time. So, while this is running, I'll pause the recording. All right. The scan finished up, and we can see, here, that it found the username Root and the password, which is a variation of the word \"password.\" The brute force made 2,270 guesses, and it took just a little over 600 seconds to complete the process. As I mentioned, this is a virtual machine, so the scanning goes a lot slower. But I do happen to know that the password it found is near the top of the list of tens of thousands of passwords. So, depending on your system and your password file, your results could be substantially different. Now that we know our username and password, let's try to make an unauthorized SSH connection to that system. I'm going to jump over to a Windows 10 system and try the connection from there. All right. I'm on this Windows 10 machine, and up here, I have a program called PuTTY. PuTTY is a free and open-source terminal emulator, serial console, and network file transfer application. It supports several network protocols, including SCP, SSH, Telnet, rlogin, and other connections. It's often used to connect to switching and routing equipment. To make a connection, I'll type in the IP address for our victim machine, '10.10.10.1'. Under Port, 22 is already entered, so I'll just hit Enter. Now, a terminal opens up. It's asking for a login name, so I'll put in 'root'. And now it wants my password, so I'll type in the variation of the word \"password\" that we saw earlier. Press Enter, and I'm logged in! So, whatever's possible to do in a terminal, I'm able to do--that gives me a lot of options. Okay. I still want to look at one more thing, and that's to log in to that victim machine to see what's going on while this SSH session is running. Let's go over to this Linux system. This is actually a Linux distribution that's used as a firewall and router. I'm going to go ahead and log in to the GUI. Once I've logged in, I'm not really able to tell that there's an SSH session going on at the exact same time. That's it for this demo. In this demo, we performed an unauthorized SSH connection. First, we scanned our subnet with nmap to find our victim. Then we used an nmap script to brute force the username and password. We used that information to make the SSH connection to the victim machine using the program PuTTY. And we wrapped up by logging in to the victim machine's GUI to verify that the SSH session wan't detected.",
  "chunks": [
    {
      "chunk_id": "5.7.4_chunk_1",
      "content": "Malicious users sometimes gain access to systems with SSH connections. It's not a good idea to allow root access through SSH, but many admins modify their systems to allow it anyway. Once a malicious user has access to the system, they can pretty much do what they want. In this demo, we're going to gain access to a Linux system and create an unauthorized SSH session.",
      "summary": "This section highlights the risks associated with unauthorized SSH connections, particularly the dangers of allowing root access via SSH, which can be exploited by malicious users. The demonstration illustrates how an attacker can gain access to a Linux system and establish an unauthorized SSH session, emphasizing the importance of implementing strict access controls and security best practices to protect systems from such vulnerabilities.",
      "metadata": {
        "chapter_num": "5",
        "section_num": "5.7.4",
        "title": "Unauthorized SSH Connection",
        "content_type": "video",
        "filename": "5.7.4_Unauthorized_SSH_Connection_[video].txt",
        "file_path": "data_raw/05_Network_Architecture/5.7.4_Unauthorized_SSH_Connection_[video].txt",
        "word_count": 921,
        "has_content": true
      },
      "section_header": "Establish an Unauthorized SSH Connection",
      "timestamp_range": ""
    },
    {
      "chunk_id": "5.7.4_chunk_2",
      "content": "The first thing we need to do is find our target. I'm on a Kali Linux system with a terminal open. I'm going to do a ping sweep using nmap on my subnet. I already know that my subnet is 10.10.10.0. So, to do this, I'll type '10.10.10.0/24', or I could also put in the IP range. In this case, that would be '10.10.10.1-254'. Press Enter. My scan completes, and down here, I can see that it found four hosts. Up here, I can see that I have a device called Router with the IP of 10.10.10.1, so that's going to be my target. I'll clear the screen. And now, I want to scan just that IP to see which ports are open. The scan completes, and this, right here, is what I'm interested in. I see that SSH is running on port 22 on this system.",
      "summary": "In this section, the focus is on identifying target systems within a network using Kali Linux and the nmap tool. By performing a ping sweep on the subnet 10.10.10.0/24, the user discovers active hosts, including a router at IP 10.10.10.1. The subsequent port scan reveals that SSH is operational on port 22, highlighting the importance of network reconnaissance in cybersecurity assessments.",
      "metadata": {
        "chapter_num": "5",
        "section_num": "5.7.4",
        "title": "Unauthorized SSH Connection",
        "content_type": "video",
        "filename": "5.7.4_Unauthorized_SSH_Connection_[video].txt",
        "file_path": "data_raw/05_Network_Architecture/5.7.4_Unauthorized_SSH_Connection_[video].txt",
        "word_count": 921,
        "has_content": true
      },
      "section_header": "Find the System",
      "timestamp_range": ""
    },
    {
      "chunk_id": "5.7.4_chunk_3",
      "content": "Now, let's use nmap and run a script that will attempt to brute force the username and password. nmap comes with something called the Nmap scripting engine. One of those scripts is for brute forcing SSH. So, let's type that in, 'nmap - -script=ssh-brute 10.10.10.1', and press Enter. nmap will begin the process of attempting to brute force the username and password. nmap is using a built-in default username list and a password list to do this. First, it will grab a username and try a password. Then it goes to the next username and tries the next password. I'm on a virtual machine without a lot of system resources, so this is going to take some time. So, while this is running, I'll pause the recording. All right. The scan finished up, and we can see, here, that it found the username Root and the password, which is a variation of the word \"password.\" The brute force made 2,270 guesses, and it took just a little over 600 seconds to complete the process. As I mentioned, this is a virtual machine, so the scanning goes a lot slower. But I do happen to know that the password it found is near the top of the list of tens of thousands of passwords. So, depending on your system and your password file, your results could be substantially different. Now that we know our username and password, let's try to make an unauthorized SSH connection to that system. I'm going to jump over to a Windows 10 system and try the connection from there.",
      "summary": "The Nmap Scripting Engine allows users to perform brute-force attacks on SSH by utilizing built-in username and password lists. In a practical demonstration, the script successfully identified the username \"Root\" and a weak password after making 2,270 guesses over approximately 600 seconds. This exercise highlights the importance of strong passwords and the potential vulnerabilities in systems that rely on default or common credentials.",
      "metadata": {
        "chapter_num": "5",
        "section_num": "5.7.4",
        "title": "Unauthorized SSH Connection",
        "content_type": "video",
        "filename": "5.7.4_Unauthorized_SSH_Connection_[video].txt",
        "file_path": "data_raw/05_Network_Architecture/5.7.4_Unauthorized_SSH_Connection_[video].txt",
        "word_count": 921,
        "has_content": true
      },
      "section_header": "Nmap Scripting Engine Brute-Force Script",
      "timestamp_range": ""
    },
    {
      "chunk_id": "5.7.4_chunk_4",
      "content": "All right. I'm on this Windows 10 machine, and up here, I have a program called PuTTY. PuTTY is a free and open-source terminal emulator, serial console, and network file transfer application. It supports several network protocols, including SCP, SSH, Telnet, rlogin, and other connections. It's often used to connect to switching and routing equipment. To make a connection, I'll type in the IP address for our victim machine, '10.10.10.1'. Under Port, 22 is already entered, so I'll just hit Enter. Now, a terminal opens up. It's asking for a login name, so I'll put in 'root'. And now it wants my password, so I'll type in the variation of the word \"password\" that we saw earlier. Press Enter, and I'm logged in! So, whatever's possible to do in a terminal, I'm able to do--that gives me a lot of options. Okay. I still want to look at one more thing, and that's to log in to that victim machine to see what's going on while this SSH session is running.",
      "summary": "In this section, the course demonstrates how to use PuTTY, a terminal emulator, to establish an unauthorized SSH connection from a Windows 10 machine to a target device. By entering the target's IP address and using default credentials, the user gains access to the terminal, highlighting security vulnerabilities associated with weak passwords and unauthorized access. This practical application emphasizes the importance of securing SSH connections and implementing strong authentication measures in cybersecurity practices.",
      "metadata": {
        "chapter_num": "5",
        "section_num": "5.7.4",
        "title": "Unauthorized SSH Connection",
        "content_type": "video",
        "filename": "5.7.4_Unauthorized_SSH_Connection_[video].txt",
        "file_path": "data_raw/05_Network_Architecture/5.7.4_Unauthorized_SSH_Connection_[video].txt",
        "word_count": 921,
        "has_content": true
      },
      "section_header": "Unauthorized SSH Connection from Windows 10",
      "timestamp_range": ""
    },
    {
      "chunk_id": "5.7.4_chunk_5",
      "content": "Let's go over to this Linux system. This is actually a Linux distribution that's used as a firewall and router. I'm going to go ahead and log in to the GUI. Once I've logged in, I'm not really able to tell that there's an SSH session going on at the exact same time.",
      "summary": "In this section, learners are introduced to a Linux distribution utilized as a firewall and router, emphasizing the importance of secure system access. The practical application involves logging into the graphical user interface (GUI) while highlighting the simultaneous SSH session, illustrating the need for awareness of concurrent access methods in cybersecurity. This reinforces key security concepts related to system management and remote access vulnerabilities.",
      "metadata": {
        "chapter_num": "5",
        "section_num": "5.7.4",
        "title": "Unauthorized SSH Connection",
        "content_type": "video",
        "filename": "5.7.4_Unauthorized_SSH_Connection_[video].txt",
        "file_path": "data_raw/05_Network_Architecture/5.7.4_Unauthorized_SSH_Connection_[video].txt",
        "word_count": 921,
        "has_content": true
      },
      "section_header": "Log in to the Victim Machine",
      "timestamp_range": ""
    },
    {
      "chunk_id": "5.7.4_chunk_6",
      "content": "That's it for this demo. In this demo, we performed an unauthorized SSH connection. First, we scanned our subnet with nmap to find our victim. Then we used an nmap script to brute force the username and password. We used that information to make the SSH connection to the victim machine using the program PuTTY. And we wrapped up by logging in to the victim machine's GUI to verify that the SSH session wan't detected.",
      "summary": "In this demo, we demonstrated an unauthorized SSH connection by first scanning a subnet with nmap to identify the target machine. We then utilized an nmap script to brute force the login credentials, which allowed us to connect to the victim's machine using PuTTY. Finally, we logged into the victim's GUI to confirm that the SSH session went undetected, highlighting key concepts in network scanning, credential exploitation, and stealthy access techniques.",
      "metadata": {
        "chapter_num": "5",
        "section_num": "5.7.4",
        "title": "Unauthorized SSH Connection",
        "content_type": "video",
        "filename": "5.7.4_Unauthorized_SSH_Connection_[video].txt",
        "file_path": "data_raw/05_Network_Architecture/5.7.4_Unauthorized_SSH_Connection_[video].txt",
        "word_count": 921,
        "has_content": true
      },
      "section_header": "Summary",
      "timestamp_range": ""
    }
  ],
  "num_chunks": 6
}