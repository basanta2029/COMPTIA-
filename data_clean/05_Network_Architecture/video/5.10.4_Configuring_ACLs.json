{
  "metadata": {
    "chapter_num": "5",
    "section_num": "5.10.4",
    "title": "Configuring ACLs",
    "content_type": "video",
    "filename": "5.10.4_Configuring_ACLs_[video].txt",
    "file_path": "data_raw/05_Network_Architecture/5.10.4_Configuring_ACLs_[video].txt",
    "word_count": 1450,
    "has_content": true
  },
  "full_content": "Transcript close interactive script In this demonstration, we'll show you how to configure access control lists on a Cisco router using the command line interface. Access control lists can give us granular control over how data flows across our networks, and which computers can communicate with specific protocols. An access control list is simply a sequential list of statements of what can and cannot be done on the network. Those that can be done use the permit keyword. Those that can't be done use the deny keyword. The ordering of the lines is important. These lists should go from the most specific conditions to the most general. For instance, if we wanted to disallow FTP on our network, we could create a statement added to our access list that denied FTP. We would do that first, and then later we might allow all other application protocols that sit on top of the IP protocol. And so, we might have two rules there. It's also important to recognize that there's an implicit deny anything else or any other traffic. This is located at the end of every access control list. In other words, anything that isn't explicitly permitted is implicitly denied. For our demonstration, we're going to use this Windows 10 virtual machine that you can see over here. You can see that it currently has access to the Internet. We could look up access control lists and find out some information. We can also see that we can currently ping, say, Google's DNS servers. We have access to the Internet. Let's go ahead and prohibit, or deny access for this computer to the Internet. I'm going to attach to my Cisco router using Tera Term here. I have a cable going to the console port on the router. You can see that my router is currently, already configured to allow NAT, and it also has some specific configuration settings allowing different networks to connect with each other. If we wanted to deny access to the Internet for this device, we need to know what its IP address is. We can get that by typing IPconfig here. You can see this is 10.0.0.2. You can see that it must be connected to this 10.0.0.1 network that's associated with interface FA0/1. To deny a specific host, it's fairly straightforward. We need to get into configuration mode. Now, you might have read, or you might know that there are two different types of access control lists, with Cisco. There are standard lists, and there are extended ACL. Standard lists only act on the source IP address for filtering. You can only deny or permit specific hosts based on IP address, not protocols. Whereas, extended access control lists allow you to get pretty granular with which ports are allowed and denied, which protocols are allowed or denied also. In our case, standard control list will work fine for this action. Now that we're in configuration mode, we're going to create an access list, and we'll just call it access list 10. Standard lists range typically from 1 to 99, or from 1300 to 1999. We'll just choose 10 because that says this is a standard access list. And then, we will state that we want to deny 10.0.0.2, and specifically just that host. This second parameter is a wild card mask. Essentially, anything that's a zero there, says it has to match, or the IP address has to match that. In this case, we're only applying this rule to 10.0.0.2. Everything has to match that. We'll do that. Now, we still have access to the Internet. We can go ahead and refresh. You can see that we still get results. We can't just create the access list. We now need to apply that access list. And so, in order to apply it, we basically tell it which interface this applies to. We're already in configuration mode, so we'll go to FA0/1, and we'll apply this access list to that. We're going to apply access list 10 to this interface, and we're going to examine packets as they arrive at this interface on the router. We'll go ahead and say, \"Enter there.\" And now, if we come over here, we should see that we no longer have access to the Internet. It just kind of spins there. If we come up, and we try to ping, it's unreachable. Now, one problem with this list is we explicitly denied this host. We've achieved what we wanted to. However, because there's that implicit deny at the end, we've denied access to everything else as well, everything that's coming through FA0/1. If we wanted to keep that there, we'd want to, maybe create a rule that said access list 10 permit, and then the range of IP addresses that would be permitted. In this case, let's just go ahead and just disable that access control list. We're still on that, so I'm going to simply type, no IP access group 10 in, which basically reverses the command that I had just done. We should see that now we have access back out to the Internet. We can refresh this one, as well. What if we wanted to deny ping, which uses ICMP, while still allowing Internet access? How can we get a little bit more granular? Well, we're going to need extended control lists in order to do that. Let's go ahead and create an extended access control list. We'll get out of this interface. Let's go ahead and create access list 100. For this one, let's first deny ICMP, and we can specify a single host by just saying, \"Host.\" We'll say, \"Deny this specific host for ICMP.\" And, to what network? We'll say, \"To anything that comes through.\" The 0.0.0 says, \"Anything.\" Coupled with this wildcard mask then that denies all ICMP. Now, we haven't applied this list yet, so it still will allow us out to the Internet. We also want to permit access to other types of protocols, or any other protocol besides ICMP. Our second rule on our list will allow us to do that. We're going to permit IP for that host. We can shorten it and just say, \"To any,\" if we wanted to. Or, maybe we could be a little broader and say, \"We're actually going to allow anyone on the 10 dot network to have access to any network.\" Let's go ahead and try to apply that to FA0/1. Let's go ahead and try it. So, we are not able to ping, but we are able to get out to the Internet. Let's go ahead and show you that, and that it's not just cached. You can do different queries. Access control lists are very powerful but can become complicated. It's important that you understand the basics that essentially these are just a sequential list of permit-and-deny statements, with an implicit deny at the end. Standard access control lists allow you to filter based on a source IP address. Extended access control lists allow you to filter more granularly on specific protocols, or even specific ports for individual hosts, or for whole ranges of addresses. Okay. That's it for this demonstration. In this demonstration, we showed you how to configure access control lists on a Cisco router using the command line interface. Access control lists are foundational to allow us to screen the data that comes through our networks that we either allow out or into our corporate networks.",
  "chunks": [
    {
      "chunk_id": "5.10.4_chunk_1",
      "content": "In this demonstration, we'll show you how to configure access control lists on a Cisco router using the command line interface. Access control lists can give us granular control over how data flows across our networks, and which computers can communicate with specific protocols. An access control list is simply a sequential list of statements of what can and cannot be done on the network. Those that can be done use the permit keyword. Those that can't be done use the deny keyword.",
      "summary": "This section covers the configuration of access control lists (ACLs) on Cisco routers through the command line interface, emphasizing their role in managing network traffic. ACLs provide granular control by specifying which devices can communicate using certain protocols, utilizing the \"permit\" keyword for allowed actions and the \"deny\" keyword for restricted actions. Understanding and implementing ACLs is crucial for enhancing network security and ensuring proper data flow.",
      "metadata": {
        "chapter_num": "5",
        "section_num": "5.10.4",
        "title": "Configuring ACLs",
        "content_type": "video",
        "filename": "5.10.4_Configuring_ACLs_[video].txt",
        "file_path": "data_raw/05_Network_Architecture/5.10.4_Configuring_ACLs_[video].txt",
        "word_count": 1450,
        "has_content": true
      },
      "section_header": "Access Control Lists",
      "timestamp_range": ""
    },
    {
      "chunk_id": "5.10.4_chunk_2",
      "content": "The ordering of the lines is important. These lists should go from the most specific conditions to the most general. For instance, if we wanted to disallow FTP on our network, we could create a statement added to our access list that denied FTP. We would do that first, and then later we might allow all other application protocols that sit on top of the IP protocol. And so, we might have two rules there. It's also important to recognize that there's an implicit deny anything else or any other traffic. This is located at the end of every access control list. In other words, anything that isn't explicitly permitted is implicitly denied.",
      "summary": "In the CompTIA Security+ course, the section on defining lists emphasizes the importance of ordering access control rules from the most specific to the most general. For example, to disallow FTP traffic, a specific deny rule should be placed at the top of the access list, followed by broader allow rules for other protocols. Additionally, it highlights that access control lists inherently include an implicit deny rule, meaning any traffic not explicitly permitted is automatically denied.",
      "metadata": {
        "chapter_num": "5",
        "section_num": "5.10.4",
        "title": "Configuring ACLs",
        "content_type": "video",
        "filename": "5.10.4_Configuring_ACLs_[video].txt",
        "file_path": "data_raw/05_Network_Architecture/5.10.4_Configuring_ACLs_[video].txt",
        "word_count": 1450,
        "has_content": true
      },
      "section_header": "Defining Lists",
      "timestamp_range": ""
    },
    {
      "chunk_id": "5.10.4_chunk_3",
      "content": "For our demonstration, we're going to use this Windows 10 virtual machine that you can see over here. You can see that it currently has access to the Internet. We could look up access control lists and find out some information. We can also see that we can currently ping, say, Google's DNS servers. We have access to the Internet. Let's go ahead and prohibit, or deny access for this computer to the Internet. I'm going to attach to my Cisco router using Tera Term here. I have a cable going to the console port on the router. You can see that my router is currently, already configured to allow NAT, and it also has some specific configuration settings allowing different networks to connect with each other. If we wanted to deny access to the Internet for this device, we need to know what its IP address is. We can get that by typing IPconfig here. You can see this is 10.0.0.2. You can see that it must be connected to this 10.0.0.1 network that's associated with interface FA0/1. To deny a specific host, it's fairly straightforward. We need to get into configuration mode.",
      "summary": "This section on configuring Access Control Lists (ACLs) demonstrates how to deny Internet access to a specific Windows 10 virtual machine by using a Cisco router. It involves identifying the machine's IP address and entering configuration mode on the router to implement the ACL settings. This practical application highlights the importance of managing network access and security through proper configuration of routers and ACLs.",
      "metadata": {
        "chapter_num": "5",
        "section_num": "5.10.4",
        "title": "Configuring ACLs",
        "content_type": "video",
        "filename": "5.10.4_Configuring_ACLs_[video].txt",
        "file_path": "data_raw/05_Network_Architecture/5.10.4_Configuring_ACLs_[video].txt",
        "word_count": 1450,
        "has_content": true
      },
      "section_header": "Configuring ACL's",
      "timestamp_range": ""
    },
    {
      "chunk_id": "5.10.4_chunk_4",
      "content": "Now, you might have read, or you might know that there are two different types of access control lists, with Cisco. There are standard lists, and there are extended ACL. Standard lists only act on the source IP address for filtering. You can only deny or permit specific hosts based on IP address, not protocols. Whereas, extended access control lists allow you to get pretty granular with which ports are allowed and denied, which protocols are allowed or denied also. In our case, standard control list will work fine for this action. Now that we're in configuration mode, we're going to create an access list, and we'll just call it access list 10. Standard lists range typically from 1 to 99, or from 1300 to 1999. We'll just choose 10 because that says this is a standard access list. And then, we will state that we want to deny 10.0.0.2, and specifically just that host. This second parameter is a wild card mask. Essentially, anything that's a zero there, says it has to match, or the IP address has to match that. In this case, we're only applying this rule to 10.0.0.2. Everything has to match that. We'll do that. Now, we still have access to the Internet. We can go ahead and refresh. You can see that we still get results. We can't just create the access list. We now need to apply that access list.",
      "summary": "The CompTIA Security+ course covers two types of access control lists (ACLs) in Cisco: standard and extended. Standard ACLs filter traffic based solely on source IP addresses, while extended ACLs provide more granular control over protocols and ports. The practical application involves creating and applying a standard ACL to deny access to specific hosts, demonstrating how to configure and implement these security measures effectively.",
      "metadata": {
        "chapter_num": "5",
        "section_num": "5.10.4",
        "title": "Configuring ACLs",
        "content_type": "video",
        "filename": "5.10.4_Configuring_ACLs_[video].txt",
        "file_path": "data_raw/05_Network_Architecture/5.10.4_Configuring_ACLs_[video].txt",
        "word_count": 1450,
        "has_content": true
      },
      "section_header": "Types of ACL's",
      "timestamp_range": ""
    },
    {
      "chunk_id": "5.10.4_chunk_5",
      "content": "And so, in order to apply it, we basically tell it which interface this applies to. We're already in configuration mode, so we'll go to FA0/1, and we'll apply this access list to that. We're going to apply access list 10 to this interface, and we're going to examine packets as they arrive at this interface on the router. We'll go ahead and say, \"Enter there.\" And now, if we come over here, we should see that we no longer have access to the Internet. It just kind of spins there. If we come up, and we try to ping, it's unreachable. Now, one problem with this list is we explicitly denied this host. We've achieved what we wanted to. However, because there's that implicit deny at the end, we've denied access to everything else as well, everything that's coming through FA0/1. If we wanted to keep that there, we'd want to, maybe create a rule that said access list 10 permit, and then the range of IP addresses that would be permitted. In this case, let's just go ahead and just disable that access control list. We're still on that, so I'm going to simply type, no IP access group 10 in, which basically reverses the command that I had just done. We should see that now we have access back out to the Internet. We can refresh this one, as well.",
      "summary": "This section covers the application of Access Control Lists (ACLs) on a router interface, specifically FA0/1, to manage network traffic. It demonstrates how to configure an ACL to deny access to specific hosts while highlighting the implicit deny rule that blocks all other traffic unless explicitly permitted. The practical application includes enabling and disabling ACLs to control Internet access, emphasizing the importance of crafting rules that balance security and accessibility.",
      "metadata": {
        "chapter_num": "5",
        "section_num": "5.10.4",
        "title": "Configuring ACLs",
        "content_type": "video",
        "filename": "5.10.4_Configuring_ACLs_[video].txt",
        "file_path": "data_raw/05_Network_Architecture/5.10.4_Configuring_ACLs_[video].txt",
        "word_count": 1450,
        "has_content": true
      },
      "section_header": "Apply ACL's",
      "timestamp_range": ""
    },
    {
      "chunk_id": "5.10.4_chunk_6",
      "content": "What if we wanted to deny ping, which uses ICMP, while still allowing Internet access? How can we get a little bit more granular? Well, we're going to need extended control lists in order to do that. Let's go ahead and create an extended access control list. We'll get out of this interface. Let's go ahead and create access list 100. For this one, let's first deny ICMP, and we can specify a single host by just saying, \"Host.\" We'll say, \"Deny this specific host for ICMP.\" And, to what network? We'll say, \"To anything that comes through.\" The 0.0.0 says, \"Anything.\" Coupled with this wildcard mask then that denies all ICMP. Now, we haven't applied this list yet, so it still will allow us out to the Internet. We also want to permit access to other types of protocols, or any other protocol besides ICMP. Our second rule on our list will allow us to do that. We're going to permit IP for that host. We can shorten it and just say, \"To any,\" if we wanted to. Or, maybe we could be a little broader and say, \"We're actually going to allow anyone on the 10 dot network to have access to any network.\" Let's go ahead and try to apply that to FA0/1. Let's go ahead and try it. So, we are not able to ping, but we are able to get out to the Internet. Let's go ahead and show you that, and that it's not just cached. You can do different queries.",
      "summary": "This section covers the implementation of extended access control lists (ACLs) to deny ICMP traffic, specifically ping requests, while still allowing general Internet access. By creating an access list that denies a specific host's ICMP traffic and permits other protocols, users can achieve more granular control over network traffic. The practical application demonstrates how to configure these rules on a network interface, ensuring that while ping is blocked, other communications remain functional.",
      "metadata": {
        "chapter_num": "5",
        "section_num": "5.10.4",
        "title": "Configuring ACLs",
        "content_type": "video",
        "filename": "5.10.4_Configuring_ACLs_[video].txt",
        "file_path": "data_raw/05_Network_Architecture/5.10.4_Configuring_ACLs_[video].txt",
        "word_count": 1450,
        "has_content": true
      },
      "section_header": "Deny Ping with ACL's",
      "timestamp_range": ""
    },
    {
      "chunk_id": "5.10.4_chunk_7",
      "content": "Access control lists are very powerful but can become complicated. It's important that you understand the basics that essentially these are just a sequential list of permit-and-deny statements, with an implicit deny at the end. Standard access control lists allow you to filter based on a source IP address. Extended access control lists allow you to filter more granularly on specific protocols, or even specific ports for individual hosts, or for whole ranges of addresses. Okay.",
      "summary": "Access Control Lists (ACLs) are essential tools in cybersecurity that manage permissions through a sequential list of permit-and-deny statements, concluding with an implicit deny. Standard ACLs filter traffic based on source IP addresses, while Extended ACLs provide more detailed filtering capabilities, allowing for specific protocols and ports to be targeted for individual hosts or address ranges. Understanding ACLs is crucial for implementing effective network security measures.",
      "metadata": {
        "chapter_num": "5",
        "section_num": "5.10.4",
        "title": "Configuring ACLs",
        "content_type": "video",
        "filename": "5.10.4_Configuring_ACLs_[video].txt",
        "file_path": "data_raw/05_Network_Architecture/5.10.4_Configuring_ACLs_[video].txt",
        "word_count": 1450,
        "has_content": true
      },
      "section_header": "Defining ACL's",
      "timestamp_range": ""
    },
    {
      "chunk_id": "5.10.4_chunk_8",
      "content": "That's it for this demonstration. In this demonstration, we showed you how to configure access control lists on a Cisco router using the command line interface. Access control lists are foundational to allow us to screen the data that comes through our networks that we either allow out or into our corporate networks.",
      "summary": "This demonstration covered the configuration of access control lists (ACLs) on a Cisco router via the command line interface, highlighting their critical role in network security. ACLs serve as a fundamental mechanism for filtering incoming and outgoing data, thereby enhancing the protection of corporate networks. Understanding and implementing ACLs is essential for managing network traffic and safeguarding sensitive information.",
      "metadata": {
        "chapter_num": "5",
        "section_num": "5.10.4",
        "title": "Configuring ACLs",
        "content_type": "video",
        "filename": "5.10.4_Configuring_ACLs_[video].txt",
        "file_path": "data_raw/05_Network_Architecture/5.10.4_Configuring_ACLs_[video].txt",
        "word_count": 1450,
        "has_content": true
      },
      "section_header": "Summary",
      "timestamp_range": ""
    }
  ],
  "num_chunks": 8
}