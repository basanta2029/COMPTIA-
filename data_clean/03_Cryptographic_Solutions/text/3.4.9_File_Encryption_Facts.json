{
  "metadata": {
    "chapter_num": "3",
    "section_num": "3.4.9",
    "title": "File Encryption Facts",
    "content_type": "text",
    "filename": "3.4.9_File_Encryption_Facts_[text].txt",
    "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.4.9_File_Encryption_Facts_[text].txt",
    "word_count": 2684,
    "has_content": true
  },
  "full_content": "Security Pro 8.0 Encryption of files, directories, and hard drives provides an additional level of data security. File encryption is part of a layered defense strategy and helps to protect confidential data in the event that system data is hacked, lost, or stolen. There are different methods that can be used to encrypt data or entire hard drives. Encryption supporting confidentiality Disk and file encryption Transport encryption and key exchange Encrypting File System (EFS) PGP and GPG BitLocker Encryption Supporting Confidentiality If data is encrypted, it does not matter if the disk storing the information is stolen or if it can be intercepted when transferred over a network because the threat actor will not be able to understand or change what has been stolen. This use of encryption fulfills the goal of confidentiality. When deploying a cryptographic system to protect data assets, consideration must be given to how information could potentially be intercepted. Data can be described as being in one of three states: Data at rest - is the state when the data is in some sort of persistent storage media. Data in transit (or data in motion) - is the state when data is transmitted over a network. Data in use (or data in processing) - is the state when data is present in volatile memory, such as system RAM or CPU registers and cache. Encrypting megabytes or gigabytes of data is referred to as bulk encryption. Asymmetric encryption and private/public key pairs are not often used for bulk encryption because an asymmetric algorithm cannot process large amounts of data efficiently. The computational overhead is too high when using this type of algorithm to encrypt the contents of a disk or series of network packets. Therefore, bulk data encryption uses a symmetric cipher, such as AES. A symmetric cipher can encrypt and decrypt data files and streams of network traffic quickly. The problem is that distributing a symmetric key is challenging. The more people who know the key value, the weaker the confidentiality property is. Luckily, symmetric keys are only 128 or 256 bits long and can easily be encrypted using a public key. Consequently, most data encryption systems use both symmetric and asymmetric encryption in the following sort of scheme: The user generates an asymmetric key pair for the chosen cipher, such as RSA or ECC. The private key portion of this is encrypted so the user must supply their account credential to use it. In this context, the private key is the key encryption key (KEK). The system generates a symmetric secret key for the chosen cipher, such as AES256 or AES512. This is referred to as a file or media or data encryption key (DEK). This key is used to encrypt the target data. The data encryption key is then encrypted using the public key portion of the KEK. To access encrypted data, the user must supply a password or start an authenticated session to use their private key to decrypt the secret key, which can then decrypt the data. Disk and File Encryption Data at rest encompasses a great many storage mechanisms. These can be thought of in terms of encryption levels. Lower levels, such as encrypting a whole disk, have the advantage of simplicity but can be complex to manage when multiple users need to access the data. Higher levels, such as applying encryption via the file system or a database management system, can be combined with granular access controls. Type Description Full-disk and partition encryption Full-disk encryption (FDE) refers to a product that encrypts the whole contents of a storage device, including metadata areas not normally accessible using ordinary OS file explorer tools. FDE also encrypts free space areas. FDE primarily protects against physical theft of the disk. A stolen disk can be mounted on any computer, and the threat actor can take ownership of all the data files. This is not possible if the disk is encrypted because it must be unlocked by the user's credentials to access the decryption key. Many storage devices can perform self-encryption using a cryptographic product built into the disk firmware. A self-encrypting drive (SED) could be a hard disk drive (HDD), solid-state drive (SSD), or USB flash drive. The disk firmware implements a cryptoprocessor to store the keys so they are not directly exposed to the OS that mounts the disk. An HDD or SSD can be divided into separate logical areas called partitions. Each partition can be formatted with a different file system and mounted as a drive or volume in the OS. Some disk encryption products might be able to encrypt these partitions selectively rather than the whole disk. The partitions could be encrypted using different keys. For example, a disk could contain boot, system, and data partitions. The boot and system partitions could be left unencrypted as they contain only standard OS files, while the data partition is protected by encryption. Volume and file encryption A volume is any storage resource with a single file system. Put another way, a volume is how the OS \"sees\" a storage resource. The technology underlying the volume might be a removable disk or a partition on an HDD or SSD. It could also be a RAID array. Consequently, a volume encryption product is likely to refer to one that is implemented as a software application rather than by disk firmware. For example, while they might loosely be referred to as \"disk encryption,\" Microsoft's BitLocker and Apple's FileVault products perform volume encryption. A volume encryption product may or may not encrypt free space and/or file metadata. A file encryption product is software that applies encryption to individual files (or perhaps to folders/directories). This might depend on file system support. For example, Microsoft's Encrypting File System (EFS) requires that the volume be formatted with NTFS. Metadata can include a list of files, the file owner, and created/last modified dates. Free or unallocated space can contain data remnants, where a file has been marked as deleted, but the data has not actually been erased from the storage medium. If the device has a TPM or an HSM compatible with the encryption product, the disk/volume/file system can be locked by keys stored in the TPM or HSM. Database encryption A structured database stores data in tables. Each table is composed of column fields with a given data type. Records are stored as rows in the table with a value entered for each field. The table data is ultimately stored as files on a volume, but access is designed to be mediated through a database management system (DBMS) running a database language such as Structured Query Language (SQL). Typically, the database is hosted on a server and accessed by client applications. The underlying files could be protected by a disk or volume encryption product running on the server. This will typically have an adverse impact on performance, so encryption is more commonly implemented by the DBMS or by a plug-in. Encryption can be applied at different granular levels. While each DBMS supports different features, the following encryption options, based on Microsoft's SQL Server DBMS, are typical. Database-level encryption\tDatabase- or page-level encryption and decryption occurs when any data is transferred between disk and memory. This is referred to as transparent data encryption (TDE) in SQL Server. A page is the means by which the database engine returns the data requested by a query from the underlying storage files. This type of encryption means that all the records are encrypted while stored on disk, protecting against theft of the underlying media. It also encrypts logs generated by the database. Record-level encryption Many databases contain secrets that should not be known by the database administrator. Public key encryption can solve this problem by storing the private key used to unlock the value of a cell outside of the database. Cell/column encryption is applied to one or more fields within a table. This can have less of a performance impact than database-level encryption, but the administrator needs to identify which fields need protection. It can also complicate client access to the data. The encryption/decryption mechanism can work in several ways, but with SQL Server's Always Encrypted feature, the data remains encrypted when loaded into memory. It is only decrypted when the client application supplies the key. The plaintext key is not available to the DBMS, so the database administrator cannot decrypt the data. This allows for the separation of duties between the database administrator and the data owner, which is important for privacy. Some solutions may additionally support record-level encryption. For example, a health insurer's database might store protected health information about its customers. Each customer could be identified by a separate key pair. This key pair would be used to encrypt data at a row/record level. The table contains records separately protected by different keys. This allows fine-grained control over how data can be accessed to meet compliance requirements for security and privacy. Transport Encryption and Key Exchange Transport/communication encryption protects data in motion. Various transport encryption products have been developed for different networking solutions. Some examples include the following: Wi-Fi Protected Access (WPA) secures traffic sent over a wireless network. Internet Protocol Security (IPsec) secures traffic sent between two endpoints over a public or untrusted transport network. This is referred to as virtual private networking (VPN). Transport Layer Security (TLS) secures application data, such as web or email data, sent over a public or untrusted network. As with data-at-rest, an asymmetric cipher is not typically used to encrypt the network data directly because it is too inefficient. Transport encryption products use a system of key exchange. This allows the sender and recipient to exchange a symmetric encryption key securely by using public key cryptography: Alice obtains a copy of Bob's RSA or ECC public key, typically via Bob's digital certificate. Alice encrypts their message using a secret key cipher, such as AES. In this context, the secret key is referred to as a session key. Alice encrypts the session key with Bob's public key. Alice attaches the encrypted session key to the ciphertext message in a digital envelope and sends it to Bob. Bob uses their private key to decrypt the session key. Bob uses the session key to decrypt the ciphertext message. Key exchange using a digital envelope Images © 123RF.com Description Transport encryption also uses cryptography to ensure the integrity and authenticity of messages so that the recipient can verify that they were not modified by someone other than the sender. Integrity and authenticity checking can use a hash-based Message Authentication Code (HMAC). An HMAC combines the secret key derived during a key exchange with a hash of the message. Alternatively, the symmetric cipher might be designed to perform Authenticated Encryption (AE). This type of symmetric cipher mode of operation ensures confidentiality and integrity/authenticity. Encrypting File System (EFS) The Encrypting File System (EFS) was introduced with NTFS version 3 and has been included in every version of Windows since Windows 2000 except for the Home editions. EFS provides an easy and seamless way for users to encrypt files on their Windows computers. EFS is only used to encrypt individual files and folders. EFS combines the speed of symmetric encryption with the convenience of asymmetric encryption using a process called key encapsulation. The process for a user to encrypt a file is as follows: The user accesses Properties and, from the General tab, clicks Advanced. From there, the user selects Encrypt contents to secure data. Windows generates a pseudo-random number called the file encryption key (FEK). Windows uses the FEK with the AES encryption algorithm to encrypt the file. The FEK is then encrypted using the user’s public key. The encrypted FEK is stored in the file’s header in a special location called the Data Decryption Field (DDF). The decryption process is the opposite. The user’s private key is used first to unlock the DDF and get the FEK. The FEK is then used to decrypt the file. The encryption and decryption process relies on the user's password being kept safe. If the user account becomes corrupted or the password is forgotten, any encrypted files are lost. To help remedy this, a data recovery agent (DRA) can be set up. The DRA is simply another account that can decrypt the encrypted files. The DRA used to be automatically configured as the system administrator in older versions of Windows. Nowadays, it is no longer automatically set up. A local DRA for an individual workstation can be configured through the machine's Group Policy settings. A domain-wide DRA can be configured in Active Directory. Only a domain administrator can set up a domain-wide DRA. Decryption keys can be backed up to an external USB drive. This ensures access even if the Windows system completely crashes. A file is automatically unencrypted when moved or copied to a non-NTFS formatted device or media. A file is also automatically unencrypted when you copy a file over the network using the SMB Protocol. Key security relies on the user having a strong password and following proper password security protocols. PGP and GPG GNU Privacy Guard (GPG) is an encryption tool that encrypts emails, digitally signs emails, and encrypts documents. GPG is an implementation of the Pretty Good Privacy (PGP) Protocol. PGP is a commercial product now owned by Symantec and makes products that can be used to protect laptops, desktops, USB drives, optical media, and smartphones. Follow the OpenPGP standard (RFC 4880) for encrypting and decrypting data. GPG/PGP generates a random symmetric key to encrypt the message. The symmetric key is then encrypted using the receiver's public key and sent along with the message. When the recipient receives a message, GPG/PGP first decrypts the symmetric key with the recipient's private key. The decrypted symmetric key is then used to decrypt the rest of the message. GPG supports many common algorithms, including RSA, DSA, 3DES, IDEA, MD5, SHA, and more. AES is used by default. PGP can use either RSA or the Diffie-Hellman algorithm for asymmetric encryption and IDEA for symmetric encryption. BitLocker Full disk encryption (FDE) means that the entire contents of the drive (or volume), including system files and folders, are encrypted. OS ACL-based security measures are quite simple to circumvent if an adversary can attach the drive to a different host OS. Drive encryption allays this security concern by making the contents of the drive accessible only in combination with the correct encryption key. Disk encryption can be applied to hard disk drives (HDDs) and solid state drives (SSDs). FDE requires the secure storage of the key used to encrypt the drive contents. Normally, this is stored in a Trusted Platform Module (TPM). The TPM chip has a secure storage area with a disk encryption program, such as Windows BitLocker, to which it can write its keys. It is also possible to use a removable USB drive (if USB is a boot device option). As part of the setup process, you create a recovery password or key. This can be used if the disk is moved to another computer or the TPM is damaged. Activating BitLocker drive encryption Screenshot used with permission from Microsoft Description One of the drawbacks of FDE is that because the OS performs the cryptographic operations, performance is reduced. This issue is mitigated by self-encrypting drives (SED), where the cryptographic operations are performed by the drive controller. The SED uses a symmetric data/media encryption key (DEK/MEK) for bulk encryption. It stores the DEK securely by encrypting it with an asymmetric key pair called the authentication key (AK) or key encryption key (KEK). The use of the AK is authenticated by the user password. This means that the user password can be changed without having to decrypt and re-encrypt the drive. Early types of SEDs used proprietary mechanisms, but many vendors now develop using the Opal Storage Specification, developed by the Trusted Computing Group (TCG).",
  "chunks": [
    {
      "chunk_id": "3.4.9_chunk_1",
      "content": "Security Pro 8.0",
      "summary": "File encryption is a critical security control that protects data confidentiality by converting plaintext files into unreadable ciphertext using cryptographic algorithms and keys. This fundamental security mechanism prevents unauthorized access to sensitive information both at rest and in transit, serving as a primary defense against data breaches and compliance violations. Proper implementation of file encryption requires understanding of encryption standards, key management practices, and integration with organizational security policies.",
      "metadata": {
        "chapter_num": "3",
        "section_num": "3.4.9",
        "title": "File Encryption Facts",
        "content_type": "text",
        "filename": "3.4.9_File_Encryption_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.4.9_File_Encryption_Facts_[text].txt",
        "word_count": 2684,
        "has_content": true
      },
      "section_header": "Introduction",
      "timestamp_range": null
    },
    {
      "chunk_id": "3.4.9_chunk_2",
      "content": "Encryption of files, directories, and hard drives provides an additional level of data security. File encryption is part of a layered defense strategy and helps to protect confidential data in the event that system data is hacked, lost, or stolen. There are different methods that can be used to encrypt data or entire hard drives.",
      "summary": "File encryption provides critical data protection by securing files, directories, and entire hard drives as part of a comprehensive layered defense strategy. This security control protects confidential data from unauthorized access when systems are compromised, lost, or stolen through various encryption methods applied at different storage levels.",
      "metadata": {
        "chapter_num": "3",
        "section_num": "3.4.9",
        "title": "File Encryption Facts",
        "content_type": "text",
        "filename": "3.4.9_File_Encryption_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.4.9_File_Encryption_Facts_[text].txt",
        "word_count": 2684,
        "has_content": true
      },
      "section_header": "3.4.9 File Encryption Facts",
      "timestamp_range": null
    },
    {
      "chunk_id": "3.4.9_chunk_3",
      "content": "Encryption supporting confidentiality Disk and file encryption Transport encryption and key exchange Encrypting File System (EFS) PGP and GPG BitLocker Encryption Supporting Confidentiality If data is encrypted, it does not matter if the disk storing the information is stolen or if it can be intercepted when transferred over a network because the threat actor will not be able to understand or change what has been stolen. This use of encryption fulfills the goal of confidentiality. When deploying a cryptographic system to protect data assets, consideration must be given to how information could potentially be intercepted. Data can be described as being in one of three states: Data at rest - is the state when the data is in some sort of persistent storage media. Data in transit (or data in motion) - is the state when data is transmitted over a network. Data in use (or data in processing) - is the state when data is present in volatile memory, such as system RAM or CPU registers and cache. Encrypting megabytes or gigabytes of data is referred to as bulk encryption. Asymmetric encryption and private/public key pairs are not often used for bulk encryption because an asymmetric algorithm cannot process large amounts of data efficiently. The computational overhead is too high when using this type of algorithm to encrypt the contents of a disk or series of network packets. Therefore, bulk data encryption uses a symmetric cipher, such as AES. A symmetric cipher can encrypt and decrypt data files and streams of network traffic quickly. The problem is that distributing a symmetric key is challenging. The more people who know the key value, the weaker the confidentiality property is. Luckily, symmetric keys are only 128 or 256 bits long and can easily be encrypted using a public key. Consequently, most data encryption systems use both symmetric and asymmetric encryption in the following sort of scheme: The user generates an asymmetric key pair for the chosen cipher, such as RSA or ECC. The private key portion of this is encrypted so the user must supply their account credential to use it. In this context, the private key is the key encryption key (KEK). The system generates a symmetric secret key for the chosen cipher, such as AES256 or AES512. This is referred to as a file or media or data encryption key (DEK). This key is used to encrypt the target data. The data encryption key is then encrypted using the public key portion of the KEK. To access encrypted data, the user must supply a password or start an authenticated session to use their private key to decrypt the secret key, which can then decrypt the data. Disk and File Encryption Data at rest encompasses a great many storage mechanisms. These can be thought of in terms of encryption levels. Lower levels, such as encrypting a whole disk, have the advantage of simplicity but can be complex to manage when multiple users need to access the data. Higher levels, such as applying encryption via the file system or a database management system, can be combined with granular access controls. Type Description Full-disk and partition encryption Full-disk encryption (FDE) refers to a product that encrypts the whole contents of a storage device, including metadata areas not normally accessible using ordinary OS file explorer tools. FDE also encrypts free space areas. FDE primarily protects against physical theft of the disk. A stolen disk can be mounted on any computer, and the threat actor can take ownership of all the data files. This is not possible if the disk is encrypted because it must be unlocked by the user's credentials to access the decryption key. Many storage devices can perform self-encryption using a cryptographic product built into the disk firmware. A self-encrypting drive (SED) could be a hard disk drive (HDD), solid-state drive (SSD), or USB flash drive. The disk firmware implements a cryptoprocessor to store the keys so they are not directly exposed to the OS that mounts the disk. An HDD or SSD can be divided into separate logical areas called partitions. Each partition can be formatted with a different file system and mounted as a drive or volume in the OS. Some disk encryption products might be able to encrypt these partitions selectively rather than the whole disk. The partitions could be encrypted using different keys. For example, a disk could contain boot, system, and data partitions. The boot and system partitions could be left unencrypted as they contain only standard OS files, while the data partition is protected by encryption. Volume and file encryption A volume is any storage resource with a single file system. Put another way, a volume is how the OS \"sees\" a storage resource. The technology underlying the volume might be a removable disk or a partition on an HDD or SSD. It could also be a RAID array. Consequently, a volume encryption product is likely to refer to one that is implemented as a software application rather than by disk firmware. For example, while they might loosely be referred to as \"disk encryption,\" Microsoft's BitLocker and Apple's FileVault products perform volume encryption. A volume encryption product may or may not encrypt free space and/or file metadata. A file encryption product is software that applies encryption to individual files (or perhaps to folders/directories). This might depend on file system support. For example, Microsoft's Encrypting File System (EFS) requires that the volume be formatted with NTFS. Metadata can include a list of files, the file owner, and created/last modified dates. Free or unallocated space can contain data remnants, where a file has been marked as deleted, but the data has not actually been erased from the storage medium. If the device has a TPM or an HSM compatible with the encryption product, the disk/volume/file system can be locked by keys stored in the TPM or HSM. Database encryption A structured database stores data in tables. Each table is composed of column fields with a given data type. Records are stored as rows in the table with a value entered for each field. The table data is ultimately stored as files on a volume, but access is designed to be mediated through a database management system (DBMS) running a database language such as Structured Query Language (SQL). Typically, the database is hosted on a server and accessed by client applications. The underlying files could be protected by a disk or volume encryption product running on the server. This will typically have an adverse impact on performance, so encryption is more commonly implemented by the DBMS or by a plug-in. Encryption can be applied at different granular levels. While each DBMS supports different features, the following encryption options, based on Microsoft's SQL Server DBMS, are typical. Database-level encryption\tDatabase- or page-level encryption and decryption occurs when any data is transferred between disk and memory. This is referred to as transparent data encryption (TDE) in SQL Server. A page is the means by which the database engine returns the data requested by a query from the underlying storage files. This type of encryption means that all the records are encrypted while stored on disk, protecting against theft of the underlying media. It also encrypts logs generated by the database. Record-level encryption Many databases contain secrets that should not be known by the database administrator. Public key encryption can solve this problem by storing the private key used to unlock the value of a cell outside of the database. Cell/column encryption is applied to one or more fields within a table. This can have less of a performance impact than database-level encryption, but the administrator needs to identify which fields need protection. It can also complicate client access to the data. The encryption/decryption mechanism can work in several ways, but with SQL Server's Always Encrypted feature, the data remains encrypted when loaded into memory. It is only decrypted when the client application supplies the key. The plaintext key is not available to the DBMS, so the database administrator cannot decrypt the data. This allows for the separation of duties between the database administrator and the data owner, which is important for privacy. Some solutions may additionally support record-level encryption. For example, a health insurer's database might store protected health information about its customers. Each customer could be identified by a separate key pair. This key pair would be used to encrypt data at a row/record level. The table contains records separately protected by different keys. This allows fine-grained control over how data can be accessed to meet compliance requirements for security and privacy. Transport Encryption and Key Exchange Transport/communication encryption protects data in motion. Various transport encryption products have been developed for different networking solutions. Some examples include the following: Wi-Fi Protected Access (WPA) secures traffic sent over a wireless network. Internet Protocol Security (IPsec) secures traffic sent between two endpoints over a public or untrusted transport network. This is referred to as virtual private networking (VPN). Transport Layer Security (TLS) secures application data, such as web or email data, sent over a public or untrusted network. As with data-at-rest, an asymmetric cipher is not typically used to encrypt the network data directly because it is too inefficient. Transport encryption products use a system of key exchange. This allows the sender and recipient to exchange a symmetric encryption key securely by using public key cryptography: Alice obtains a copy of Bob's RSA or ECC public key, typically via Bob's digital certificate. Alice encrypts their message using a secret key cipher, such as AES. In this context, the secret key is referred to as a session key. Alice encrypts the session key with Bob's public key. Alice attaches the encrypted session key to the ciphertext message in a digital envelope and sends it to Bob. Bob uses their private key to decrypt the session key. Bob uses the session key to decrypt the ciphertext message. Key exchange using a digital envelope Images © 123RF.com Description Transport encryption also uses cryptography to ensure the integrity and authenticity of messages so that the recipient can verify that they were not modified by someone other than the sender. Integrity and authenticity checking can use a hash-based Message Authentication Code (HMAC). An HMAC combines the secret key derived during a key exchange with a hash of the message. Alternatively, the symmetric cipher might be designed to perform Authenticated Encryption (AE). This type of symmetric cipher mode of operation ensures confidentiality and integrity/authenticity. Encrypting File System (EFS) The Encrypting File System (EFS) was introduced with NTFS version 3 and has been included in every version of Windows since Windows 2000 except for the Home editions. EFS provides an easy and seamless way for users to encrypt files on their Windows computers. EFS is only used to encrypt individual files and folders. EFS combines the speed of symmetric encryption with the convenience of asymmetric encryption using a process called key encapsulation. The process for a user to encrypt a file is as follows: The user accesses Properties and, from the General tab, clicks Advanced. From there, the user selects Encrypt contents to secure data. Windows generates a pseudo-random number called the file encryption key (FEK). Windows uses the FEK with the AES encryption algorithm to encrypt the file. The FEK is then encrypted using the user’s public key. The encrypted FEK is stored in the file’s header in a special location called the Data Decryption Field (DDF). The decryption process is the opposite. The user’s private key is used first to unlock the DDF and get the FEK. The FEK is then used to decrypt the file. The encryption and decryption process relies on the user's password being kept safe. If the user account becomes corrupted or the password is forgotten, any encrypted files are lost. To help remedy this, a data recovery agent (DRA) can be set up. The DRA is simply another account that can decrypt the encrypted files. The DRA used to be automatically configured as the system administrator in older versions of Windows. Nowadays, it is no longer automatically set up. A local DRA for an individual workstation can be configured through the machine's Group Policy settings. A domain-wide DRA can be configured in Active Directory. Only a domain administrator can set up a domain-wide DRA.",
      "summary": "File encryption protects data confidentiality across three states: data at rest (storage), data in transit (network transmission), and data in use (active memory processing). Most encryption systems combine symmetric ciphers like AES for bulk data encryption with asymmetric encryption for secure key distribution, implementing solutions ranging from full-disk encryption (FDE) and BitLocker for complete storage protection to file-level systems like Windows EFS for granular access control. Transport encryption protocols including TLS, IPsec VPN, and WPA use key exchange mechanisms with digital envelopes to establish secure communication channels while maintaining message integrity through HMAC authentication.",
      "metadata": {
        "chapter_num": "3",
        "section_num": "3.4.9",
        "title": "File Encryption Facts",
        "content_type": "text",
        "filename": "3.4.9_File_Encryption_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.4.9_File_Encryption_Facts_[text].txt",
        "word_count": 2684,
        "has_content": true
      },
      "section_header": "This lesson covers the following topics:",
      "timestamp_range": null
    },
    {
      "chunk_id": "3.4.9_chunk_4",
      "content": "Decryption keys can be backed up to an external USB drive. This ensures access even if the Windows system completely crashes. A file is automatically unencrypted when moved or copied to a non-NTFS formatted device or media. A file is also automatically unencrypted when you copy a file over the network using the SMB Protocol. Key security relies on the user having a strong password and following proper password security protocols. PGP and GPG GNU Privacy Guard (GPG) is an encryption tool that encrypts emails, digitally signs emails, and encrypts documents. GPG is an implementation of the Pretty Good Privacy (PGP) Protocol. PGP is a commercial product now owned by Symantec and makes products that can be used to protect laptops, desktops, USB drives, optical media, and smartphones.",
      "summary": "File encryption security requires backing up decryption keys to external storage and implementing strong password protocols, as files automatically decrypt when moved to non-NTFS devices or transmitted via SMB protocol over networks. PGP (Pretty Good Privacy) and its open-source implementation GPG (GNU Privacy Guard) provide comprehensive encryption solutions for emails, documents, and various devices including laptops, desktops, and mobile storage media.",
      "metadata": {
        "chapter_num": "3",
        "section_num": "3.4.9",
        "title": "File Encryption Facts",
        "content_type": "text",
        "filename": "3.4.9_File_Encryption_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.4.9_File_Encryption_Facts_[text].txt",
        "word_count": 2684,
        "has_content": true
      },
      "section_header": "Additional security considerations are:",
      "timestamp_range": null
    },
    {
      "chunk_id": "3.4.9_chunk_5",
      "content": "Follow the OpenPGP standard (RFC 4880) for encrypting and decrypting data.",
      "summary": "PGP (Pretty Good Privacy) and GPG (GNU Privacy Guard) are encryption tools that both implement the OpenPGP standard defined in RFC 4880 for encrypting and decrypting data. This standardization ensures interoperability between different OpenPGP implementations, allowing encrypted files created with one tool to be decrypted by the other. Both solutions provide robust file-level encryption capabilities essential for protecting sensitive data at rest and in transit.",
      "metadata": {
        "chapter_num": "3",
        "section_num": "3.4.9",
        "title": "File Encryption Facts",
        "content_type": "text",
        "filename": "3.4.9_File_Encryption_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.4.9_File_Encryption_Facts_[text].txt",
        "word_count": 2684,
        "has_content": true
      },
      "section_header": "Both PGP and GPG do the following:",
      "timestamp_range": null
    },
    {
      "chunk_id": "3.4.9_chunk_6",
      "content": "GPG/PGP generates a random symmetric key to encrypt the message. The symmetric key is then encrypted using the receiver's public key and sent along with the message. When the recipient receives a message, GPG/PGP first decrypts the symmetric key with the recipient's private key. The decrypted symmetric key is then used to decrypt the rest of the message. GPG supports many common algorithms, including RSA, DSA, 3DES, IDEA, MD5, SHA, and more. AES is used by default. PGP can use either RSA or the Diffie-Hellman algorithm for asymmetric encryption and IDEA for symmetric encryption. BitLocker Full disk encryption (FDE) means that the entire contents of the drive (or volume), including system files and folders, are encrypted. OS ACL-based security measures are quite simple to circumvent if an adversary can attach the drive to a different host OS. Drive encryption allays this security concern by making the contents of the drive accessible only in combination with the correct encryption key. Disk encryption can be applied to hard disk drives (HDDs) and solid state drives (SSDs). FDE requires the secure storage of the key used to encrypt the drive contents. Normally, this is stored in a Trusted Platform Module (TPM). The TPM chip has a secure storage area with a disk encryption program, such as Windows BitLocker, to which it can write its keys. It is also possible to use a removable USB drive (if USB is a boot device option). As part of the setup process, you create a recovery password or key. This can be used if the disk is moved to another computer or the TPM is damaged. Activating BitLocker drive encryption Screenshot used with permission from Microsoft Description One of the drawbacks of FDE is that because the OS performs the cryptographic operations, performance is reduced. This issue is mitigated by self-encrypting drives (SED), where the cryptographic operations are performed by the drive controller. The SED uses a symmetric data/media encryption key (DEK/MEK) for bulk encryption. It stores the DEK securely by encrypting it with an asymmetric key pair called the authentication key (AK) or key encryption key (KEK). The use of the AK is authenticated by the user password. This means that the user password can be changed without having to decrypt and re-encrypt the drive. Early types of SEDs used proprietary mechanisms, but many vendors now develop using the Opal Storage Specification, developed by the Trusted Computing Group (TCG).",
      "summary": "GPG/PGP combines asymmetric and symmetric cryptography by generating a random symmetric key to encrypt messages, then encrypting that key with the recipient's public key for secure transmission and decryption using the recipient's private key. Full Disk Encryption (FDE) like BitLocker encrypts entire drive contents and requires secure key storage in a Trusted Platform Module (TPM) or USB device, with recovery keys for backup access. Self-Encrypting Drives (SED) improve performance by performing cryptographic operations at the hardware level using symmetric data encryption keys (DEK) protected by asymmetric authentication keys (AK).",
      "metadata": {
        "chapter_num": "3",
        "section_num": "3.4.9",
        "title": "File Encryption Facts",
        "content_type": "text",
        "filename": "3.4.9_File_Encryption_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.4.9_File_Encryption_Facts_[text].txt",
        "word_count": 2684,
        "has_content": true
      },
      "section_header": "Combine asymmetric and symmetric cryptography. The process is as follows:",
      "timestamp_range": null
    }
  ],
  "num_chunks": 6,
  "document_summary": "File Encryption Facts (text): 0 Encryption of files, directories, and hard drives provides an additional level of data security. Higher levels, such as applying encryption via the file system or a database management system, can be combined with granular access controls. This allows fine-grained control over how data can be accessed to meet compliance requirements for security and privacy."
}