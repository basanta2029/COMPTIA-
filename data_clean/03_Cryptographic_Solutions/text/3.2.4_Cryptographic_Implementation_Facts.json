{
  "metadata": {
    "chapter_num": "3",
    "section_num": "3.2.4",
    "title": "Cryptographic Implementation Facts",
    "content_type": "text",
    "filename": "3.2.4_Cryptographic_Implementation_Facts_[text].txt",
    "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.2.4_Cryptographic_Implementation_Facts_[text].txt",
    "word_count": 1722,
    "has_content": true
  },
  "full_content": "Security Pro 8.0 This lesson covers the following topics: Hybrid models Obfuscation Encryption with steganography Key management Secure enclaves Cryptoprocessors Hybrid Models Operating systems, applications, and other components of information systems typically use a hybrid cryptography system. A hybrid cryptography system combines the strengths of hashing, symmetric encryption, and asymmetric encryption, depending on the needs of the project or service. An example of these strengths are: Use symmetric encryption for fast and efficient encryption of bulk data. Use hashing to verify message integrity. Use asymmetric encryption for authentication and non-repudiation. Use asymmetric encryption for secure exchange of symmetric encryption keys (for example, by encrypting the key used for symmetric encryption prior to sharing the key with the recipient). Using asymmetric cryptography for encryption is best for small pieces of data. A hybrid cryptosystem combines the efficiency of symmetric methods and the convenience of asymmetric methods. One example of this is Microsoft's Encrypting File System, or EFS. Microsoft's EFS uses the following steps to encrypt data: A file is encrypted using a File Encryption Key (FEK). The FEK is encrypted with the user's public asymmetric key. The file is sent to the intended recipient. The user's private key is used to decrypt the FEK. The FEK is used to decrypt the file. One of the biggest weaknesses of the EFS is that the user's private key is essentially their user password. If the password is weak, the encryption will also be weak. Obfuscation Obfuscation is the art of making a message or data difficult to find. It is security by obscurity, which is normally deprecated. There are some uses for obfuscation technologies, however: Steganography (literally meaning \"hidden writing\") embeds information within an unexpected source, a message hidden in a picture, for instance. The container document or file is called the covertext. The message can be encrypted by some mechanism before embedding it, providing confidentiality. The technology can also provide integrity or non-repudiation; for example, it could show that something was printed on a particular device at a particular time, which could demonstrate that it was genuine or fake, depending on the context. Data masking can mean that all or part of the contents of a database field are redacted by substituting all character strings with \"x,\" for example. A field might be partially redacted to preserve metadata for analysis purposes. For example, in a telephone number, the dialing prefix might be retained, but the subscriber number is redacted. Data masking can also use techniques to preserve the original format of the field. Tokenization means that all or part of the value of a database field is replaced with a randomly generated token. The token is stored with the original value on a token server or token vault, separate from the production database. An authorized query or app can retrieve the original value from the vault if necessary, so tokenization is reversible. Tokenization is used as a substitute for encryption because, from a regulatory perspective, an encrypted field has the same value as the original data. Data masking and tokenization are used for de-identification. De-identification obfuscates personal data from databases so that it can be shared without compromising privacy. Encryption with Steganography There has been an increased amount of research done on how to best combine encryption with steganography. The process essentially follows the steps below: Encrypt plaintext with a private key to generate ciphertext. The ciphertext is hidden inside a media file, such as an image, using steganography. The recipient extracts the ciphertext and decrypts it using the matching public key. Because the ciphertext is hidden in the image file, someone intercepting the message would have to know it is there before being able to decrypt it. Key Management Key management refers to operational considerations for the various stages in a key's lifecycle. A key's lifecycle may involve the following stages: Key Generation — creates an asymmetric key pair or symmetric secret key of the required strength using the chosen cipher. Storage — prevents unauthorized access to a private or secret key and protects against loss or damage. Revocation — prevents use of the key if it is compromised. If a key is revoked, any data that was encrypted using it should be re-encrypted using a new key. Expiration and Renewal — gives the certificate a \"shelf-life,\" increasing security. Every certificate expires after a certain period. Certificates can be renewed with the same key pair or with a new key pair. A decentralized key management model means that keys are generated and managed directly on the computer or user account that will use the certificate. This does not require any special setup, so it is easy to deploy. However, it makes the detection of key compromises more difficult. Some organizations prefer to centralize key generation and storage using a tool such as a key management system. In one type of cryptographic key management system, a dedicated server or appliance is used to generate and store keys. When a device or app needs to perform a cryptographic operation, it uses the Key Management Interoperability Protocol (KMIP) to communicate with the server. Secure Enclaves A key pair or secret key can be generated and stored in the file system on a desktop or server computer running a general-purpose OS. This has a number of drawbacks, however: A cryptographic key needs to be generated using a random process. A key generation system with a high degree of disorder—or entropy—ensures that any value from the possible keyspace has the same chance of being selected as any other. Unfortunately, computer hardware and software are extremely low entropy—computers process instructions in an entirely deterministic way. A computer can use pseudo RNG (PRNG) software that is still deterministic but able to approximate a high level of disorder. Better security is obtained by true random number generator (TRNG) hardware. This uses a source of entropy, such as noise or air movement, as a nondeterministic seed for generating the key value. A key stored in the file system is only as secure as any other file. It could easily be compromised via the user credential or physical theft of the device. It is also difficult to ensure that key access is fully audited. Ideally, cryptographic storage is tamper-evident. This means that it is known immediately when a private or secret key has been compromised, and it can be revoked and any ciphertexts re-encrypted with a new key. Pseudo RNG working during key generation using GPG Description These drawbacks can be addressed using a cryptoprocessor for key generation and storage. Cryptoprocessors A cryptoprocessor performs operations such as decryption and signing on behalf of apps. This means that the key material never leaves the cryptoprocessor. Because it is dedicated to a single function, the cryptoprocessor hardware has a smaller attack surface than a general-purpose computer. Hardware security module appliance in a rack-mounted form factor Images © 123RF.com Description Cryptoprocessor Hardware Description Trusted Platform Module (TPM) A TPM is a cryptoprocessor implemented as a module within the CPU on a computer or mobile device. TPMs are produced to different version specifications, with versions 1.2 and 2.0 in current use. Version 2.0 is not backward compatible with version 1.2. Beginning with Windows 10 version 1607, Microsoft required that TPM 2.0 be enabled by default on all new computers. A TPM is required to check the integrity of startup files and components in BitLocker implementations. The TPM generates a hash of the startup files to verify the integrity of those files. Additionally, the TPM creates a hash of system components. This hash acts as a validation check of the system to ensure that system components have not changed. The hash can also be used to uniquely identify the system. Windows Credential Guard requires the computer to have a TPM chip installed. A TPM provides protection for virtual-based security encryption keys that are stored in the firmware. This helps protect against attacks involving a physically present user with BIOS access. A TPM can generate truly random numbers, thus preventing entropy. TPM provides full support for asymmetric encryption; therefore, it can generate public and private keys. A TPM also provides encrypted storage for user passwords, encryption keys, and digital certificates. Windows 10 can pull stored keys directly from the TPM without loading them into the RAM, where they would be more vulnerable to an attack. Hardware security module (HSM) An HSM is cryptoprocessor hardware implemented in a removable or dedicated form factor, including rack-mounted appliances, plug-in PCIe adapter cards, and USB-connected security keys. It is also possible to provision an HSM as a virtual appliance. Generate and store encryption keys. Generate and validate digital signatures. Generate keys used in smart cards. HSMs traditionally come in the form of a plug-in card or an external security device that can be attached directly to the computer system. These devices offer some benefits over TPM chips. HSMs are more powerful and can perform more powerful cryptographic functions quicker. HSMs can perform multiple cryptographic functions simultaneously. HSMs can be attached to a network and handle cryptographic functions for multiple users across the network. Personal Computer Security Module (PCSM) Secure Application Module (SAM) Hardware cryptographic devices Cryptographic modules Vendors can certify their products against the Federal Information Processing Standard 140 Level 2 (FIPS 140-2) to establish trust in the market. Using a cryptoprocessor means that keys are not directly accessible via the file system. The cryptoprocessor interacts with applications that need to access the key via an application programming interface (API) that implements PKCS#11. One vulnerability in this system is that decrypted data needs to be loaded into the computer's system memory (RAM) for applications to access it. This raises the potential for a malicious process to gain access to the data via some type of exploit. This vulnerability can be mitigated by implementing a secure enclave. A trusted execution environment (TEE) secure enclave, such as Intel Software Guard Extensions, can protect data stored in system memory so that an untrusted process cannot read it. A secure enclave is designed so that even processes with root or system privileges cannot access it without authorization. The enclave is locked to a list of one or more digitally signed processes.",
  "chunks": [
    {
      "chunk_id": "3.2.4_chunk_1",
      "content": "Security Pro 8.0",
      "summary": "Security Pro 8.0 covers cryptographic implementation fundamentals essential for CompTIA Security+ certification, focusing on encryption algorithms, digital signatures, and key management practices. The training material provides practical guidance on implementing cryptographic controls to protect data confidentiality, integrity, and authentication in enterprise environments. Students learn to select appropriate cryptographic solutions based on security requirements, performance considerations, and compliance standards.",
      "metadata": {
        "chapter_num": "3",
        "section_num": "3.2.4",
        "title": "Cryptographic Implementation Facts",
        "content_type": "text",
        "filename": "3.2.4_Cryptographic_Implementation_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.2.4_Cryptographic_Implementation_Facts_[text].txt",
        "word_count": 1722,
        "has_content": true
      },
      "section_header": "Introduction",
      "timestamp_range": null
    },
    {
      "chunk_id": "3.2.4_chunk_2",
      "content": "This lesson covers the following topics: Hybrid models Obfuscation Encryption with steganography Key management Secure enclaves Cryptoprocessors Hybrid Models Operating systems, applications, and other components of information systems typically use a hybrid cryptography system. A hybrid cryptography system combines the strengths of hashing, symmetric encryption, and asymmetric encryption, depending on the needs of the project or service. An example of these strengths are: Use symmetric encryption for fast and efficient encryption of bulk data. Use hashing to verify message integrity. Use asymmetric encryption for authentication and non-repudiation. Use asymmetric encryption for secure exchange of symmetric encryption keys (for example, by encrypting the key used for symmetric encryption prior to sharing the key with the recipient). Using asymmetric cryptography for encryption is best for small pieces of data. A hybrid cryptosystem combines the efficiency of symmetric methods and the convenience of asymmetric methods. One example of this is Microsoft's Encrypting File System, or EFS. Microsoft's EFS uses the following steps to encrypt data: A file is encrypted using a File Encryption Key (FEK). The FEK is encrypted with the user's public asymmetric key. The file is sent to the intended recipient. The user's private key is used to decrypt the FEK. The FEK is used to decrypt the file. One of the biggest weaknesses of the EFS is that the user's private key is essentially their user password. If the password is weak, the encryption will also be weak. Obfuscation Obfuscation is the art of making a message or data difficult to find. It is security by obscurity, which is normally deprecated. There are some uses for obfuscation technologies, however: Steganography (literally meaning \"hidden writing\") embeds information within an unexpected source, a message hidden in a picture, for instance. The container document or file is called the covertext. The message can be encrypted by some mechanism before embedding it, providing confidentiality. The technology can also provide integrity or non-repudiation; for example, it could show that something was printed on a particular device at a particular time, which could demonstrate that it was genuine or fake, depending on the context. Data masking can mean that all or part of the contents of a database field are redacted by substituting all character strings with \"x,\" for example. A field might be partially redacted to preserve metadata for analysis purposes. For example, in a telephone number, the dialing prefix might be retained, but the subscriber number is redacted. Data masking can also use techniques to preserve the original format of the field. Tokenization means that all or part of the value of a database field is replaced with a randomly generated token. The token is stored with the original value on a token server or token vault, separate from the production database. An authorized query or app can retrieve the original value from the vault if necessary, so tokenization is reversible. Tokenization is used as a substitute for encryption because, from a regulatory perspective, an encrypted field has the same value as the original data. Data masking and tokenization are used for de-identification. De-identification obfuscates personal data from databases so that it can be shared without compromising privacy. Encryption with Steganography There has been an increased amount of research done on how to best combine encryption with steganography. The process essentially follows the steps below: Encrypt plaintext with a private key to generate ciphertext. The ciphertext is hidden inside a media file, such as an image, using steganography. The recipient extracts the ciphertext and decrypts it using the matching public key. Because the ciphertext is hidden in the image file, someone intercepting the message would have to know it is there before being able to decrypt it. Key Management Key management refers to operational considerations for the various stages in a key's lifecycle. A key's lifecycle may involve the following stages: Key Generation — creates an asymmetric key pair or symmetric secret key of the required strength using the chosen cipher. Storage — prevents unauthorized access to a private or secret key and protects against loss or damage. Revocation — prevents use of the key if it is compromised. If a key is revoked, any data that was encrypted using it should be re-encrypted using a new key. Expiration and Renewal — gives the certificate a \"shelf-life,\" increasing security. Every certificate expires after a certain period. Certificates can be renewed with the same key pair or with a new key pair. A decentralized key management model means that keys are generated and managed directly on the computer or user account that will use the certificate. This does not require any special setup, so it is easy to deploy. However, it makes the detection of key compromises more difficult. Some organizations prefer to centralize key generation and storage using a tool such as a key management system. In one type of cryptographic key management system, a dedicated server or appliance is used to generate and store keys. When a device or app needs to perform a cryptographic operation, it uses the Key Management Interoperability Protocol (KMIP) to communicate with the server. Secure Enclaves A key pair or secret key can be generated and stored in the file system on a desktop or server computer running a general-purpose OS. This has a number of drawbacks, however: A cryptographic key needs to be generated using a random process. A key generation system with a high degree of disorder—or entropy—ensures that any value from the possible keyspace has the same chance of being selected as any other. Unfortunately, computer hardware and software are extremely low entropy—computers process instructions in an entirely deterministic way. A computer can use pseudo RNG (PRNG) software that is still deterministic but able to approximate a high level of disorder. Better security is obtained by true random number generator (TRNG) hardware. This uses a source of entropy, such as noise or air movement, as a nondeterministic seed for generating the key value. A key stored in the file system is only as secure as any other file. It could easily be compromised via the user credential or physical theft of the device. It is also difficult to ensure that key access is fully audited. Ideally, cryptographic storage is tamper-evident. This means that it is known immediately when a private or secret key has been compromised, and it can be revoked and any ciphertexts re-encrypted with a new key. Pseudo RNG working during key generation using GPG Description These drawbacks can be addressed using a cryptoprocessor for key generation and storage. Cryptoprocessors A cryptoprocessor performs operations such as decryption and signing on behalf of apps. This means that the key material never leaves the cryptoprocessor. Because it is dedicated to a single function, the cryptoprocessor hardware has a smaller attack surface than a general-purpose computer. Hardware security module appliance in a rack-mounted form factor Images © 123RF.com Description",
      "summary": "Hybrid cryptography systems combine symmetric encryption for bulk data, asymmetric encryption for authentication and key exchange, and hashing for integrity verification to optimize both security and performance. Key management encompasses the complete lifecycle from generation through storage, revocation, and renewal, with secure enclaves and cryptoprocessors providing tamper-evident hardware-based protection that keeps cryptographic material isolated from general-purpose operating systems. Obfuscation techniques including steganography, data masking, and tokenization provide additional security layers by hiding sensitive information within unexpected sources or replacing it with non-sensitive tokens.",
      "metadata": {
        "chapter_num": "3",
        "section_num": "3.2.4",
        "title": "Cryptographic Implementation Facts",
        "content_type": "text",
        "filename": "3.2.4_Cryptographic_Implementation_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.2.4_Cryptographic_Implementation_Facts_[text].txt",
        "word_count": 1722,
        "has_content": true
      },
      "section_header": "3.2.4 Cryptographic Implementation Facts",
      "timestamp_range": null
    },
    {
      "chunk_id": "3.2.4_chunk_3",
      "content": "Cryptoprocessor Hardware Description Trusted Platform Module (TPM) A TPM is a cryptoprocessor implemented as a module within the CPU on a computer or mobile device. TPMs are produced to different version specifications, with versions 1.2 and 2.0 in current use. Version 2.0 is not backward compatible with version 1.2. Beginning with Windows 10 version 1607, Microsoft required that TPM 2.0 be enabled by default on all new computers. A TPM is required to check the integrity of startup files and components in BitLocker implementations. The TPM generates a hash of the startup files to verify the integrity of those files. Additionally, the TPM creates a hash of system components. This hash acts as a validation check of the system to ensure that system components have not changed. The hash can also be used to uniquely identify the system. Windows Credential Guard requires the computer to have a TPM chip installed. A TPM provides protection for virtual-based security encryption keys that are stored in the firmware. This helps protect against attacks involving a physically present user with BIOS access. A TPM can generate truly random numbers, thus preventing entropy. TPM provides full support for asymmetric encryption; therefore, it can generate public and private keys. A TPM also provides encrypted storage for user passwords, encryption keys, and digital certificates. Windows 10 can pull stored keys directly from the TPM without loading them into the RAM, where they would be more vulnerable to an attack. Hardware security module (HSM) An HSM is cryptoprocessor hardware implemented in a removable or dedicated form factor, including rack-mounted appliances, plug-in PCIe adapter cards, and USB-connected security keys. It is also possible to provision an HSM as a virtual appliance.",
      "summary": "Cryptoprocessor hardware provides secure cryptographic operations through two main implementations: Trusted Platform Module (TPM) chips integrated into CPUs that generate encryption keys, verify system integrity through hashing, and provide encrypted storage for credentials, with TPM 2.0 required by Windows 10 for BitLocker and Credential Guard functionality. Hardware Security Modules (HSMs) are dedicated cryptoprocessors available as removable devices, rack-mounted appliances, or PCIe cards that offer enterprise-grade cryptographic processing and secure key storage separate from the main system.",
      "metadata": {
        "chapter_num": "3",
        "section_num": "3.2.4",
        "title": "Cryptographic Implementation Facts",
        "content_type": "text",
        "filename": "3.2.4_Cryptographic_Implementation_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.2.4_Cryptographic_Implementation_Facts_[text].txt",
        "word_count": 1722,
        "has_content": true
      },
      "section_header": "There are two main ways of implementing cryptoprocessor hardware:",
      "timestamp_range": null
    },
    {
      "chunk_id": "3.2.4_chunk_4",
      "content": "Generate and store encryption keys. Generate and validate digital signatures. Generate keys used in smart cards. HSMs traditionally come in the form of a plug-in card or an external security device that can be attached directly to the computer system. These devices offer some benefits over TPM chips. HSMs are more powerful and can perform more powerful cryptographic functions quicker. HSMs can perform multiple cryptographic functions simultaneously. HSMs can be attached to a network and handle cryptographic functions for multiple users across the network.",
      "summary": "Hardware Security Modules (HSMs) are dedicated cryptographic devices that generate and store encryption keys, create digital signatures, and manage smart card keys with superior performance compared to TPM chips. HSMs can be deployed as plug-in cards or external network-attached devices that simultaneously handle multiple cryptographic operations for multiple users across an enterprise network. These specialized security devices provide faster, more powerful cryptographic processing capabilities essential for enterprise-level key management and digital signature validation.",
      "metadata": {
        "chapter_num": "3",
        "section_num": "3.2.4",
        "title": "Cryptographic Implementation Facts",
        "content_type": "text",
        "filename": "3.2.4_Cryptographic_Implementation_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.2.4_Cryptographic_Implementation_Facts_[text].txt",
        "word_count": 1722,
        "has_content": true
      },
      "section_header": "HSMs provide cryptographic functions such as:",
      "timestamp_range": null
    },
    {
      "chunk_id": "3.2.4_chunk_5",
      "content": "Personal Computer Security Module (PCSM) Secure Application Module (SAM) Hardware cryptographic devices Cryptographic modules Vendors can certify their products against the Federal Information Processing Standard 140 Level 2 (FIPS 140-2) to establish trust in the market. Using a cryptoprocessor means that keys are not directly accessible via the file system. The cryptoprocessor interacts with applications that need to access the key via an application programming interface (API) that implements PKCS#11. One vulnerability in this system is that decrypted data needs to be loaded into the computer's system memory (RAM) for applications to access it. This raises the potential for a malicious process to gain access to the data via some type of exploit. This vulnerability can be mitigated by implementing a secure enclave. A trusted execution environment (TEE) secure enclave, such as Intel Software Guard Extensions, can protect data stored in system memory so that an untrusted process cannot read it. A secure enclave is designed so that even processes with root or system privileges cannot access it without authorization. The enclave is locked to a list of one or more digitally signed processes.",
      "summary": "Hardware Security Modules (HSMs), also known as Personal Computer Security Modules (PCSM), Secure Application Modules (SAM), or cryptographic modules, are hardware cryptographic devices that protect encryption keys by making them inaccessible via the file system and using PKCS#11 API for application interaction. While HSMs prevent direct key access, decrypted data in system RAM remains vulnerable to malicious processes, which can be mitigated using trusted execution environments (TEE) like Intel Software Guard Extensions that create secure enclaves accessible only to authorized, digitally signed processes. FIPS 140-2 Level 2 certification provides market trust validation for HSM products.",
      "metadata": {
        "chapter_num": "3",
        "section_num": "3.2.4",
        "title": "Cryptographic Implementation Facts",
        "content_type": "text",
        "filename": "3.2.4_Cryptographic_Implementation_Facts_[text].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.2.4_Cryptographic_Implementation_Facts_[text].txt",
        "word_count": 1722,
        "has_content": true
      },
      "section_header": "Hardware Security Modules are also known as:",
      "timestamp_range": null
    }
  ],
  "num_chunks": 5,
  "document_summary": "Cryptographic Implementation Facts (text): Tokenization means that all or part of the value of a database field is replaced with a randomly generated token. A TPM provides protection for virtual-based security encryption keys that are stored in the firmware. One vulnerability in this system is that decrypted data needs to be loaded into the computer's system memory (RAM) for applications to access it."
}