{
  "metadata": {
    "chapter_num": "3",
    "section_num": "3.4.5",
    "title": "Encrypting Files with GPG",
    "content_type": "video",
    "filename": "3.4.5_Encrypting_Files_with_GPG_[video].txt",
    "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.4.5_Encrypting_Files_with_GPG_[video].txt",
    "word_count": 549,
    "has_content": true
  },
  "full_content": "In this demonstration, we're going to review how to encrypt files on a Linux system using GPG. The GPG utility is the open-source equivalent of the PGP utility. First, we need to verify that GPG's installed on the system, so we're going to type ‘gpg –version'. As you can see here, it'll show us the version information. It wouldn't show this if GPG wasn't installed. Most Linux distributions should have this installed by default. It's currently installed on the system. Let's go ahead and clear our screen. Now we need to generate a key pair. To do that, we're going to type ‘gpg --gen-key'. If you want to have more customization, you can use the full-featured key generation dialog as listed. It wants to know the real name. We're just going to put our username in this field, rmckay. Our email address is rmckay@testout.com. This last menu wants us to verify the information. We'll okay it. Another dialog box will come up asking us to enter a passphrase. For this demo, I'm just going to use the word ‘TestOut'. This gives us a warning, saying it's an unsecure passphrase. Normally, you would make this password more secure, but for now, we're going to leave it as-is. We'll re-enter the same passphrase. Now our public and secret keys are created. We're going to encrypt an example file in our Home directory. It's called example.txt. We can see this by doing an ‘ll' to list the directory. Now we want to go ahead and encrypt our file using GPG. You don't have to specify the entire directory path of the file if you're in the directory where the file exists. To encrypt, we're going to type in ‘gpg -e example.txt' and then the name that we created, ‘rmckay'. Then we're going to click Enter twice, as there's no more information we need to add. Now, if we type ‘ll' and look, we can see the original example.txt, and we can see the encrypted version of example.txt.gpg. If we use the CAT command to view this encrypted version of the file, you can see that it's all scrambled. Clearly, we can't read the file or tell what it says. At this point, obviously, we need to decrypt this file before we can read it. That's what we're going to do next. I'm just going to clear the screen again. Now, we're going to type ‘gpg –output'. We're going to follow this with the file name for the new decrypted file that we're going to create, ‘example.txt.decrypted'. Okay. Now we're going to do ‘--decrypt example.txt.gpg'. In this case, we're decrypting with the same user we created a public and private key with, so it won't prompt us for a password. Okay. Now we can use ‘ll' to list the files. We see our decrypted file right here. If we use the CAT command, we see what's inside example.txt.decrypted. This verifies that the GPG utility successfully decrypted the file. That's it for this demonstration. We discussed how to encrypt and decrypt files in a Linux system using GPG.",
  "chunks": [
    {
      "chunk_id": "3.4.5_chunk_1",
      "content": "In this demonstration, we're going to review how to encrypt files on a Linux system using GPG. The GPG utility is the open-source equivalent of the PGP utility. First, we need to verify that GPG's installed on the system, so we're going to type ‘gpg –version'. As you can see here, it'll show us the version information. It wouldn't show this if GPG wasn't installed. Most Linux distributions should have this installed by default. It's currently installed on the system. Let's go ahead and clear our screen.",
      "summary": "This demonstration covers encrypting files on Linux systems using GPG (GNU Privacy Guard), the open-source equivalent of PGP for implementing cryptographic file protection. The process begins by verifying GPG installation using the 'gpg --version' command, which is typically pre-installed on most Linux distributions. GPG provides essential file encryption capabilities for securing sensitive data through public-key cryptography implementation.",
      "metadata": {
        "chapter_num": "3",
        "section_num": "3.4.5",
        "title": "Encrypting Files with GPG",
        "content_type": "video",
        "filename": "3.4.5_Encrypting_Files_with_GPG_[video].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.4.5_Encrypting_Files_with_GPG_[video].txt",
        "word_count": 549,
        "has_content": true
      },
      "section_header": "Encrypting Files with GPG",
      "timestamp_range": "00:00-00:37"
    },
    {
      "chunk_id": "3.4.5_chunk_2",
      "content": "Now we need to generate a key pair. To do that, we're going to type ‘gpg --gen-key'. If you want to have more customization, you can use the full-featured key generation dialog as listed. It wants to know the real name. We're just going to put our username in this field, rmckay. Our email address is rmckay@testout.com. This last menu wants us to verify the information. We'll okay it. Another dialog box will come up asking us to enter a passphrase. For this demo, I'm just going to use the word ‘TestOut'. This gives us a warning, saying it's an unsecure passphrase. Normally, you would make this password more secure, but for now, we're going to leave it as-is. We'll re-enter the same passphrase. Now our public and secret keys are created.",
      "summary": "GPG key pair generation uses the 'gpg --gen-key' command to create both public and secret keys, requiring user identification (name and email) and a secure passphrase for protection. The passphrase serves as the primary security mechanism protecting the private key, and weak passphrases compromise the entire encryption system. Once generated, the key pair enables secure file encryption and digital signing operations within the GPG cryptographic framework.",
      "metadata": {
        "chapter_num": "3",
        "section_num": "3.4.5",
        "title": "Encrypting Files with GPG",
        "content_type": "video",
        "filename": "3.4.5_Encrypting_Files_with_GPG_[video].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.4.5_Encrypting_Files_with_GPG_[video].txt",
        "word_count": 549,
        "has_content": true
      },
      "section_header": "Key Pair",
      "timestamp_range": "00:37-01:29"
    },
    {
      "chunk_id": "3.4.5_chunk_3",
      "content": "We're going to encrypt an example file in our Home directory. It's called example.txt. We can see this by doing an ‘ll' to list the directory. Now we want to go ahead and encrypt our file using GPG. You don't have to specify the entire directory path of the file if you're in the directory where the file exists. To encrypt, we're going to type in ‘gpg -e example.txt' and then the name that we created, ‘rmckay'. Then we're going to click Enter twice, as there's no more information we need to add.",
      "summary": "GPG file encryption is performed using the command 'gpg -e [filename] [recipient-name]' to encrypt files in the current directory, creating secure encrypted versions of sensitive data. The encryption process requires specifying the target file and the recipient's GPG key name, providing confidentiality protection for data at rest through asymmetric cryptography.",
      "metadata": {
        "chapter_num": "3",
        "section_num": "3.4.5",
        "title": "Encrypting Files with GPG",
        "content_type": "video",
        "filename": "3.4.5_Encrypting_Files_with_GPG_[video].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.4.5_Encrypting_Files_with_GPG_[video].txt",
        "word_count": 549,
        "has_content": true
      },
      "section_header": "Encrypt a File",
      "timestamp_range": "01:29-02:04"
    },
    {
      "chunk_id": "3.4.5_chunk_4",
      "content": "Now, if we type ‘ll' and look, we can see the original example.txt, and we can see the encrypted version of example.txt.gpg. If we use the CAT command to view this encrypted version of the file, you can see that it's all scrambled. Clearly, we can't read the file or tell what it says. At this point, obviously, we need to decrypt this file before we can read it. That's what we're going to do next. I'm just going to clear the screen again.",
      "summary": "GPG encryption successfully transforms plaintext files into unreadable, scrambled ciphertext that cannot be interpreted without proper decryption. The encrypted file maintains the original filename with a .gpg extension, while the contents become completely obfuscated when viewed with standard commands like CAT. Decryption is required to restore the file to its readable plaintext format.",
      "metadata": {
        "chapter_num": "3",
        "section_num": "3.4.5",
        "title": "Encrypting Files with GPG",
        "content_type": "video",
        "filename": "3.4.5_Encrypting_Files_with_GPG_[video].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.4.5_Encrypting_Files_with_GPG_[video].txt",
        "word_count": 549,
        "has_content": true
      },
      "section_header": "Encrypted File Contents",
      "timestamp_range": "02:04-02:34"
    },
    {
      "chunk_id": "3.4.5_chunk_5",
      "content": "Now, we're going to type ‘gpg –output'. We're going to follow this with the file name for the new decrypted file that we're going to create, ‘example.txt.decrypted'. Okay. Now we're going to do ‘--decrypt example.txt.gpg'. In this case, we're decrypting with the same user we created a public and private key with, so it won't prompt us for a password. Okay. Now we can use ‘ll' to list the files. We see our decrypted file right here. If we use the CAT command, we see what's inside example.txt.decrypted. This verifies that the GPG utility successfully decrypted the file.",
      "summary": "The GPG command-line utility decrypts encrypted files using the syntax 'gpg --output [decrypted_filename] --decrypt [encrypted_file.gpg]', which automatically uses the recipient's private key for decryption. When decrypting with the same user account that created the key pair, GPG does not prompt for a password and seamlessly restores the original file content. File decryption success can be verified by listing directory contents and examining the decrypted file using standard commands like 'cat'.",
      "metadata": {
        "chapter_num": "3",
        "section_num": "3.4.5",
        "title": "Encrypting Files with GPG",
        "content_type": "video",
        "filename": "3.4.5_Encrypting_Files_with_GPG_[video].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.4.5_Encrypting_Files_with_GPG_[video].txt",
        "word_count": 549,
        "has_content": true
      },
      "section_header": "Decrypt a File",
      "timestamp_range": "02:34-03:17"
    },
    {
      "chunk_id": "3.4.5_chunk_6",
      "content": "That's it for this demonstration. We discussed how to encrypt and decrypt files in a Linux system using GPG.",
      "summary": "This demonstration covered GPG (GNU Privacy Guard) file encryption and decryption operations on Linux systems. GPG provides asymmetric cryptography capabilities for securing sensitive files through public-key encryption methods. The training showed practical implementation of GPG commands for encrypting plaintext files and decrypting ciphertext back to readable format.",
      "metadata": {
        "chapter_num": "3",
        "section_num": "3.4.5",
        "title": "Encrypting Files with GPG",
        "content_type": "video",
        "filename": "3.4.5_Encrypting_Files_with_GPG_[video].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.4.5_Encrypting_Files_with_GPG_[video].txt",
        "word_count": 549,
        "has_content": true
      },
      "section_header": "Summary",
      "timestamp_range": "03:17-03:24"
    }
  ],
  "num_chunks": 6,
  "document_summary": "Encrypting Files with GPG (video): In this demonstration, we're going to review how to encrypt files on a Linux system using GPG. The GPG utility is the open-source equivalent of the PGP utility. First, we need to verify that GPG's installed on the system, so we're going to type ‘gpg –version'."
}