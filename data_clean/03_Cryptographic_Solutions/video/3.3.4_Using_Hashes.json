{
  "metadata": {
    "chapter_num": "3",
    "section_num": "3.3.4",
    "title": "Using Hashes",
    "content_type": "video",
    "filename": "3.3.4_Using_Hashes_[video].txt",
    "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.3.4_Using_Hashes_[video].txt",
    "word_count": 842,
    "has_content": true
  },
  "full_content": "In this demonstration, we'll explore how hashing works. I've already downloaded a hashing utility that does both MD5 and SHA-1 hashes. It's called Microsoft File Checksum Integrity Verifier. I've placed it at the root of C: in a folder named FCIV. As you can see, I have the fciv.exe file, the README.txt that tells you about the file and how to use it, and a little TestOut.txt file that I've created. The name of the executable is obviously fciv.exe, and it uses an MD5 hashing algorithm by default, but it can also use SHA-1. Let's practice creating a hash of a file. I have this Testout.txt file, and I've entered some text into it. It just says \"TestOut.\" Let's go ahead and close the file. The first thing we need to do is go to the command prompt. This hashing tool runs off the command prompt. We need to do is get to the correct folder, FCIV at the root of C. Now we're in the right folder, and we can check the directory. You can see the files in the directory, the executable, and the ReadMe. If we open the ReadMe file, it'll show you some of the information about using this file. It shows you some features, and it shows you the syntax for using these features. Let's go back. We're not going to do anything complicated today. We're going to keep it simple and just create some hashes. First, we're going to do an MD5 hash. By default, this tool will hash an MD5, and you don't have to state MD5. (You can, but you don't have to.) Let's go ahead and hash our text file. Let's type in ‘fciv.exe'. Then all we have to do is type ‘testout.txt'. You can see it's just created our hash for us. The resulting hash is displayed, and MD5 is a 128-bit hashing algorithm, so the output is composed of 128 zeroes and ones. To make it easier to read, the output is then converted from binary to hexadecimal notation. Each hexadecimal character is four bits long, so the hash is composed of 32 hexadecimal characters. Let's try to modify our Testout.txt file. Suppose that someone has intercepted this file in transit and modified it. Let's just add a period here, at the end. We'll save it and close the file. This isn't much of a change. Let's say maybe the attacker tried to modify the file without being too obvious. We'll run the hash again. Just press the up arrow and press Enter. We can see that we get a completely different hash value. It's not even close to the original one--it's completely different. If you're using hashing as part of your cryptographic solution, you'll know if data has been modified. The hashes will be marked completely differently. Let's go back to the file and change it back to the way it was. If we run the hash again, notice the hash is now back to its original value. The fact that it was modified in the past doesn't affect the hash value. The hashing algorithm only evaluates the current content of the data. In this case, the current content is identical to what we had originally hashed, so the hash value is the same. Identical data going into the same hashing algorithm will produce the exact same output. Let's go ahead and rename the Testout file from Testout to Testout1. We're going to just add a 1 here, and that's it. We have to change this a little bit, just add a 1. Notice that the hash is identical again. The hashing algorithm doesn't care what label you put on the data. It only evaluates the data. Let's look at an example of SHA, or secure hashing algorithm. Specifically, we're going to use SHA-1. This is similar to MD5. In this tool, we'll use a similar syntax, but we actually have to specify SHA-1. Let's go back, and we're going to change our file back to TestOut. Instead of entering the fciv.exe, we actually have to specify our SHA-1, because, by default, it does MD5. We have to specify that we want to use SHA-1. Let's go ahead and type in ‘fciv.exe sha-1 testout.txt'. All right, so now we can see our file, our SHA-1 hash. Similarly, if we go in and edit our Testout text and add the period, just like we did with MD5, and we save and close, run the same hash again, you can see, we got a different hash, just like with MD5. If we change it back, get rid of the period at the end, save, and run the command again, the same thing occurs as with MD5: we'll get the original hash back. That's it for this demonstration. This demo provided an overview of how hashing works. We reviewed hashing with MD5 and SHA-1.",
  "chunks": [
    {
      "chunk_id": "3.3.4_chunk_1",
      "content": "In this demonstration, we'll explore how hashing works. I've already downloaded a hashing utility that does both MD5 and SHA-1 hashes. It's called Microsoft File Checksum Integrity Verifier. I've placed it at the root of C: in a folder named FCIV. As you can see, I have the fciv.exe file, the README.txt that tells you about the file and how to use it, and a little TestOut.txt file that I've created. The name of the executable is obviously fciv.exe, and it uses an MD5 hashing algorithm by default, but it can also use SHA-1.",
      "summary": "[Using Hashes] Using Hashes: I've already downloaded a hashing utility that does both MD5 and SHA-1 hashes. I've placed it at the root of C: in a folder named FCIV.",
      "metadata": {
        "chapter_num": "3",
        "section_num": "3.3.4",
        "title": "Using Hashes",
        "content_type": "video",
        "filename": "3.3.4_Using_Hashes_[video].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.3.4_Using_Hashes_[video].txt",
        "word_count": 842,
        "has_content": true
      },
      "section_header": "Using Hashes",
      "timestamp_range": "00:00-00:39"
    },
    {
      "chunk_id": "3.3.4_chunk_2",
      "content": "Let's practice creating a hash of a file. I have this Testout.txt file, and I've entered some text into it. It just says \"TestOut.\" Let's go ahead and close the file. The first thing we need to do is go to the command prompt. This hashing tool runs off the command prompt. We need to do is get to the correct folder, FCIV at the root of C. Now we're in the right folder, and we can check the directory. You can see the files in the directory, the executable, and the ReadMe. If we open the ReadMe file, it'll show you some of the information about using this file. It shows you some features, and it shows you the syntax for using these features. Let's go back. We're not going to do anything complicated today. We're going to keep it simple and just create some hashes.",
      "summary": "[Using Hashes] Create a Hash: The first thing we need to do is go to the command prompt. We need to do is get to the correct folder, FCIV at the root of C.",
      "metadata": {
        "chapter_num": "3",
        "section_num": "3.3.4",
        "title": "Using Hashes",
        "content_type": "video",
        "filename": "3.3.4_Using_Hashes_[video].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.3.4_Using_Hashes_[video].txt",
        "word_count": 842,
        "has_content": true
      },
      "section_header": "Create a Hash",
      "timestamp_range": "00:39-01:22"
    },
    {
      "chunk_id": "3.3.4_chunk_3",
      "content": "First, we're going to do an MD5 hash. By default, this tool will hash an MD5, and you don't have to state MD5. (You can, but you don't have to.) Let's go ahead and hash our text file. Let's type in ‘fciv.exe'. Then all we have to do is type ‘testout.txt'. You can see it's just created our hash for us. The resulting hash is displayed, and MD5 is a 128-bit hashing algorithm, so the output is composed of 128 zeroes and ones. To make it easier to read, the output is then converted from binary to hexadecimal notation. Each hexadecimal character is four bits long, so the hash is composed of 32 hexadecimal characters. Let's try to modify our Testout.txt file. Suppose that someone has intercepted this file in transit and modified it. Let's just add a period here, at the end. We'll save it and close the file. This isn't much of a change. Let's say maybe the attacker tried to modify the file without being too obvious. We'll run the hash again. Just press the up arrow and press Enter. We can see that we get a completely different hash value. It's not even close to the original one--it's completely different. If you're using hashing as part of your cryptographic solution, you'll know if data has been modified. The hashes will be marked completely differently. Let's go back to the file and change it back to the way it was. If we run the hash again, notice the hash is now back to its original value. The fact that it was modified in the past doesn't affect the hash value. The hashing algorithm only evaluates the current content of the data. In this case, the current content is identical to what we had originally hashed, so the hash value is the same. Identical data going into the same hashing algorithm will produce the exact same output. Let's go ahead and rename the Testout file from Testout to Testout1. We're going to just add a 1 here, and that's it. We have to change this a little bit, just add a 1. Notice that the hash is identical again. The hashing algorithm doesn't care what label you put on the data. It only evaluates the data.",
      "summary": "MD5 Hash: Let's say maybe the attacker tried to modify the file without being too obvious. If you're using hashing as part of your cryptographic solution, you'll know if data has been modified.",
      "metadata": {
        "chapter_num": "3",
        "section_num": "3.3.4",
        "title": "Using Hashes",
        "content_type": "video",
        "filename": "3.3.4_Using_Hashes_[video].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.3.4_Using_Hashes_[video].txt",
        "word_count": 842,
        "has_content": true
      },
      "section_header": "MD5 Hash",
      "timestamp_range": "01:22-03:33"
    },
    {
      "chunk_id": "3.3.4_chunk_4",
      "content": "Let's look at an example of SHA, or secure hashing algorithm. Specifically, we're going to use SHA-1. This is similar to MD5. In this tool, we'll use a similar syntax, but we actually have to specify SHA-1. Let's go back, and we're going to change our file back to TestOut. Instead of entering the fciv.exe, we actually have to specify our SHA-1, because, by default, it does MD5. We have to specify that we want to use SHA-1. Let's go ahead and type in ‘fciv.exe sha-1 testout.txt'. All right, so now we can see our file, our SHA-1 hash. Similarly, if we go in and edit our Testout text and add the period, just like we did with MD5, and we save and close, run the same hash again, you can see, we got a different hash, just like with MD5. If we change it back, get rid of the period at the end, save, and run the command again, the same thing occurs as with MD5: we'll get the original hash back.",
      "summary": "SHA-1 Hash: Let's look at an example of SHA, or secure hashing algorithm. In this tool, we'll use a similar syntax, but we actually have to specify SHA-1.",
      "metadata": {
        "chapter_num": "3",
        "section_num": "3.3.4",
        "title": "Using Hashes",
        "content_type": "video",
        "filename": "3.3.4_Using_Hashes_[video].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.3.4_Using_Hashes_[video].txt",
        "word_count": 842,
        "has_content": true
      },
      "section_header": "SHA-1 Hash",
      "timestamp_range": "03:33-04:42"
    },
    {
      "chunk_id": "3.3.4_chunk_5",
      "content": "That's it for this demonstration. This demo provided an overview of how hashing works. We reviewed hashing with MD5 and SHA-1.",
      "summary": "That's it for this demonstration. This demo provided an overview of how hashing works. We reviewed hashing with MD5 and SHA-1.",
      "metadata": {
        "chapter_num": "3",
        "section_num": "3.3.4",
        "title": "Using Hashes",
        "content_type": "video",
        "filename": "3.3.4_Using_Hashes_[video].txt",
        "file_path": "/Users/basantabaral/CompTia/data_raw/03_Cryptographic_Solutions/3.3.4_Using_Hashes_[video].txt",
        "word_count": 842,
        "has_content": true
      },
      "section_header": "Summary",
      "timestamp_range": "04:42-04:50"
    }
  ],
  "num_chunks": 5,
  "document_summary": "Using Hashes (video): Let's say maybe the attacker tried to modify the file without being too obvious. If you're using hashing as part of your cryptographic solution, you'll know if data has been modified. The hashing algorithm only evaluates the current content of the data."
}