{
  "metadata": {
    "chapter_num": "9",
    "section_num": "9.2.8",
    "title": "Configuring Remote Logging on Linux",
    "content_type": "video",
    "filename": "9.2.8_Configuring_Remote_Logging_on_Linux_[video].txt",
    "file_path": "data_raw/09_Incident_Response/9.2.8_Configuring_Remote_Logging_on_Linux_[video].txt",
    "word_count": 1111,
    "has_content": true
  },
  "full_content": "Transcript close interactive script There are many aspects of the syslog daemon that you can modify to customize how your log files are configured. You could have warning messages going into one file, error messages going into another, or separate them based on program. But one of the cool things I think the syslog daemon can do is log to a remote host. This basically allows us to write our logs not only to our local system but also to a log host somewhere else. This is a great benefit for the administrator. You can set up a log host in your network somewhere and all the logs from all the systems you support go into that log host. If somebody's having a problem, instead of having to use SSH in their system to look at their log files, you can have one central location to view them. This can be very helpful in keeping history and tracking your log files. Syslog servers are also very helpful when there has been an attack on your network. That's what we're going to do here. We're going to configure the syslog daemon to log to a remote host. I have two different Linux systems running. I have a RedHat system running here that will serve as my log host and I have a CentOS system running here that will serve as my log client. The log messages from the CentOS system are going to be saved on our syslog server which happens to be our Redhat system. Keep in mind that different Linux distributions may be slightly different. But the same concepts apply. Let's configure the log host first. The first thing we need to do is check to see if the rsyslog daemon is running. Type ‘systemctl status rsyslog'. As you can see everything appear to be in order. We need to change to our root user account, so I'll do a 'su- root' command and enter the password. We're going to edit the configuration file with the ‘vi /etc/rsyslog.conf' command. As we scroll down, we're going to uncomment some modules. These are the imudp module and the imtcp module. These modules enable the syslog daemon to listen for incoming syslog messages. Down at the bottom in the rules area we have a template we're going to use for our remote logging. This template isn't here by default so it has to be added. This allows the remote logs to be placed in their own folder by host name and program name. If you don't set up a template, all syslog messages from remote hosts will go in the /var/log/messages of the syslog server. We're going to uncomment this by removing the pound symbols. Let's save it by typing ‘:wq!'. For these changes to take effect, we must restart the rsyslog daemon by typing ‘systemctl restart rsyslog'. Since there will be incoming traffic, we need to modify the firewall to accept incoming messages on port 514. To do so, type ‘firewall-cmd --permanent --add-port=514/udp'. When you press Enter you see that it was a success. Now we do the same thing with the TCP protocol with \"arrow up\" and remove UDP for TCP. The changes won't be active until we reload the firewall with the ‘firewall-cmd --reload' command. I'm going to do a netstat to make sure the syslog daemon is listening on port 514. Type ‘netstat -tulnp | grep \"rsyslo\"' and press Enter. This shows us that rsyslogd has port 514 open for UPD and TCP. We're going to venture over to our CentOS client server that's going to be sending syslog messages to our RedHat server. First, we check to make sure the rsyslog daemon is running by typing \"systemctl status rsyslog\". We're good to go. Just like our syslog server, we're going to modify the configuration file for rsyslog. Let's type ‘sudo vi /etc/rsyslog.conf'. Enter the password and press Enter. We're going to scroll all the way to the bottom to this configuration file. Just so that I know what this is, I'm going to put a comment in there which is \"#syslog server\" and type ‘*.* @@192.168.0.55:514'. The *.* is a wildcard that sends all syslog messages to the syslog server. The IP address listed is the IP of the syslog server and 514 is the port specified to use. We save this with ‘:wq!' and Enter. ‘sudo systemctl restart rsyslog' allows the rsyslog daemon to grab the new settings we just edited. Now this is the fun part. We will actually get to see a message go over to our syslog server from our CentOS client server. To write a test message, we type ‘logger this is a test message' and press Enter. Let's use ‘sudo tail -f /var/log/messages' to see the message locally. Now that we see the local message, let's go over to our syslog server with ‘cd /var/log/centos-server1/'. I'm going to do a quick ‘ll' to list what log files have already been written. Since we did a logger command under the TestOut user, we're going to tail that log file to look for our newly created test message with ‘tail -f testout.log'. As you can see, it's the exact same message that was on our CentOS client server. That's it for this demo. In this demonstration, we talked about how to configure a log host with Linux on a network. We first looked at the steps you need to complete in order to configure the system that's going to function as the log host to receive logging messages from another system. Then we looked at the log client and configured it to send its log messages not only to its own log files, but also to send a copy to our log host.",
  "chunks": [
    {
      "chunk_id": "9.2.8_chunk_1",
      "content": "There are many aspects of the syslog daemon that you can modify to customize how your log files are configured. You could have warning messages going into one file, error messages going into another, or separate them based on program. But one of the cool things I think the syslog daemon can do is log to a remote host. This basically allows us to write our logs not only to our local system but also to a log host somewhere else. This is a great benefit for the administrator. You can set up a log host in your network somewhere and all the logs from all the systems you support go into that log host. If somebody's having a problem, instead of having to use SSH in their system to look at their log files, you can have one central location to view them. This can be very helpful in keeping history and tracking your log files. Syslog servers are also very helpful when there has been an attack on your network. That's what we're going to do here. We're going to configure the syslog daemon to log to a remote host. I have two different Linux systems running. I have a RedHat system running here that will serve as my log host and I have a CentOS system running here that will serve as my log client. The log messages from the CentOS system are going to be saved on our syslog server which happens to be our Redhat system. Keep in mind that different Linux distributions may be slightly different. But the same concepts apply.",
      "summary": "The Configuring Remote Logging section of the CompTIA Security+ course focuses on the customization of the syslog daemon for efficient log management, including the ability to direct logs to a remote host. This centralized logging approach enhances administrative efficiency by allowing easy access to logs from multiple systems, which is particularly useful for troubleshooting and monitoring security incidents. The practical application involves configuring a RedHat log host to receive log messages from a CentOS client, illustrating the setup process across different Linux distributions.",
      "metadata": {
        "chapter_num": "9",
        "section_num": "9.2.8",
        "title": "Configuring Remote Logging on Linux",
        "content_type": "video",
        "filename": "9.2.8_Configuring_Remote_Logging_on_Linux_[video].txt",
        "file_path": "data_raw/09_Incident_Response/9.2.8_Configuring_Remote_Logging_on_Linux_[video].txt",
        "word_count": 1111,
        "has_content": true
      },
      "section_header": "Configuring Remote Logging",
      "timestamp_range": ""
    },
    {
      "chunk_id": "9.2.8_chunk_2",
      "content": "Let's configure the log host first. The first thing we need to do is check to see if the rsyslog daemon is running. Type ‘systemctl status rsyslog'. As you can see everything appear to be in order. We need to change to our root user account, so I'll do a 'su- root' command and enter the password. We're going to edit the configuration file with the ‘vi /etc/rsyslog.conf' command. As we scroll down, we're going to uncomment some modules. These are the imudp module and the imtcp module. These modules enable the syslog daemon to listen for incoming syslog messages. Down at the bottom in the rules area we have a template we're going to use for our remote logging. This template isn't here by default so it has to be added. This allows the remote logs to be placed in their own folder by host name and program name. If you don't set up a template, all syslog messages from remote hosts will go in the /var/log/messages of the syslog server. We're going to uncomment this by removing the pound symbols. Let's save it by typing ‘:wq!'. For these changes to take effect, we must restart the rsyslog daemon by typing ‘systemctl restart rsyslog'. Since there will be incoming traffic, we need to modify the firewall to accept incoming messages on port 514. To do so, type ‘firewall-cmd --permanent --add-port=514/udp'. When you press Enter you see that it was a success. Now we do the same thing with the TCP protocol with \"arrow up\" and remove UDP for TCP. The changes won't be active until we reload the firewall with the ‘firewall-cmd --reload' command. I'm going to do a netstat to make sure the syslog daemon is listening on port 514. Type ‘netstat -tulnp | grep \"rsyslo\"' and press Enter. This shows us that rsyslogd has port 514 open for UPD and TCP.",
      "summary": "In this section, learners configure a log host by ensuring the rsyslog daemon is running and modifying its configuration to enable UDP and TCP modules for incoming syslog messages. A custom template is created for organizing remote logs by hostname and program name, and firewall settings are updated to allow traffic on port 514. Finally, the changes are verified by checking that the rsyslog daemon is actively listening on the designated ports.",
      "metadata": {
        "chapter_num": "9",
        "section_num": "9.2.8",
        "title": "Configuring Remote Logging on Linux",
        "content_type": "video",
        "filename": "9.2.8_Configuring_Remote_Logging_on_Linux_[video].txt",
        "file_path": "data_raw/09_Incident_Response/9.2.8_Configuring_Remote_Logging_on_Linux_[video].txt",
        "word_count": 1111,
        "has_content": true
      },
      "section_header": "Configure Log Host",
      "timestamp_range": ""
    },
    {
      "chunk_id": "9.2.8_chunk_3",
      "content": "We're going to venture over to our CentOS client server that's going to be sending syslog messages to our RedHat server. First, we check to make sure the rsyslog daemon is running by typing \"systemctl status rsyslog\". We're good to go. Just like our syslog server, we're going to modify the configuration file for rsyslog. Let's type ‘sudo vi /etc/rsyslog.conf'. Enter the password and press Enter. We're going to scroll all the way to the bottom to this configuration file. Just so that I know what this is, I'm going to put a comment in there which is \"#syslog server\" and type ‘*.* @@192.168.0.55:514'. The *.* is a wildcard that sends all syslog messages to the syslog server. The IP address listed is the IP of the syslog server and 514 is the port specified to use. We save this with ‘:wq!' and Enter. ‘sudo systemctl restart rsyslog' allows the rsyslog daemon to grab the new settings we just edited.",
      "summary": "In this section, we configure a CentOS client to send syslog messages to a RedHat server by ensuring the rsyslog daemon is active and modifying its configuration file. By adding a line that specifies the syslog server's IP address and port, we enable the client to forward all log messages to the server. Finally, we restart the rsyslog service to apply the new settings, demonstrating practical log management and monitoring in a networked environment.",
      "metadata": {
        "chapter_num": "9",
        "section_num": "9.2.8",
        "title": "Configuring Remote Logging on Linux",
        "content_type": "video",
        "filename": "9.2.8_Configuring_Remote_Logging_on_Linux_[video].txt",
        "file_path": "data_raw/09_Incident_Response/9.2.8_Configuring_Remote_Logging_on_Linux_[video].txt",
        "word_count": 1111,
        "has_content": true
      },
      "section_header": "Configure Log Client",
      "timestamp_range": ""
    },
    {
      "chunk_id": "9.2.8_chunk_4",
      "content": "Now this is the fun part. We will actually get to see a message go over to our syslog server from our CentOS client server. To write a test message, we type ‘logger this is a test message' and press Enter. Let's use ‘sudo tail -f /var/log/messages' to see the message locally. Now that we see the local message, let's go over to our syslog server with ‘cd /var/log/centos-server1/'. I'm going to do a quick ‘ll' to list what log files have already been written. Since we did a logger command under the TestOut user, we're going to tail that log file to look for our newly created test message with ‘tail -f testout.log'. As you can see, it's the exact same message that was on our CentOS client server.",
      "summary": "In this section, participants learn how to send and verify syslog messages from a CentOS client server to a syslog server. By using the 'logger' command to create a test message and the 'tail' command to monitor log files, users can confirm that messages are accurately transmitted and recorded on the syslog server. This practical exercise reinforces the importance of log management in monitoring and troubleshooting network security events.",
      "metadata": {
        "chapter_num": "9",
        "section_num": "9.2.8",
        "title": "Configuring Remote Logging on Linux",
        "content_type": "video",
        "filename": "9.2.8_Configuring_Remote_Logging_on_Linux_[video].txt",
        "file_path": "data_raw/09_Incident_Response/9.2.8_Configuring_Remote_Logging_on_Linux_[video].txt",
        "word_count": 1111,
        "has_content": true
      },
      "section_header": "Test Syslog Messages",
      "timestamp_range": ""
    },
    {
      "chunk_id": "9.2.8_chunk_5",
      "content": "That's it for this demo. In this demonstration, we talked about how to configure a log host with Linux on a network. We first looked at the steps you need to complete in order to configure the system that's going to function as the log host to receive logging messages from another system. Then we looked at the log client and configured it to send its log messages not only to its own log files, but also to send a copy to our log host.",
      "summary": "In this demonstration, we covered the configuration of a log host using Linux to centralize logging messages from a networked log client. Key steps included setting up the log host to receive messages and configuring the log client to forward its logs to both local files and the log host. This practical application enhances security monitoring and incident response capabilities by consolidating log data for easier analysis.",
      "metadata": {
        "chapter_num": "9",
        "section_num": "9.2.8",
        "title": "Configuring Remote Logging on Linux",
        "content_type": "video",
        "filename": "9.2.8_Configuring_Remote_Logging_on_Linux_[video].txt",
        "file_path": "data_raw/09_Incident_Response/9.2.8_Configuring_Remote_Logging_on_Linux_[video].txt",
        "word_count": 1111,
        "has_content": true
      },
      "section_header": "Summary",
      "timestamp_range": ""
    }
  ],
  "num_chunks": 5
}