{
  "metadata": {
    "chapter_num": "9",
    "section_num": "9.5.1",
    "title": "Backup Types",
    "content_type": "video",
    "filename": "9.5.1_Backup_Types_[video].txt",
    "file_path": "data_raw/09_Incident_Response/9.5.1_Backup_Types_[video].txt",
    "word_count": 1892,
    "has_content": true
  },
  "full_content": "Transcript close interactive script In this lesson, we'll discuss backing up data. Backing up your data is absolutely critical. It must be done consistently, and strategically. It's also essential to verify backups to ensure that they actually work and you can restore your data. You need to know three different types of backups. The first is the full backup, the second is the incremental backup, and the last is the differential backup. But before we dive into these, let's quickly talk about a key component used with backups called the archive bit. The archive bit is a file attribute that is either on or off. It's used by backup systems to determine if the file has been archivedâ€”\"that is, has been backed up. Also, archive bit identifies if a file has been modified since the last backup. This is important when used with certain types of backups. With that, let's explore the different types of backups. Let's first discuss a full backup. A full backup backs up everything. It doesn't matter whether the archive bit is set or not on any file. However, as it backs up each file, it clears the archive bit to indicate that the file is backing up. In this way, you can determine if a file has been modified at a later point in time. If you were to modify a file that has been backed up, the archive bit would be reset, indicating to the backup software that this file has been modified since the last time it was backed up. If a file is not modified after the full backup, the archive bit is left in a cleared state. This is important because other types of backups, such as incremental, take into consideration if this archive bit has been cleared when deciding whether it should back up a file or not. An incremental backup backs up everything since the last full backup or since the last incremental backup. To determine whether or not a file has been modified since the last full or incremental backup, it looks at the archive bit. If the archive bit is turned on, that tells the backup software that the file has been modified since the last full or incremental backup, and needs to be backed up again. Once it's backed up the file, the archive bit is cleared. Let's run through an example. Suppose you perform a full backup of the entire file system on Monday. As a result, every file in the file system has been backed up, and the archive bit on each file is cleared. Then, on Tuesday, you perform an incremental backup. Because the incremental backup only backs up files with the archived bit set, it will only backup files that have changed since Monday. Accordingly, the incremental backup you made on Tuesday will be relatively small because it will only contain one day's worth of changes. After backing up the changed files, the incremental backup will clear the archive bit again on the files that were backed up. If you perform another incremental backup on Wednesday, it will once again look for any files with enabled archive bits, indicating that they've been modified since either the last full backup on Monday or since the last incremental backup on Tuesday. Therefore, Wednesday's incremental backup also only contains one day's worth of changes. Likewise, if you run another incremental backup on Thursday, then only the changes that have been made since Wednesday will be backed up. The same is true on Friday. The advantage of this strategy is that the daily incremental backups finish relatively quickly because we're only backing up one day's worth of changes. The full backup still takes some time to complete because all files are being backed up. For this reason, the full backup is usually executed over the weekend when the system is not heavily used. The incremental backups can occur each weekday. Because they don't take much time to complete, they typically don't interfere with day-to-day work. Incremental backups have one significant drawback. The incremental backup strategy is the slowest type of backup for restoring data. For example, suppose we ran a full backup on Monday and then ran an incremental on Tuesday, Wednesday, Thursday, and Friday. Then the server crashes on Saturday, and we need to restore all the data back to the server after we've recovered from the crash. The first thing that you must do is restore the first full backup from Monday. Then you must restore every incremental backup in the order they were created. First, you must restore Monday's incremental backup, followed by Tuesday's backup, then Wednesday, Thursday, and Friday's backups. Each backup must be restored in the proper sequence to return the system to where it was before the crash. This can take hours or even days to complete, depending how much data is involved. Another option is to use differential backups instead of incremental. A differential backup looks for files that have been modified since the last full backup. It does this by evaluating if the archive bit has been set on the files. If the archive bit is clear, it will not back up the file because it assumes that it has not been changed since the last full backup. If the archive bit is set, the differential backup assumes the file has been modified and needs to be backed up. The key difference is that a differential backup does not clear the archive bit after backing up a file. Therefore, it backs up everything modified since the last full backup, but not since the last differential backup. This has advantages and disadvantages. Suppose you perform a full backup on Monday just as with the incremental backup strategy. This clears all archive bits on all files. Then, we perform a differential backup on Tuesday and Wednesday. Because the differential backup on Tuesday does not clear any archive bits, Wednesday's differential backs up all the files that have been modified since Monday. Thursday's differential backup includes all the changes made on Monday, Tuesday, and Wednesday. Friday's differential backup includes all the changes made on Monday, Tuesday, Wednesday, and Thursday. As you progress through the backup schedule, each differential backup takes progressively longer because it's backing up more data each time. The first differential backup completes in the same amount of time as an incremental would because we're only backing up one day's worth of data. However, each subsequent differential takes longer. The advantage of differential backups is the speed of restoring data. With differentials, all we do is restore the full backup followed by the last differential backup. For example, if a server were to crash on Saturday, we would restore the full backup from Monday and then the last differential backup from Friday. That's all we do because the last differential backup contains a backup of every single file that has been changed since the last full backup. You should never mix differential and incremental backups together with a full backup. If you mix full backups with incremental and differential backups, you're going to have problems because of the way these different types of backups handle the archive bit. As a result, files that should have been backed up will be missed. Another alternative for backing up data is to create a system image. Imaging programs create a bit-level mirror of a particular hard disk or partition. Newer versions of Windows, and all versions of Linux, include this functionality. Typically, a system image is created on a defined schedule. Because a system image backs up the entire hard disk or partition, they are rather slow to create. However, they are very fast to restore. All you do is restore the image to the same hardware, or even to a new piece of hardware if you have a major hardware malfunction, and the system is back and available again in exactly the state it was when the image was created. This can be very useful in the event of a malware infection. Most of the time it's easier to re-image a machine that's been infected with malware rather than try to get rid of the malware. There are other types of data to back up. For example, if you're managing a domain controller in a Windows network, then you need to backup not only the files on the server but all your active directory information as well. To do this, you can create a special type of backup on the domain controller called a system state backup. If you are backing up sensitive information, such as your security logs, then you might want to consider the location of the backup. Instead of backing that data up to a device that can be modified in some way, find a more secure option. For example, it could be problematic if you were to back up sensitive information to a network share or perhaps a USB flash drive because of the potential of tampering. Instead, you should back up confidential information to a write-once type of media, such as a recordable DVD. A backup is worthless unless you can successfully restore data from it. You should run periodic tests and restore from your backups in a lab environment, just to make sure that everything works should a crisis occur. That's it for this lesson. In this lesson, we talked about backup and restore. We first discussed the importance of backing up your data. We then examined the three backup strategies: full, incremental, and differential. We then mentioned using a system image to backup data. We talked about backing up the system state on the domain controller. We discussed backing up sensitive information to write-once medium. Then we emphasized the importance of verifying backups to make sure that they actually work.",
  "chunks": [
    {
      "chunk_id": "9.5.1_chunk_1",
      "content": "In this lesson, we'll discuss backing up data. Backing up your data is absolutely critical. It must be done consistently, and strategically. It's also essential to verify backups to ensure that they actually work and you can restore your data. You need to know three different types of backups. The first is the full backup, the second is the incremental backup, and the last is the differential backup. But before we dive into these, let's quickly talk about a key component used with backups called the archive bit.",
      "summary": "The Backup and Restore section emphasizes the critical importance of consistently and strategically backing up data, along with the necessity of verifying backups for effective data restoration. It introduces three primary backup types: full, incremental, and differential, while also highlighting the role of the archive bit in managing backup processes. Understanding these concepts is essential for ensuring data integrity and availability in cybersecurity practices.",
      "metadata": {
        "chapter_num": "9",
        "section_num": "9.5.1",
        "title": "Backup Types",
        "content_type": "video",
        "filename": "9.5.1_Backup_Types_[video].txt",
        "file_path": "data_raw/09_Incident_Response/9.5.1_Backup_Types_[video].txt",
        "word_count": 1892,
        "has_content": true
      },
      "section_header": "Backup and Restore",
      "timestamp_range": ""
    },
    {
      "chunk_id": "9.5.1_chunk_2",
      "content": "The archive bit is a file attribute that is either on or off. It's used by backup systems to determine if the file has been archivedâ€”\"that is, has been backed up. Also, archive bit identifies if a file has been modified since the last backup. This is important when used with certain types of backups. With that, let's explore the different types of backups.",
      "summary": "The archive bit is a crucial file attribute that indicates whether a file has been modified since its last backup, guiding backup systems in determining which files need to be archived. Understanding the archive bit is essential for implementing effective backup strategies, as it plays a key role in differentiating between full, incremental, and differential backups. This knowledge helps ensure data integrity and efficient storage management in cybersecurity practices.",
      "metadata": {
        "chapter_num": "9",
        "section_num": "9.5.1",
        "title": "Backup Types",
        "content_type": "video",
        "filename": "9.5.1_Backup_Types_[video].txt",
        "file_path": "data_raw/09_Incident_Response/9.5.1_Backup_Types_[video].txt",
        "word_count": 1892,
        "has_content": true
      },
      "section_header": "Archive Bit",
      "timestamp_range": ""
    },
    {
      "chunk_id": "9.5.1_chunk_3",
      "content": "Let's first discuss a full backup. A full backup backs up everything. It doesn't matter whether the archive bit is set or not on any file. However, as it backs up each file, it clears the archive bit to indicate that the file is backing up. In this way, you can determine if a file has been modified at a later point in time. If you were to modify a file that has been backed up, the archive bit would be reset, indicating to the backup software that this file has been modified since the last time it was backed up. If a file is not modified after the full backup, the archive bit is left in a cleared state. This is important because other types of backups, such as incremental, take into consideration if this archive bit has been cleared when deciding whether it should back up a file or not.",
      "summary": "A full backup captures all files regardless of their archive bit status, resetting the bit during the process to indicate successful backup. This allows for easy identification of modified files in future backups. Understanding the role of the archive bit is crucial, especially when differentiating between full and incremental backup strategies.",
      "metadata": {
        "chapter_num": "9",
        "section_num": "9.5.1",
        "title": "Backup Types",
        "content_type": "video",
        "filename": "9.5.1_Backup_Types_[video].txt",
        "file_path": "data_raw/09_Incident_Response/9.5.1_Backup_Types_[video].txt",
        "word_count": 1892,
        "has_content": true
      },
      "section_header": "Full Backup",
      "timestamp_range": ""
    },
    {
      "chunk_id": "9.5.1_chunk_4",
      "content": "An incremental backup backs up everything since the last full backup or since the last incremental backup. To determine whether or not a file has been modified since the last full or incremental backup, it looks at the archive bit. If the archive bit is turned on, that tells the backup software that the file has been modified since the last full or incremental backup, and needs to be backed up again. Once it's backed up the file, the archive bit is cleared. Let's run through an example. Suppose you perform a full backup of the entire file system on Monday. As a result, every file in the file system has been backed up, and the archive bit on each file is cleared. Then, on Tuesday, you perform an incremental backup. Because the incremental backup only backs up files with the archived bit set, it will only backup files that have changed since Monday. Accordingly, the incremental backup you made on Tuesday will be relatively small because it will only contain one day's worth of changes. After backing up the changed files, the incremental backup will clear the archive bit again on the files that were backed up. If you perform another incremental backup on Wednesday, it will once again look for any files with enabled archive bits, indicating that they've been modified since either the last full backup on Monday or since the last incremental backup on Tuesday. Therefore, Wednesday's incremental backup also only contains one day's worth of changes. Likewise, if you run another incremental backup on Thursday, then only the changes that have been made since Wednesday will be backed up. The same is true on Friday. The advantage of this strategy is that the daily incremental backups finish relatively quickly because we're only backing up one day's worth of changes. The full backup still takes some time to complete because all files are being backed up. For this reason, the full backup is usually executed over the weekend when the system is not heavily used. The incremental backups can occur each weekday. Because they don't take much time to complete, they typically don't interfere with day-to-day work. Incremental backups have one significant drawback. The incremental backup strategy is the slowest type of backup for restoring data. For example, suppose we ran a full backup on Monday and then ran an incremental on Tuesday, Wednesday, Thursday, and Friday. Then the server crashes on Saturday, and we need to restore all the data back to the server after we've recovered from the crash. The first thing that you must do is restore the first full backup from Monday. Then you must restore every incremental backup in the order they were created. First, you must restore Monday's incremental backup, followed by Tuesday's backup, then Wednesday, Thursday, and Friday's backups. Each backup must be restored in the proper sequence to return the system to where it was before the crash. This can take hours or even days to complete, depending how much data is involved.",
      "summary": "An incremental backup strategy saves only the data that has changed since the last full or incremental backup, utilizing the archive bit to identify modified files. This method allows for quicker daily backups, as only one day's worth of changes is processed, but it can complicate and prolong data restoration, requiring the sequential restoration of multiple backups in the event of a system failure. While efficient for backup frequency, the incremental approach can lead to longer recovery times compared to other backup methods.",
      "metadata": {
        "chapter_num": "9",
        "section_num": "9.5.1",
        "title": "Backup Types",
        "content_type": "video",
        "filename": "9.5.1_Backup_Types_[video].txt",
        "file_path": "data_raw/09_Incident_Response/9.5.1_Backup_Types_[video].txt",
        "word_count": 1892,
        "has_content": true
      },
      "section_header": "Incremental Backup",
      "timestamp_range": ""
    },
    {
      "chunk_id": "9.5.1_chunk_5",
      "content": "Another option is to use differential backups instead of incremental. A differential backup looks for files that have been modified since the last full backup. It does this by evaluating if the archive bit has been set on the files. If the archive bit is clear, it will not back up the file because it assumes that it has not been changed since the last full backup. If the archive bit is set, the differential backup assumes the file has been modified and needs to be backed up. The key difference is that a differential backup does not clear the archive bit after backing up a file. Therefore, it backs up everything modified since the last full backup, but not since the last differential backup. This has advantages and disadvantages. Suppose you perform a full backup on Monday just as with the incremental backup strategy. This clears all archive bits on all files. Then, we perform a differential backup on Tuesday and Wednesday. Because the differential backup on Tuesday does not clear any archive bits, Wednesday's differential backs up all the files that have been modified since Monday. Thursday's differential backup includes all the changes made on Monday, Tuesday, and Wednesday. Friday's differential backup includes all the changes made on Monday, Tuesday, Wednesday, and Thursday. As you progress through the backup schedule, each differential backup takes progressively longer because it's backing up more data each time. The first differential backup completes in the same amount of time as an incremental would because we're only backing up one day's worth of data. However, each subsequent differential takes longer. The advantage of differential backups is the speed of restoring data. With differentials, all we do is restore the full backup followed by the last differential backup. For example, if a server were to crash on Saturday, we would restore the full backup from Monday and then the last differential backup from Friday. That's all we do because the last differential backup contains a backup of every single file that has been changed since the last full backup.",
      "summary": "Differential backups focus on files modified since the last full backup, using the archive bit to determine which files to include. Unlike incremental backups, differential backups do not clear the archive bit after backing up, leading to progressively longer backup times as more files accumulate. However, they simplify data restoration, requiring only the last full backup and the most recent differential backup to recover all changes.",
      "metadata": {
        "chapter_num": "9",
        "section_num": "9.5.1",
        "title": "Backup Types",
        "content_type": "video",
        "filename": "9.5.1_Backup_Types_[video].txt",
        "file_path": "data_raw/09_Incident_Response/9.5.1_Backup_Types_[video].txt",
        "word_count": 1892,
        "has_content": true
      },
      "section_header": "Differential Backup",
      "timestamp_range": ""
    },
    {
      "chunk_id": "9.5.1_chunk_6",
      "content": "You should never mix differential and incremental backups together with a full backup. If you mix full backups with incremental and differential backups, you're going to have problems because of the way these different types of backups handle the archive bit. As a result, files that should have been backed up will be missed. Another alternative for backing up data is to create a system image. Imaging programs create a bit-level mirror of a particular hard disk or partition. Newer versions of Windows, and all versions of Linux, include this functionality. Typically, a system image is created on a defined schedule. Because a system image backs up the entire hard disk or partition, they are rather slow to create. However, they are very fast to restore.",
      "summary": "Mixing differential and incremental backups with full backups can lead to missed files due to the differing ways these backups manage the archive bit. An effective alternative is creating a system image, which provides a bit-level mirror of a hard disk or partition, allowing for quick restoration despite slower creation times. This functionality is available in newer versions of Windows and all Linux versions, making it a practical option for comprehensive data backup.",
      "metadata": {
        "chapter_num": "9",
        "section_num": "9.5.1",
        "title": "Backup Types",
        "content_type": "video",
        "filename": "9.5.1_Backup_Types_[video].txt",
        "file_path": "data_raw/09_Incident_Response/9.5.1_Backup_Types_[video].txt",
        "word_count": 1892,
        "has_content": true
      },
      "section_header": "Mixing Backup Types",
      "timestamp_range": ""
    },
    {
      "chunk_id": "9.5.1_chunk_7",
      "content": "All you do is restore the image to the same hardware, or even to a new piece of hardware if you have a major hardware malfunction, and the system is back and available again in exactly the state it was when the image was created. This can be very useful in the event of a malware infection. Most of the time it's easier to re-image a machine that's been infected with malware rather than try to get rid of the malware. There are other types of data to back up. For example, if you're managing a domain controller in a Windows network, then you need to backup not only the files on the server but all your active directory information as well. To do this, you can create a special type of backup on the domain controller called a system state backup.",
      "summary": "System images allow for the restoration of a computer's operating state, making it particularly effective for recovering from hardware failures or malware infections by reverting to a previously saved configuration. In addition to system images, it's crucial to perform specialized backups, such as system state backups for domain controllers, which include essential Active Directory information alongside server files. This approach ensures comprehensive data protection and quick recovery in various scenarios.",
      "metadata": {
        "chapter_num": "9",
        "section_num": "9.5.1",
        "title": "Backup Types",
        "content_type": "video",
        "filename": "9.5.1_Backup_Types_[video].txt",
        "file_path": "data_raw/09_Incident_Response/9.5.1_Backup_Types_[video].txt",
        "word_count": 1892,
        "has_content": true
      },
      "section_header": "System Images",
      "timestamp_range": ""
    },
    {
      "chunk_id": "9.5.1_chunk_8",
      "content": "If you are backing up sensitive information, such as your security logs, then you might want to consider the location of the backup. Instead of backing that data up to a device that can be modified in some way, find a more secure option. For example, it could be problematic if you were to back up sensitive information to a network share or perhaps a USB flash drive because of the potential of tampering. Instead, you should back up confidential information to a write-once type of media, such as a recordable DVD.",
      "summary": "When backing up sensitive information like security logs on a domain controller, it's crucial to choose a secure storage method to prevent tampering. Avoid using easily modifiable devices such as network shares or USB flash drives; instead, opt for write-once media like recordable DVDs to ensure the integrity of the backup. This practice helps maintain the confidentiality and reliability of critical data.",
      "metadata": {
        "chapter_num": "9",
        "section_num": "9.5.1",
        "title": "Backup Types",
        "content_type": "video",
        "filename": "9.5.1_Backup_Types_[video].txt",
        "file_path": "data_raw/09_Incident_Response/9.5.1_Backup_Types_[video].txt",
        "word_count": 1892,
        "has_content": true
      },
      "section_header": "System State Backup on a Domain Controller",
      "timestamp_range": ""
    },
    {
      "chunk_id": "9.5.1_chunk_9",
      "content": "A backup is worthless unless you can successfully restore data from it. You should run periodic tests and restore from your backups in a lab environment, just to make sure that everything works should a crisis occur.",
      "summary": "Backup integrity tests are essential to ensure that data can be successfully restored from backups, as a backup is ineffective if it cannot be utilized during a crisis. Regularly conducting these tests in a controlled lab environment helps verify the reliability and functionality of backup systems, thereby safeguarding against potential data loss. This practice is a crucial component of an effective data recovery strategy in cybersecurity.",
      "metadata": {
        "chapter_num": "9",
        "section_num": "9.5.1",
        "title": "Backup Types",
        "content_type": "video",
        "filename": "9.5.1_Backup_Types_[video].txt",
        "file_path": "data_raw/09_Incident_Response/9.5.1_Backup_Types_[video].txt",
        "word_count": 1892,
        "has_content": true
      },
      "section_header": "Backup Integrity Tests",
      "timestamp_range": ""
    },
    {
      "chunk_id": "9.5.1_chunk_10",
      "content": "That's it for this lesson. In this lesson, we talked about backup and restore. We first discussed the importance of backing up your data. We then examined the three backup strategies: full, incremental, and differential. We then mentioned using a system image to backup data. We talked about backing up the system state on the domain controller. We discussed backing up sensitive information to write-once medium. Then we emphasized the importance of verifying backups to make sure that they actually work.",
      "summary": "This lesson highlights the critical importance of data backup and restoration, outlining three primary backup strategies: full, incremental, and differential. It also covers the use of system images and the significance of backing up sensitive information to write-once media, while stressing the necessity of verifying backups to ensure their effectiveness. Understanding these concepts is essential for maintaining data integrity and security in any organization.",
      "metadata": {
        "chapter_num": "9",
        "section_num": "9.5.1",
        "title": "Backup Types",
        "content_type": "video",
        "filename": "9.5.1_Backup_Types_[video].txt",
        "file_path": "data_raw/09_Incident_Response/9.5.1_Backup_Types_[video].txt",
        "word_count": 1892,
        "has_content": true
      },
      "section_header": "Summary",
      "timestamp_range": ""
    }
  ],
  "num_chunks": 10
}