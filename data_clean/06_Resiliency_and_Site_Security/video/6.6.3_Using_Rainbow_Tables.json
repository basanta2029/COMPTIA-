{
  "metadata": {
    "chapter_num": "6",
    "section_num": "6.6.3",
    "title": "Using Rainbow Tables",
    "content_type": "video",
    "filename": "6.6.3_Using_Rainbow_Tables_[video].txt",
    "file_path": "data_raw/06_Resiliency_and_Site_Security/6.6.3_Using_Rainbow_Tables_[video].txt",
    "word_count": 721,
    "has_content": true
  },
  "full_content": "Transcript close interactive script Nearly every computer system that requires password authentication must contain a password database. Because the information in databases is vulnerable to theft, storing passwords in plain text isn't a very good idea. Therefore, passwords are usually stored with a cryptographic hash. When they want to crack a password, hackers often use rainbow tables to speed up the process. So, what is a rainbow table, exactly? A rainbow table is basically a table of passwords and the computed matching hashes. The advantage of using rainbow tables is that they save computation time compared to typical brute forcing. The disadvantage is that rainbow tables can take up a lot of storage space. Here, we can look at the website called RainbowCrack, and you can see that some of these are quite large, over half a terabyte in size. In this demo, we're going to generate our own rainbow table using the RainbowCrack collection. We're going to use Kail Linux and RainbowCrack, which comes pre-installed. To open the program, we just type 'rtgen', and it starts. Down here, we have a couple of examples. In the example, the first part is the hashing algorithm. Here, they have MD5. Next, we need to specify the character set. They've specified loweralpha numeric, which is the letters A to Z and numbers 0 to 9. 1 and 7 are the length of the passwords, so they're going to be between one and seven characters long. The rest of this information is some advanced configuration settings that aren't in the scope of what we're covering in this demo. You can find more information about the advanced features on the RainbowCrack website. I'm going to go ahead and create our table. I'll do that by typing 'rtgen md5' numeric for our character set and 1 through 9 for our password length along with the rest of the parameters. Let's press Enter. When I do that, my rainbow table is created. Now, if I want to see where this was located, I can type in 'cd /usr/share/rainbowcrack' and press Enter. From here, I'll type in 'ls', and you can see my rainbow table file. I'll clear the screen. Now we have to sort our rainbow table. To do that, I'll type in 'rtsort .' and press Enter. Each rainbow chain has a start point and an end point. The rtsort program sorts the rainbow chains by end point to make binary searches possible. It's very important that you don't interrupt the sorting process. All right. That's done, and now we're ready to crack a hash with our new table. I'll clear the screen again. To crack a hash, I'll type in './rcrack .-h'. The dot is to specify our rainbow tables, and the -h is for hash. Now, we need to put in our hash. To do this, I'm going to go to this website, md5 hash generator. I can generate a hash by entering '123' and clicking Generate. I'll copy this hash, minimize this window, go back to my terminal, paste, and press Enter. My results pop up very quickly. Here, I've found one of one plaintext. It only took a fraction of a second to run. And down here, I have the hash that I typed in. You can see the numbers I used, 123. So, we successfully cracked this hash with our rainbow table. That's it for this demo. In this demo, we used the command line version of RainbowCrack to create a rainbow table. Then we sorted the table and used an online hash generator to create a hash that we were able to crack with the rainbow table we created.",
  "chunks": [
    {
      "chunk_id": "6.6.3_chunk_1",
      "content": "Nearly every computer system that requires password authentication must contain a password database. Because the information in databases is vulnerable to theft, storing passwords in plain text isn't a very good idea. Therefore, passwords are usually stored with a cryptographic hash. When they want to crack a password, hackers often use rainbow tables to speed up the process. So, what is a rainbow table, exactly? A rainbow table is basically a table of passwords and the computed matching hashes. The advantage of using rainbow tables is that they save computation time compared to typical brute forcing. The disadvantage is that rainbow tables can take up a lot of storage space. Here, we can look at the website called RainbowCrack, and you can see that some of these are quite large, over half a terabyte in size.",
      "summary": "Rainbow tables are precomputed tables of passwords and their corresponding cryptographic hashes, used by hackers to efficiently crack password databases without resorting to time-consuming brute-force methods. While they significantly reduce computation time, their large storage requirements can be a drawback. Understanding rainbow tables is essential for implementing effective password security measures, such as using unique salts for hashing.",
      "metadata": {
        "chapter_num": "6",
        "section_num": "6.6.3",
        "title": "Using Rainbow Tables",
        "content_type": "video",
        "filename": "6.6.3_Using_Rainbow_Tables_[video].txt",
        "file_path": "data_raw/06_Resiliency_and_Site_Security/6.6.3_Using_Rainbow_Tables_[video].txt",
        "word_count": 721,
        "has_content": true
      },
      "section_header": "Use Rainbow Tables",
      "timestamp_range": ""
    },
    {
      "chunk_id": "6.6.3_chunk_2",
      "content": "In this demo, we're going to generate our own rainbow table using the RainbowCrack collection. We're going to use Kail Linux and RainbowCrack, which comes pre-installed. To open the program, we just type 'rtgen', and it starts. Down here, we have a couple of examples. In the example, the first part is the hashing algorithm. Here, they have MD5. Next, we need to specify the character set. They've specified loweralpha numeric, which is the letters A to Z and numbers 0 to 9. 1 and 7 are the length of the passwords, so they're going to be between one and seven characters long. The rest of this information is some advanced configuration settings that aren't in the scope of what we're covering in this demo. You can find more information about the advanced features on the RainbowCrack website. I'm going to go ahead and create our table. I'll do that by typing 'rtgen md5' numeric for our character set and 1 through 9 for our password length along with the rest of the parameters. Let's press Enter. When I do that, my rainbow table is created. Now, if I want to see where this was located, I can type in 'cd /usr/share/rainbowcrack' and press Enter. From here, I'll type in 'ls', and you can see my rainbow table file. I'll clear the screen. Now we have to sort our rainbow table. To do that, I'll type in 'rtsort .' and press Enter. Each rainbow chain has a start point and an end point. The rtsort program sorts the rainbow chains by end point to make binary searches possible. It's very important that you don't interrupt the sorting process. All right. That's done, and now we're ready to crack a hash with our new table. I'll clear the screen again.",
      "summary": "In this demo, participants learn to create a rainbow table using the RainbowCrack tool on Kali Linux, focusing on the MD5 hashing algorithm and a specified character set of lower alphanumeric characters. The process involves generating the table with defined password lengths and then sorting it to facilitate efficient hash cracking. This practical application highlights the importance of understanding hashing and password security in cybersecurity.",
      "metadata": {
        "chapter_num": "6",
        "section_num": "6.6.3",
        "title": "Using Rainbow Tables",
        "content_type": "video",
        "filename": "6.6.3_Using_Rainbow_Tables_[video].txt",
        "file_path": "data_raw/06_Resiliency_and_Site_Security/6.6.3_Using_Rainbow_Tables_[video].txt",
        "word_count": 721,
        "has_content": true
      },
      "section_header": "Create a Rainbow Table",
      "timestamp_range": ""
    },
    {
      "chunk_id": "6.6.3_chunk_3",
      "content": "To crack a hash, I'll type in './rcrack .-h'. The dot is to specify our rainbow tables, and the -h is for hash. Now, we need to put in our hash. To do this, I'm going to go to this website, md5 hash generator. I can generate a hash by entering '123' and clicking Generate. I'll copy this hash, minimize this window, go back to my terminal, paste, and press Enter. My results pop up very quickly. Here, I've found one of one plaintext. It only took a fraction of a second to run. And down here, I have the hash that I typed in. You can see the numbers I used, 123. So, we successfully cracked this hash with our rainbow table.",
      "summary": "In this section, learners are introduced to the process of cracking a hash using rainbow tables with the command './rcrack .-h'. By generating an MD5 hash from the plaintext '123' and utilizing the terminal to input the hash, users can quickly retrieve the original plaintext, demonstrating the effectiveness and speed of hash cracking techniques. This practical application highlights the importance of understanding hash functions and their vulnerabilities in cybersecurity.",
      "metadata": {
        "chapter_num": "6",
        "section_num": "6.6.3",
        "title": "Using Rainbow Tables",
        "content_type": "video",
        "filename": "6.6.3_Using_Rainbow_Tables_[video].txt",
        "file_path": "data_raw/06_Resiliency_and_Site_Security/6.6.3_Using_Rainbow_Tables_[video].txt",
        "word_count": 721,
        "has_content": true
      },
      "section_header": "Crack a Hash",
      "timestamp_range": ""
    },
    {
      "chunk_id": "6.6.3_chunk_4",
      "content": "That's it for this demo. In this demo, we used the command line version of RainbowCrack to create a rainbow table. Then we sorted the table and used an online hash generator to create a hash that we were able to crack with the rainbow table we created.",
      "summary": "In this demo, participants learned to utilize the command line version of RainbowCrack to generate a rainbow table for password cracking. The process involved sorting the table and employing an online hash generator to create a hash, which was successfully decrypted using the previously created rainbow table. This exercise illustrates practical applications of cryptographic techniques and the importance of understanding hash functions in cybersecurity.",
      "metadata": {
        "chapter_num": "6",
        "section_num": "6.6.3",
        "title": "Using Rainbow Tables",
        "content_type": "video",
        "filename": "6.6.3_Using_Rainbow_Tables_[video].txt",
        "file_path": "data_raw/06_Resiliency_and_Site_Security/6.6.3_Using_Rainbow_Tables_[video].txt",
        "word_count": 721,
        "has_content": true
      },
      "section_header": "Summary",
      "timestamp_range": ""
    }
  ],
  "num_chunks": 4
}