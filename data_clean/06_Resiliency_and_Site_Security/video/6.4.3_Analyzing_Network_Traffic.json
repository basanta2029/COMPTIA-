{
  "metadata": {
    "chapter_num": "6",
    "section_num": "6.4.3",
    "title": "Analyzing Network Traffic",
    "content_type": "video",
    "filename": "6.4.3_Analyzing_Network_Traffic_[video].txt",
    "file_path": "data_raw/06_Resiliency_and_Site_Security/6.4.3_Analyzing_Network_Traffic_[video].txt",
    "word_count": 1364,
    "has_content": true
  },
  "full_content": "Transcript close interactive script Wireshark is a network packet analyzer that tries to capture network packets and display the data they carry in as much detail as possible. Network professionals use Wireshark to troubleshoot network problems, examine security problems, verify network devices, debug network issues, and more. Wireshark can be installed on Windows, Linux, and other operating systems. It's not a firewall or intrusion detection system, and it doesn't keep bad things from happening. But it does a great job of monitoring and measuring activity on a network. We're going to take a very brief look at Wireshark. There are entire courses on Wireshark, and as you progress professionally, you'll want to learn more about the program. Let's start with Wireshark's user interface. Throughout this course we'll use Wireshark on Linux and Windows. I'm currently on Kali Linux machine. We're going to use Wireshark from there. Like most programs, Wireshark has a menu at the top. The File menu is similar to other programs, as you can see when we click on it. The same is true for the other menu items across the top. The main toolbar gives you quick access to the most common Wireshark tasks. The two most common items here are the shark fin, or Start, which starts capturing packets, and this square, which turns red when Wireshark is capturing. Below that, there's the Filter toolbar. We'll come back to this in a few minutes. Down here, there's the Packet List pane. This is where all the captured packets are displayed. It only takes a few minutes to see hundreds or thousands of packets, depending on your network traffic. Each line here is a packet that Wireshark has captured, and it's separated in columns up here. You can separate packets by source or destination IP addresses or categorize them in other ways. Whichever one is selected up here will display more detailed information down in the Packet Detail pane. The Packet Detail pane shows all the details about the selected packet. I can come down here, expand the different areas, and see more details. For those of you who love the OSI model, you'll be very happy to hear that this is listed in the OSI order. Farther down, we have the Packet Bytes pane. This is a hexadecimal dump of the selected packets. Sometimes, you can see readable information over here, in ASCII. If the bytes aren't readable, this information is replaced with periods. And finally, at the bottom, we have the status bar. A lot of the Wireshark interface can be customized, but this is what it looks like with the default settings. Okay. Let's go back to display filters. When you do some sniffing with Wireshark, you're going to be overwhelmed with all of the packets it will capture. We can filter the ones that aren't needed. I already ran a scan earlier, and my traffic is here. One way to filter is to use the Expression Builder. For example, let's say I want to filter dhcp. If I look, bootp and dhcp are actually the same thing. If I expand this out, I get lots of things to choose from. I'm going to just leave it as-is. Now let's go over to the Relation box. We have things such as is present. The double equal sign (==) means equal to. The exclamation and equal (!=) means not equal to. The next several should be self-explanatory, but I want to pick the equal to and then, for the value, type in '10.10.10.1', which is my DHCP server. Now, I'll click OK and see what happens. I'm filtering only my DHCP traffic. Now, I want to see if there are any cleartext usernames and passwords here. I can do that several ways. I can create a filter by typing in 'http contains admin'. As I type, notice the salmon color. As soon as it's a valid filter, it turns green. Let's come down here and choose this packet. I'm picking it because it has an external public IP address. I'm going to right-click and select Follow TCP Stream. Now it displays the entire stream related to this conversation. Some of it is readable; some is not. I'm looking for the word Admin. Let's see if we can just do a find for that. I'll click on Find Next until I see something worth looking at. Here, it looks like I found something. It's the word log with the username Admin listed. This is followed by pwd and the password the person typed in. So, with Wireshark, we were able to see a cleartext password. We could also filter other things, like FTP, to find cleartext passwords. I'll come up and clear this filter. Another way we can filter is to come down here. If I find something that I think is interesting, I can right-click and apply a filter. We could spend an hour looking at filters, but let's keep moving on here. So, we kind of did this already. We know we can look at packets. But what if we wanted to look at the entire conversation between two devices? I can come down here, right-click on one of these, and select Follow TCP Stream. Now, I get this window that pops up with the entire stream. This particular stream isn't very useful, but you get the idea. So, how many different conversations have been going on here? I can figure that out by coming up to Statistics and selecting Conversations. When I do, my conversations are combined. All the packets are organized neatly. I can choose a few different ways to see my data and then sort by the total size of the bytes, largest to smallest. I have some tabs up here, such as IP versions 4 and 6. I can select TCP to display my TCP conversation. Okay. I'll close this and then clear my filter. So far, when we look at our packets from Wireshark, we see a bunch of gobbledygook. The good news is that Wireshark has a way to export objects. In our case, we want a file. To do this, we can come up here, to File, go down to Export Objects, and select a category. I can pick HTTP, and I'll get a list of things that downloaded from the web, or we can get objects from our local Windows network by selecting SMB. That's the one I'm going to choose. I only have one file. It's one that I transferred across the network earlier. It's a jpg image file. I'll click on Save and pick a place to save it. I'll pick Desktop, click Save, and close this window. Now I'll minimize Wireshark, go over to my folders, go to Desktop, and here's the picture that I captured in Wireshark. That's it for this demo. In this demo, we took a look at Wireshark. We started by going over the Wireshark interface. Then we talked about using filters. We illustrated how to follow conversations in Wireshark. Finally, we ended by exporting an object.",
  "chunks": [
    {
      "chunk_id": "6.4.3_chunk_1",
      "content": "Wireshark is a network packet analyzer that tries to capture network packets and display the data they carry in as much detail as possible. Network professionals use Wireshark to troubleshoot network problems, examine security problems, verify network devices, debug network issues, and more. Wireshark can be installed on Windows, Linux, and other operating systems. It's not a firewall or intrusion detection system, and it doesn't keep bad things from happening. But it does a great job of monitoring and measuring activity on a network. We're going to take a very brief look at Wireshark. There are entire courses on Wireshark, and as you progress professionally, you'll want to learn more about the program.",
      "summary": "Wireshark is a powerful network packet analyzer used by network professionals to capture and analyze network traffic for troubleshooting, security assessments, and device verification. While it does not prevent security incidents, it provides detailed insights into network activity, making it an essential tool for monitoring and debugging. Understanding Wireshark is crucial for advancing in network security and management, and further learning is encouraged for in-depth proficiency.",
      "metadata": {
        "chapter_num": "6",
        "section_num": "6.4.3",
        "title": "Analyzing Network Traffic",
        "content_type": "video",
        "filename": "6.4.3_Analyzing_Network_Traffic_[video].txt",
        "file_path": "data_raw/06_Resiliency_and_Site_Security/6.4.3_Analyzing_Network_Traffic_[video].txt",
        "word_count": 1364,
        "has_content": true
      },
      "section_header": "Analyzing Network Traffic",
      "timestamp_range": ""
    },
    {
      "chunk_id": "6.4.3_chunk_2",
      "content": "Let's start with Wireshark's user interface. Throughout this course we'll use Wireshark on Linux and Windows. I'm currently on Kali Linux machine. We're going to use Wireshark from there. Like most programs, Wireshark has a menu at the top. The File menu is similar to other programs, as you can see when we click on it. The same is true for the other menu items across the top. The main toolbar gives you quick access to the most common Wireshark tasks. The two most common items here are the shark fin, or Start, which starts capturing packets, and this square, which turns red when Wireshark is capturing. Below that, there's the Filter toolbar. We'll come back to this in a few minutes. Down here, there's the Packet List pane. This is where all the captured packets are displayed. It only takes a few minutes to see hundreds or thousands of packets, depending on your network traffic. Each line here is a packet that Wireshark has captured, and it's separated in columns up here. You can separate packets by source or destination IP addresses or categorize them in other ways. Whichever one is selected up here will display more detailed information down in the Packet Detail pane. The Packet Detail pane shows all the details about the selected packet. I can come down here, expand the different areas, and see more details. For those of you who love the OSI model, you'll be very happy to hear that this is listed in the OSI order. Farther down, we have the Packet Bytes pane. This is a hexadecimal dump of the selected packets. Sometimes, you can see readable information over here, in ASCII. If the bytes aren't readable, this information is replaced with periods. And finally, at the bottom, we have the status bar. A lot of the Wireshark interface can be customized, but this is what it looks like with the default settings.",
      "summary": "The Wireshark interface is designed for packet analysis, featuring a user-friendly menu and toolbar for easy access to common tasks like starting and stopping packet captures. Key components include the Packet List pane for viewing captured packets, the Packet Detail pane for in-depth analysis, and the Packet Bytes pane for hexadecimal and ASCII representations of data. This setup allows users to efficiently filter and categorize network traffic, making it a vital tool for cybersecurity professionals.",
      "metadata": {
        "chapter_num": "6",
        "section_num": "6.4.3",
        "title": "Analyzing Network Traffic",
        "content_type": "video",
        "filename": "6.4.3_Analyzing_Network_Traffic_[video].txt",
        "file_path": "data_raw/06_Resiliency_and_Site_Security/6.4.3_Analyzing_Network_Traffic_[video].txt",
        "word_count": 1364,
        "has_content": true
      },
      "section_header": "Wireshark Interface",
      "timestamp_range": ""
    },
    {
      "chunk_id": "6.4.3_chunk_3",
      "content": "Okay. Let's go back to display filters. When you do some sniffing with Wireshark, you're going to be overwhelmed with all of the packets it will capture. We can filter the ones that aren't needed. I already ran a scan earlier, and my traffic is here. One way to filter is to use the Expression Builder. For example, let's say I want to filter dhcp. If I look, bootp and dhcp are actually the same thing. If I expand this out, I get lots of things to choose from. I'm going to just leave it as-is. Now let's go over to the Relation box. We have things such as is present. The double equal sign (==) means equal to. The exclamation and equal (!=) means not equal to. The next several should be self-explanatory, but I want to pick the equal to and then, for the value, type in '10.10.10.1', which is my DHCP server. Now, I'll click OK and see what happens. I'm filtering only my DHCP traffic. Now, I want to see if there are any cleartext usernames and passwords here. I can do that several ways. I can create a filter by typing in 'http contains admin'. As I type, notice the salmon color. As soon as it's a valid filter, it turns green. Let's come down here and choose this packet. I'm picking it because it has an external public IP address. I'm going to right-click and select Follow TCP Stream. Now it displays the entire stream related to this conversation. Some of it is readable; some is not. I'm looking for the word Admin. Let's see if we can just do a find for that. I'll click on Find Next until I see something worth looking at. Here, it looks like I found something. It's the word log with the username Admin listed. This is followed by pwd and the password the person typed in. So, with Wireshark, we were able to see a cleartext password. We could also filter other things, like FTP, to find cleartext passwords. I'll come up and clear this filter. Another way we can filter is to come down here. If I find something that I think is interesting, I can right-click and apply a filter. We could spend an hour looking at filters, but let's keep moving on here.",
      "summary": "In the CompTIA Security+ course section on display filters, learners are introduced to using Wireshark to manage and analyze network traffic by applying filters to isolate specific packet types, such as DHCP or HTTP. The session emphasizes practical applications, including identifying cleartext usernames and passwords by constructing targeted filters and utilizing features like the Expression Builder and TCP stream analysis. This hands-on approach equips students with essential skills for effective network monitoring and security assessment.",
      "metadata": {
        "chapter_num": "6",
        "section_num": "6.4.3",
        "title": "Analyzing Network Traffic",
        "content_type": "video",
        "filename": "6.4.3_Analyzing_Network_Traffic_[video].txt",
        "file_path": "data_raw/06_Resiliency_and_Site_Security/6.4.3_Analyzing_Network_Traffic_[video].txt",
        "word_count": 1364,
        "has_content": true
      },
      "section_header": "Display Filters",
      "timestamp_range": ""
    },
    {
      "chunk_id": "6.4.3_chunk_4",
      "content": "So, we kind of did this already. We know we can look at packets. But what if we wanted to look at the entire conversation between two devices? I can come down here, right-click on one of these, and select Follow TCP Stream. Now, I get this window that pops up with the entire stream. This particular stream isn't very useful, but you get the idea. So, how many different conversations have been going on here? I can figure that out by coming up to Statistics and selecting Conversations. When I do, my conversations are combined. All the packets are organized neatly. I can choose a few different ways to see my data and then sort by the total size of the bytes, largest to smallest. I have some tabs up here, such as IP versions 4 and 6. I can select TCP to display my TCP conversation. Okay. I'll close this and then clear my filter.",
      "summary": "In this section, learners explore how to analyze the entire communication stream between two devices using packet analysis tools, specifically by utilizing the \"Follow TCP Stream\" feature. The course emphasizes the importance of organizing and visualizing conversations through statistics, allowing users to view and sort data by various criteria, such as total byte size. This practical application enhances understanding of network traffic and aids in identifying potential security issues.",
      "metadata": {
        "chapter_num": "6",
        "section_num": "6.4.3",
        "title": "Analyzing Network Traffic",
        "content_type": "video",
        "filename": "6.4.3_Analyzing_Network_Traffic_[video].txt",
        "file_path": "data_raw/06_Resiliency_and_Site_Security/6.4.3_Analyzing_Network_Traffic_[video].txt",
        "word_count": 1364,
        "has_content": true
      },
      "section_header": "Follow the Conversation",
      "timestamp_range": ""
    },
    {
      "chunk_id": "6.4.3_chunk_5",
      "content": "So far, when we look at our packets from Wireshark, we see a bunch of gobbledygook. The good news is that Wireshark has a way to export objects. In our case, we want a file. To do this, we can come up here, to File, go down to Export Objects, and select a category. I can pick HTTP, and I'll get a list of things that downloaded from the web, or we can get objects from our local Windows network by selecting SMB. That's the one I'm going to choose. I only have one file. It's one that I transferred across the network earlier. It's a jpg image file. I'll click on Save and pick a place to save it. I'll pick Desktop, click Save, and close this window. Now I'll minimize Wireshark, go over to my folders, go to Desktop, and here's the picture that I captured in Wireshark.",
      "summary": "In this section of the CompTIA Security+ course, learners explore how to effectively use Wireshark to export files from captured network packets. By navigating to the \"Export Objects\" feature, users can select specific categories such as HTTP or SMB to retrieve files, exemplified by saving a jpg image transferred over the network. This practical application enhances skills in network analysis and file recovery, crucial for cybersecurity investigations.",
      "metadata": {
        "chapter_num": "6",
        "section_num": "6.4.3",
        "title": "Analyzing Network Traffic",
        "content_type": "video",
        "filename": "6.4.3_Analyzing_Network_Traffic_[video].txt",
        "file_path": "data_raw/06_Resiliency_and_Site_Security/6.4.3_Analyzing_Network_Traffic_[video].txt",
        "word_count": 1364,
        "has_content": true
      },
      "section_header": "Get Files out of Wireshark",
      "timestamp_range": ""
    },
    {
      "chunk_id": "6.4.3_chunk_6",
      "content": "That's it for this demo. In this demo, we took a look at Wireshark. We started by going over the Wireshark interface. Then we talked about using filters. We illustrated how to follow conversations in Wireshark. Finally, we ended by exporting an object.",
      "summary": "In this CompTIA Security+ demo, participants explored the Wireshark interface, learning to utilize filters for effective data analysis. The session demonstrated how to follow network conversations and concluded with the practical application of exporting captured objects, highlighting Wireshark's capabilities in network traffic analysis and troubleshooting.",
      "metadata": {
        "chapter_num": "6",
        "section_num": "6.4.3",
        "title": "Analyzing Network Traffic",
        "content_type": "video",
        "filename": "6.4.3_Analyzing_Network_Traffic_[video].txt",
        "file_path": "data_raw/06_Resiliency_and_Site_Security/6.4.3_Analyzing_Network_Traffic_[video].txt",
        "word_count": 1364,
        "has_content": true
      },
      "section_header": "Summary",
      "timestamp_range": ""
    }
  ],
  "num_chunks": 6
}