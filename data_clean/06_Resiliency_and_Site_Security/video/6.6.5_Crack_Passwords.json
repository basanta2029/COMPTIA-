{
  "metadata": {
    "chapter_num": "6",
    "section_num": "6.6.5",
    "title": "Crack Passwords",
    "content_type": "video",
    "filename": "6.6.5_Crack_Passwords_[video].txt",
    "file_path": "data_raw/06_Resiliency_and_Site_Security/6.6.5_Crack_Passwords_[video].txt",
    "word_count": 1727,
    "has_content": true
  },
  "full_content": "Transcript close interactive script All penetration testers and ethical hackers need the ability to crack passwords. In this demo, we're going to cover some ways to crack passwords in Linux and Windows. One of the most popular password cracking programs is John the Ripper. It combines a number of password crackers into one package, autodetects password hash types, and includes a customizable cracker. You can run it against many encrypted password formats, including several password hash types commonly found in Linux and Windows. You can also run John the Ripper against access passwords for compressed ZIP files and documents. John the Ripper is a command line tool. There's also a GUI-based version called Johnny, which uses the underlying features of the command line version. Both are included with Kali Linux. We're going to use the command line version. First, we need to open up a terminal. Now I want to point out the password file. When we do a dictionary attack, our cracking program needs a wordlist (a list of potential passwords) to refer to. So we need to switch to the folder where that password list is stored. By default, on Kali Linux, the wordlist is located in the /usr/share/john folder. To get there, I need to switch to that directory by typing 'cd /usr/share/john' and press Enter. Now, if I type 'ls', I'll be able to see the contents of this folder. I'm looking for this file, the password.lst file. Now we're going to go back to the root directory. I can do that by just typing in 'cd'. I like to keep my terminal screen cleared off, so I'll 'clear' the screen. Next, if I type in 'john', I get a list list some of the different options that I can use with John the Ripper. If you need to know something about a command's syntax, this page might help you out. We're ready to crack our password. You might think that passwords would be stored in a folder called Passwords, but they're not. Linux passwords are kept in the /etc/shadow file. So, to crack the passwords on this system, I just need to type in 'john /etc/shadow' and press Enter. And that only took a few seconds to crack. It says it loaded two different passwords from two different salts. (If you remember, if a hash is salted, that means that there's extra data added to the hashes because there are two identical passwords being used here. Hashes are salted to make passwords unique in the system.) Down here, we can see that it found the password for the root user. Depending on your system, this process could take a lot longer. My password just happens to be toward the top of the list in my password.lst file. Now we're going to jump over to a Windows system and crack a few passwords from there. We're going to look at dictionary attacks, which use a dictionary file, and brute force attacks, which use every potential combination of letters, numbers, and special characters. And remember, there are many hybrid attacks that mix these techniques in various ways, but we're just covering the basics here. Let's start with a dictionary attack. We're going to use Cain, a popular program that's also known as Cain and Abel. When you install Cain and Abel, Windows will give you all types of warning messages. You'll have to disable your Windows Firewall and your antivirus software. Your antivirus will most likely recognize Cain and Abel as malicious software and quarantine the files required for it to run. Once you launch Cain and Abel, you'll see all your password cracking tools. We're going to go to the Cracker tab, up here. We're interested in the LM & NTLM hashes. Next, let's go up here and click on this plus sign to import hashes from our computer. Here, under Add NT Hashes, we can add hashes from our local system. We can also check this box to include password history hashes so that if users are required to change passwords every 30 or 45 days, previous password hashes are included during the import. You can also import hashes from a text file. So, if you have access to another system, you could potentially collect hashes from that system, dump them into a text file, copy them to a USB device, and then load them here and attempt to crack the passwords. You can also import from a SAM database by checking this, here. Right now, we're just going to import hashes from our local system. You can see that it just loaded all the local accounts I have on this system. If you see \"empty\" under NT passwords, that means that there's no password for that account. If that field is blank, that means that a password is assigned to the account. We're going to use a dictionary attack to see if we can retrieve the password for the Mrs. Worley account. I'm going to right-click on that account, hover over Dictionary Attack, and go to NTLM Hashes. Now I'm going to go up into this white space, right-click, and select Add to list. Before I started this demo, I downloaded a list of passwords from the internet. This file is a list of ten thousand common passwords. It's estimated that thirty percent of all passwords are included in this list. If you look down here, you can see that it's going to scan for passwords. If we check this box, here, it will look for the exact password. So, if my password is cat, that's what it's going to look for. Below that, it will reverse that password--so, instead of c-a-t, it would look for t-a-c. Double passwords are just a password typed in twice. You can also have it search for all-lowercase passwords, search for all-uppercase passwords, or even have it put in numbers that commonly replace letters in passwords. With all these combinations, we're really going to use a variation of tens of thousands of different passwords. Let's click on Start. Depending on your computer's processor, memory, and capability, this process can take a very long time. To save time, I actually edited that file and deleted most of the passwords with this scan. You can see that the scan did finish, but it didn't find that password. That's a good thing; it means my password isn't a dictionary word. Since that didn't work, let's exit and try a brute force attack. We'll right-click on Mrs. Worley's account, hover over Brute-Force Attack, and select NTLM Hashes. Here's a predefined attack. You can see that if I click here, we can add to our options. We only have lowercase letters and numbers. We also have lowercase with numbers and special characters. I have lowercase, uppercase, numbers, and special characters. I'm going to brute force from one to sixteen characters. This system is a virtual machine with a single processor and not much memory, so it's going to take a long time. Let's click Start and see what happens. Down here, on the left, you can see it's going to take years to cycle through every variation and crack this password. We don't have years and years to wait, so let's stop this process and try something else. To crack the password faster, we need to customize our attack. I'll get rid of these characters. Let's say I was doing some shoulder surfing and happened to see that Mrs. Worley was typing in a password, and I noticed three things: I saw that she typed 'teache' and that she didn't use any letters from u to z. I also saw that her password wasn't very long. So, we're going to brute force with these letters and use 6 or 7 characters. We also know the first several letters of our password. Of course, you probably wouldn't have all this information. But to save time, I've made these adjustments. I'll go ahead and click Start, and it will attempt to crack this password. You can see it's going to take a few minutes to complete, so I'll pause the demo and let the attack run. Okay, our scan has completed in just under three minutes. You can see that the password it found was the word \"teacher.\" Of course, knowing the first several letters of the password, like we did here, isn't common. I simplified the attack for time's sake. But it's often possible to gather enough information to brute force a password in a few days or even hours. Okay, that's it for this demo. In this demo, we introduced John the Ripper and used it to crack a Linux password. Then we switched over to a Windows system and used Cain and Abel to crack a Windows-based password. You can see how, if users leak a little information or use easy passwords, hacking tools can get you into restricted systems and files in no time.",
  "chunks": [
    {
      "chunk_id": "6.6.5_chunk_1",
      "content": "All penetration testers and ethical hackers need the ability to crack passwords. In this demo, we're going to cover some ways to crack passwords in Linux and Windows.",
      "summary": "The \"Crack Passwords\" section of the CompTIA Security+ course emphasizes the essential skills for penetration testers and ethical hackers in password cracking techniques. It includes practical demonstrations of methods to crack passwords on both Linux and Windows systems, highlighting the importance of understanding password security vulnerabilities. This knowledge is crucial for assessing and improving organizational security measures against unauthorized access.",
      "metadata": {
        "chapter_num": "6",
        "section_num": "6.6.5",
        "title": "Crack Passwords",
        "content_type": "video",
        "filename": "6.6.5_Crack_Passwords_[video].txt",
        "file_path": "data_raw/06_Resiliency_and_Site_Security/6.6.5_Crack_Passwords_[video].txt",
        "word_count": 1727,
        "has_content": true
      },
      "section_header": "Crack Passwords",
      "timestamp_range": ""
    },
    {
      "chunk_id": "6.6.5_chunk_2",
      "content": "One of the most popular password cracking programs is John the Ripper. It combines a number of password crackers into one package, autodetects password hash types, and includes a customizable cracker. You can run it against many encrypted password formats, including several password hash types commonly found in Linux and Windows. You can also run John the Ripper against access passwords for compressed ZIP files and documents. John the Ripper is a command line tool. There's also a GUI-based version called Johnny, which uses the underlying features of the command line version. Both are included with Kali Linux. We're going to use the command line version. First, we need to open up a terminal. Now I want to point out the password file. When we do a dictionary attack, our cracking program needs a wordlist (a list of potential passwords) to refer to. So we need to switch to the folder where that password list is stored. By default, on Kali Linux, the wordlist is located in the /usr/share/john folder. To get there, I need to switch to that directory by typing 'cd /usr/share/john' and press Enter. Now, if I type 'ls', I'll be able to see the contents of this folder. I'm looking for this file, the password.lst file. Now we're going to go back to the root directory. I can do that by just typing in 'cd'. I like to keep my terminal screen cleared off, so I'll 'clear' the screen. Next, if I type in 'john', I get a list list some of the different options that I can use with John the Ripper. If you need to know something about a command's syntax, this page might help you out.",
      "summary": "John the Ripper is a versatile password cracking tool that integrates multiple password cracking methods and can autodetect various password hash types, making it effective for both Linux and Windows systems. It operates primarily through the command line, utilizing a wordlist for dictionary attacks, with a GUI option available in the form of Johnny. This tool is included in Kali Linux and is essential for cybersecurity professionals looking to test password strength and enhance security measures.",
      "metadata": {
        "chapter_num": "6",
        "section_num": "6.6.5",
        "title": "Crack Passwords",
        "content_type": "video",
        "filename": "6.6.5_Crack_Passwords_[video].txt",
        "file_path": "data_raw/06_Resiliency_and_Site_Security/6.6.5_Crack_Passwords_[video].txt",
        "word_count": 1727,
        "has_content": true
      },
      "section_header": "John the Ripper",
      "timestamp_range": ""
    },
    {
      "chunk_id": "6.6.5_chunk_3",
      "content": "We're ready to crack our password. You might think that passwords would be stored in a folder called Passwords, but they're not. Linux passwords are kept in the /etc/shadow file. So, to crack the passwords on this system, I just need to type in 'john /etc/shadow' and press Enter. And that only took a few seconds to crack. It says it loaded two different passwords from two different salts. (If you remember, if a hash is salted, that means that there's extra data added to the hashes because there are two identical passwords being used here. Hashes are salted to make passwords unique in the system.) Down here, we can see that it found the password for the root user. Depending on your system, this process could take a lot longer. My password just happens to be toward the top of the list in my password.lst file.",
      "summary": "In this section, learners discover that Linux passwords are stored in the /etc/shadow file, and can be cracked using tools like John the Ripper. The process involves loading the shadow file and utilizing salted hashes to enhance password security by making identical passwords unique. Practical applications include understanding password management and the importance of salting in protecting user credentials.",
      "metadata": {
        "chapter_num": "6",
        "section_num": "6.6.5",
        "title": "Crack Passwords",
        "content_type": "video",
        "filename": "6.6.5_Crack_Passwords_[video].txt",
        "file_path": "data_raw/06_Resiliency_and_Site_Security/6.6.5_Crack_Passwords_[video].txt",
        "word_count": 1727,
        "has_content": true
      },
      "section_header": "Crack Linux Passwords",
      "timestamp_range": ""
    },
    {
      "chunk_id": "6.6.5_chunk_4",
      "content": "Now we're going to jump over to a Windows system and crack a few passwords from there. We're going to look at dictionary attacks, which use a dictionary file, and brute force attacks, which use every potential combination of letters, numbers, and special characters. And remember, there are many hybrid attacks that mix these techniques in various ways, but we're just covering the basics here.",
      "summary": "This section covers password cracking techniques on a Windows system, focusing on dictionary attacks that utilize a predefined list of potential passwords and brute force attacks that attempt every possible combination of characters. It also briefly mentions hybrid attacks that combine elements of both methods. Understanding these techniques is essential for recognizing vulnerabilities and implementing stronger password security measures.",
      "metadata": {
        "chapter_num": "6",
        "section_num": "6.6.5",
        "title": "Crack Passwords",
        "content_type": "video",
        "filename": "6.6.5_Crack_Passwords_[video].txt",
        "file_path": "data_raw/06_Resiliency_and_Site_Security/6.6.5_Crack_Passwords_[video].txt",
        "word_count": 1727,
        "has_content": true
      },
      "section_header": "Crack Passwords from a Windows Machine",
      "timestamp_range": ""
    },
    {
      "chunk_id": "6.6.5_chunk_5",
      "content": "Let's start with a dictionary attack. We're going to use Cain, a popular program that's also known as Cain and Abel. When you install Cain and Abel, Windows will give you all types of warning messages. You'll have to disable your Windows Firewall and your antivirus software. Your antivirus will most likely recognize Cain and Abel as malicious software and quarantine the files required for it to run. Once you launch Cain and Abel, you'll see all your password cracking tools. We're going to go to the Cracker tab, up here. We're interested in the LM & NTLM hashes. Next, let's go up here and click on this plus sign to import hashes from our computer. Here, under Add NT Hashes, we can add hashes from our local system. We can also check this box to include password history hashes so that if users are required to change passwords every 30 or 45 days, previous password hashes are included during the import. You can also import hashes from a text file. So, if you have access to another system, you could potentially collect hashes from that system, dump them into a text file, copy them to a USB device, and then load them here and attempt to crack the passwords. You can also import from a SAM database by checking this, here. Right now, we're just going to import hashes from our local system. You can see that it just loaded all the local accounts I have on this system. If you see \"empty\" under NT passwords, that means that there's no password for that account. If that field is blank, that means that a password is assigned to the account. We're going to use a dictionary attack to see if we can retrieve the password for the Mrs. Worley account. I'm going to right-click on that account, hover over Dictionary Attack, and go to NTLM Hashes. Now I'm going to go up into this white space, right-click, and select Add to list. Before I started this demo, I downloaded a list of passwords from the internet. This file is a list of ten thousand common passwords. It's estimated that thirty percent of all passwords are included in this list. If you look down here, you can see that it's going to scan for passwords. If we check this box, here, it will look for the exact password. So, if my password is cat, that's what it's going to look for. Below that, it will reverse that password--so, instead of c-a-t, it would look for t-a-c. Double passwords are just a password typed in twice. You can also have it search for all-lowercase passwords, search for all-uppercase passwords, or even have it put in numbers that commonly replace letters in passwords. With all these combinations, we're really going to use a variation of tens of thousands of different passwords. Let's click on Start. Depending on your computer's processor, memory, and capability, this process can take a very long time. To save time, I actually edited that file and deleted most of the passwords with this scan. You can see that the scan did finish, but it didn't find that password. That's a good thing; it means my password isn't a dictionary word. Since that didn't work, let's exit and try a brute force attack.",
      "summary": "A dictionary attack is a method used to crack passwords by systematically testing a list of common passwords against hashed credentials, utilizing tools like Cain and Abel. The process involves importing LM and NTLM hashes from a local system or text file and executing the attack with various search parameters, such as exact matches or variations. This practical application highlights the importance of using strong, non-dictionary passwords to enhance security against such attacks.",
      "metadata": {
        "chapter_num": "6",
        "section_num": "6.6.5",
        "title": "Crack Passwords",
        "content_type": "video",
        "filename": "6.6.5_Crack_Passwords_[video].txt",
        "file_path": "data_raw/06_Resiliency_and_Site_Security/6.6.5_Crack_Passwords_[video].txt",
        "word_count": 1727,
        "has_content": true
      },
      "section_header": "Dictionary Attack",
      "timestamp_range": ""
    },
    {
      "chunk_id": "6.6.5_chunk_6",
      "content": "We'll right-click on Mrs. Worley's account, hover over Brute-Force Attack, and select NTLM Hashes. Here's a predefined attack. You can see that if I click here, we can add to our options. We only have lowercase letters and numbers. We also have lowercase with numbers and special characters. I have lowercase, uppercase, numbers, and special characters. I'm going to brute force from one to sixteen characters. This system is a virtual machine with a single processor and not much memory, so it's going to take a long time. Let's click Start and see what happens. Down here, on the left, you can see it's going to take years to cycle through every variation and crack this password. We don't have years and years to wait, so let's stop this process and try something else. To crack the password faster, we need to customize our attack. I'll get rid of these characters. Let's say I was doing some shoulder surfing and happened to see that Mrs. Worley was typing in a password, and I noticed three things: I saw that she typed 'teache' and that she didn't use any letters from u to z. I also saw that her password wasn't very long. So, we're going to brute force with these letters and use 6 or 7 characters. We also know the first several letters of our password. Of course, you probably wouldn't have all this information. But to save time, I've made these adjustments. I'll go ahead and click Start, and it will attempt to crack this password. You can see it's going to take a few minutes to complete, so I'll pause the demo and let the attack run. Okay, our scan has completed in just under three minutes. You can see that the password it found was the word \"teacher.\" Of course, knowing the first several letters of the password, like we did here, isn't common. I simplified the attack for time's sake. But it's often possible to gather enough information to brute force a password in a few days or even hours.",
      "summary": "The Brute Force Attack section of the CompTIA Security+ course demonstrates how to crack passwords using various character sets and lengths, highlighting the time-consuming nature of exhaustive search methods. By customizing the attack based on observed information, such as partial passwords and character restrictions, the process can be significantly expedited. This practical application underscores the importance of strong, complex passwords and awareness of social engineering tactics that can aid attackers.",
      "metadata": {
        "chapter_num": "6",
        "section_num": "6.6.5",
        "title": "Crack Passwords",
        "content_type": "video",
        "filename": "6.6.5_Crack_Passwords_[video].txt",
        "file_path": "data_raw/06_Resiliency_and_Site_Security/6.6.5_Crack_Passwords_[video].txt",
        "word_count": 1727,
        "has_content": true
      },
      "section_header": "Brute Force Attack",
      "timestamp_range": ""
    },
    {
      "chunk_id": "6.6.5_chunk_7",
      "content": "Okay, that's it for this demo. In this demo, we introduced John the Ripper and used it to crack a Linux password. Then we switched over to a Windows system and used Cain and Abel to crack a Windows-based password. You can see how, if users leak a little information or use easy passwords, hacking tools can get you into restricted systems and files in no time.",
      "summary": "In this demo, we showcased the use of John the Ripper for cracking Linux passwords and Cain and Abel for Windows passwords, highlighting the vulnerabilities associated with weak passwords and information leaks. These practical applications illustrate how easily hacking tools can exploit poor security practices to gain unauthorized access to systems and sensitive data. Understanding these tools emphasizes the importance of strong password policies and user awareness in cybersecurity.",
      "metadata": {
        "chapter_num": "6",
        "section_num": "6.6.5",
        "title": "Crack Passwords",
        "content_type": "video",
        "filename": "6.6.5_Crack_Passwords_[video].txt",
        "file_path": "data_raw/06_Resiliency_and_Site_Security/6.6.5_Crack_Passwords_[video].txt",
        "word_count": 1727,
        "has_content": true
      },
      "section_header": "Summary",
      "timestamp_range": ""
    }
  ],
  "num_chunks": 7
}