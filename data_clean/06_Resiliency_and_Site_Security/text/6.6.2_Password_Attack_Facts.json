{
  "metadata": {
    "chapter_num": "6",
    "section_num": "6.6.2",
    "title": "Password Attack Facts",
    "content_type": "text",
    "filename": "6.6.2_Password_Attack_Facts_[text].txt",
    "file_path": "data_raw/06_Resiliency_and_Site_Security/6.6.2_Password_Attack_Facts_[text].txt",
    "word_count": 1918,
    "has_content": true
  },
  "full_content": "Security Pro 8.0 This lesson covers the following topics: Password attacks Social engineering Brute force attacks Rainbow attacks Cracking passwords using rainbow tables Password Attacks Passwords are often the main defense against unauthorized access to computer systems and sensitive data. This makes passwords a prime target for attackers. A variety of attack methods have been developed to retrieve passwords. When a user chooses a password, the plaintext value is converted to a cryptographic hash. This means that, in theory, no one except the user (not even the systems administrator) knows the password because the plaintext should not be recoverable from the hash. A password attack aims to exploit the weaknesses inherent in password selection and management to recover the plaintext and use it to compromise an account. Online Attacks An online password attack is where the threat actor interacts with the authentication service directly—a web login form or VPN gateway, for instance. An online password attack can show up in audit logs as repeatedly failed logins and then a successful login or as successful login attempts at unusual times or locations. Apart from ensuring the use of strong passwords by users, online password attacks can be mitigated by restricting the number or rate of login attempts and shunning login attempts from known bad IP addresses. Note that restricting logins can be turned into a vulnerability as it exposes the account to denial of service attacks. The attacker keeps trying to authenticate, locking out valid users. Offline Attacks An offline attack means that the attacker has managed to obtain a database of password hashes, such as %SystemRoot%\\System32\\config\\SAM, %SystemRoot%\\NTDS\\NTDS.DIT (the Active Directory credential store) or /etc/shadow. Once the password database has been obtained, the cracker does not interact with the authentication system. The only indicator of this type of attack (other than misuse of the account in the event of a successful attack) is a file system audit log that records the malicious account accessing one of these files. Threat actors can also read credentials from host memory, in which case the only reliable indicator might be the presence of attack tools on a host. If the attacker cannot obtain a database of passwords, a packet sniffer might be used to obtain the client response to a server challenge in an authentication protocol. Some protocols send the hash directly; others use the hash to derive an encryption key. Weaknesses in protocols using derived keys can allow for the extraction of the hash for cracking. Social Engineering Social engineering is the art of manipulation. In most networks, the weakest link is the human element. Hackers can take advantage of this to gain access to sensitive information, including passwords. The following table explains some social engineering techniques to be aware of and protect against. Social Engineering Technique Description Password guessing Password guessing is usually not a very efficient method to crack a password. An attacker may first attempt to use default login information, such as admin/admin, or simple passwords like password123. If these do not work, the attacker can use publicly available information, such as on a target's social media, to make the process easier. Information such as the following can be used to guess a password or answer security questions and reset a user's password: Birthday First car Family information Spouse's name Child's name Important dates Important locations User manipulation A common social engineering technique is user manipulation. This involves the attacker interacting with the user to trick the user into revealing the username and password. For example, the attacker may call the target pretending to be from tech support with an urgent problem. The attacker asks for the target's login information to remote in to resolve the issue. User manipulation is a very successful technique and is still used quite often. User training is the best prevention method. Physical access An attacker can use social engineering to gain physical access to an office building. Once inside, the attacker can look around for login information that users have written down. Many users have a tendency to write login information on sticky notes and stick the notes on the monitor or place them under the mouse pad. Dumpster diving An attacker may dumpster dive (go through the trash) to find important documents or information that has been thrown out. Many users will throw out papers without realizing the importance of the information. Documents should always be shredded to prevent data loss due to dumpster diving. Shoulder surfing\tShoulder surfing is an eavesdropping technique in which the attacker obtains passwords or other confidential information by looking over the shoulder of a user typing a password. User education is the best defense against any form of social engineering. Users should be trained so that no one will ever ask for their login information and always be aware of their surroundings. Brute Force Attacks In a brute force attack, the attacker attempts to guess the password by using a cracking tool that submits every possible letter, number, and symbol combination in a short amount of time. A brute force password attack can be a very time-consuming attack. The following table describes some of the brute force attack methods. Brute Force Attack Method Description Online attack An online brute force attack requires the attacker to submit the passwords using the same user login interface while the target is up and running. For example: An attacker targeting a website will submit login attempts to the site interface. An attacker targeting a computer will submit login attempts to the login screen. The best defense against this method is to implement lock-out policies. This means if the incorrect password is entered multiple times in a short period of time, the account will be locked for a specified amount of time. Offline attack Offline attacks require the attacker to somehow steal the password file. The attacker can then run attacks against that file with no limitations, such as lock-out policies. This is the ideal method for the attacker but is more difficult because it requires the attacker to  steal the password file somehow. Password spraying Password spraying is another method that allows the attacker to avoid lockout policies. Instead of attempting multiple logins using a single user account and different passwords, the attacker will use the same password with multiple user accounts. The attacker will continue cycling through the user accounts, submitting passwords until a match is found. Because there is a delay between submitting a password on each account, the lock-out policy can be avoided. Dictionary attack In a dictionary attack, the hacker uses a list of words and phrases to try to guess the password. Dictionary attacks work well if weak passwords are used. Using longer and uncommon passphrases is the best way to secure data against these attacks. Some common password-cracking tools that can be used to carry out brute-force attacks are: John the Ripper Hashcat Medusa Cain and Abel Implementing proper password protocols is the best defense against password-cracking attempts. A strong password should: Be at least eight characters; more is better. Contain upper and lower case letters. Contain numbers. Contain symbols. Not use common words or phrases. A passphrase is the best option to use instead of a password. Rainbow Attacks When a plaintext password is stored, it is encrypted, and a hash is generated. Rainbow attacks are similar to dictionary attacks, but instead of trying to match the words and phrases, a rainbow attack uses special tables called rainbow tables that are already filled with common passwords and their generated hashes. The attacker uses this table to match the hashes instead of the password. Rainbow attacks require less computing power and are much faster than brute-force attacks. Storing rainbow tables requires a lot of storage. A single rainbow table can range anywhere from 30 GB to over 300 GB. The character set (lower and/or upper case letters, numbers, symbols) will greatly increase the size. A different rainbow table needs to be generated for each encryption algorithm. The best defense against rainbow attacks is salting the hashes. Salting the hash means that random characters are added at the beginning or end of the password. This generates a completely different hash. The login server is programmed to identify the part of the hash that is salted, but anyone intercepting the hash will have no idea, so the hash cannot be decrypted. Cracking Passwords Using Rainbow Tables An encrypted plaintext password stored in a hash file can be cracked using rainbow tables. There are several types of programs that can be used to create and crack these types of passwords, such as: Rtgen Winrtgen RainbowCrack Ophcrack As an example, the following table lists a few examples of the commands needed to create and sort a rainbow crack table: Command Description rtgen This command generates a rainbow table based on the parameters specified by the user. The parameters are: rtgen hash_algorithm charset plaintext_len_min plaintext_len_max table_index chain_len chain_num part_index rtgen md5 ascii-32-95 1 7 0 1000 1000 0 hash_algorithm - A hashing algorithm is a mathematical algorithm that can convert an input data array of a certain type and arbitrary length to an output bit string of a fixed length. A rainbow table must be generated for the type of hash algorithm used. Although there are many hash algorithms that can be used, some of the more common are ntlm, md5, and sha1. charset - A charset specifies all the possible characters for the plaintext. Some of the possible charset that can be used include: Numeric = [0123456789] alpha = [ABCDEFGHIJKLMNOPQRSTUVWXYZ] alpha-numeric = [ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789] loweralpha = [abcdefghijklmnopqrstuvwxyz] loweralpha-numeric = [abcdefghijklmnopqrstuvwxyz0123456789] ascii-32-95 = ascii-32-95 = [ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_'abcdefghijklmngpqrstuvwxyz{|}~] plaintext_len_min and plaintext_len_max - These two values, such as 1 7, specify the length of the plaintext. The next four parameters are advanced values and are beyond the scope of this lesson. Therefore, only a brief explanation is given here: table_index - Specifies the reduction function. Examples are: 0, 1, 2, 3, 4. Zero is often used as the default. chain_len - This specifies the rainbow chain length. chain_num - This specifies the number of rainbow chains to generate. part_index - The number of files used to store the rainbow table. If a value greater than zero is used, the rainbow table is saved in the number of smaller files specified by the value. 0 1000 1000 0 rtsort A rainbow table is an array of rainbow chains. Each rainbow chain has a starting point and an endpoint. The rtsort program sorts the rainbow chains by endpoint to make binary search possible. To sort a rainbow table, use the following command (the period at the end is part of the command): rtsort . rcrack After the rainbow table has been created, you are now ready to crack the passwords. This can be done using the rcrack command. The rcrack syntax is: rcrack path parameter Command Description rcrack . -l /root/hashes.txt The -l parameter loads the hashes from a file, and each hash is shown on its own line. The hash is shown, followed by the cracked password. plaintext of 590cb9bZaC590/5b9b4b0/152d2321117 P@ssw0rd plaintext of 400238780e6c41f8f790161e6ed4aafc21 Test_Out@11_Last plaintext of 89BF04763BF91C9EE2DDBE23D735C73OBDD41FF2 NeverLAnd5 rcrack . -h hash_value The -h parameter loads and displays the results for a single hash. rcrack . -h 590cb9bZaC590/5b9b4b0/152d2321117 Settings Theater Mode Full Screen Play Video Video Previous Segment Video Control Resume Play Video Next Segment Volume Control Play Speed Interactive Script",
  "chunks": [
    {
      "chunk_id": "6.6.2_chunk_1",
      "content": "Security Pro 8.0",
      "summary": "The CompTIA Security+ course introduces foundational security concepts essential for protecting information systems, including risk management, threat analysis, and security controls. Key topics cover network security, identity management, cryptography, and incident response, emphasizing practical applications through real-world scenarios. This course prepares learners to implement security measures effectively and respond to security incidents in various environments.",
      "metadata": {
        "chapter_num": "6",
        "section_num": "6.6.2",
        "title": "Password Attack Facts",
        "content_type": "text",
        "filename": "6.6.2_Password_Attack_Facts_[text].txt",
        "file_path": "data_raw/06_Resiliency_and_Site_Security/6.6.2_Password_Attack_Facts_[text].txt",
        "word_count": 1918,
        "has_content": true
      },
      "section_header": "Introduction",
      "timestamp_range": null
    },
    {
      "chunk_id": "6.6.2_chunk_2",
      "content": "This lesson covers the following topics: Password attacks Social engineering Brute force attacks Rainbow attacks Cracking passwords using rainbow tables Password Attacks Passwords are often the main defense against unauthorized access to computer systems and sensitive data. This makes passwords a prime target for attackers. A variety of attack methods have been developed to retrieve passwords. When a user chooses a password, the plaintext value is converted to a cryptographic hash. This means that, in theory, no one except the user (not even the systems administrator) knows the password because the plaintext should not be recoverable from the hash. A password attack aims to exploit the weaknesses inherent in password selection and management to recover the plaintext and use it to compromise an account. Online Attacks An online password attack is where the threat actor interacts with the authentication service directly—a web login form or VPN gateway, for instance. An online password attack can show up in audit logs as repeatedly failed logins and then a successful login or as successful login attempts at unusual times or locations. Apart from ensuring the use of strong passwords by users, online password attacks can be mitigated by restricting the number or rate of login attempts and shunning login attempts from known bad IP addresses. Note that restricting logins can be turned into a vulnerability as it exposes the account to denial of service attacks. The attacker keeps trying to authenticate, locking out valid users. Offline Attacks An offline attack means that the attacker has managed to obtain a database of password hashes, such as %SystemRoot%\\System32\\config\\SAM, %SystemRoot%\\NTDS\\NTDS.DIT (the Active Directory credential store) or /etc/shadow. Once the password database has been obtained, the cracker does not interact with the authentication system. The only indicator of this type of attack (other than misuse of the account in the event of a successful attack) is a file system audit log that records the malicious account accessing one of these files. Threat actors can also read credentials from host memory, in which case the only reliable indicator might be the presence of attack tools on a host. If the attacker cannot obtain a database of passwords, a packet sniffer might be used to obtain the client response to a server challenge in an authentication protocol. Some protocols send the hash directly; others use the hash to derive an encryption key. Weaknesses in protocols using derived keys can allow for the extraction of the hash for cracking. Social Engineering Social engineering is the art of manipulation. In most networks, the weakest link is the human element. Hackers can take advantage of this to gain access to sensitive information, including passwords. The following table explains some social engineering techniques to be aware of and protect against. Social Engineering Technique Description Password guessing Password guessing is usually not a very efficient method to crack a password. An attacker may first attempt to use default login information, such as admin/admin, or simple passwords like password123. If these do not work, the attacker can use publicly available information, such as on a target's social media, to make the process easier. Information such as the following can be used to guess a password or answer security questions and reset a user's password: Birthday First car Family information Spouse's name Child's name Important dates Important locations User manipulation A common social engineering technique is user manipulation. This involves the attacker interacting with the user to trick the user into revealing the username and password. For example, the attacker may call the target pretending to be from tech support with an urgent problem. The attacker asks for the target's login information to remote in to resolve the issue. User manipulation is a very successful technique and is still used quite often. User training is the best prevention method. Physical access An attacker can use social engineering to gain physical access to an office building. Once inside, the attacker can look around for login information that users have written down. Many users have a tendency to write login information on sticky notes and stick the notes on the monitor or place them under the mouse pad. Dumpster diving An attacker may dumpster dive (go through the trash) to find important documents or information that has been thrown out. Many users will throw out papers without realizing the importance of the information. Documents should always be shredded to prevent data loss due to dumpster diving. Shoulder surfing\tShoulder surfing is an eavesdropping technique in which the attacker obtains passwords or other confidential information by looking over the shoulder of a user typing a password. User education is the best defense against any form of social engineering. Users should be trained so that no one will ever ask for their login information and always be aware of their surroundings. Brute Force Attacks In a brute force attack, the attacker attempts to guess the password by using a cracking tool that submits every possible letter, number, and symbol combination in a short amount of time. A brute force password attack can be a very time-consuming attack. The following table describes some of the brute force attack methods. Brute Force Attack Method Description Online attack An online brute force attack requires the attacker to submit the passwords using the same user login interface while the target is up and running. For example: An attacker targeting a website will submit login attempts to the site interface. An attacker targeting a computer will submit login attempts to the login screen. The best defense against this method is to implement lock-out policies. This means if the incorrect password is entered multiple times in a short period of time, the account will be locked for a specified amount of time. Offline attack Offline attacks require the attacker to somehow steal the password file. The attacker can then run attacks against that file with no limitations, such as lock-out policies. This is the ideal method for the attacker but is more difficult because it requires the attacker to  steal the password file somehow. Password spraying Password spraying is another method that allows the attacker to avoid lockout policies. Instead of attempting multiple logins using a single user account and different passwords, the attacker will use the same password with multiple user accounts. The attacker will continue cycling through the user accounts, submitting passwords until a match is found. Because there is a delay between submitting a password on each account, the lock-out policy can be avoided. Dictionary attack In a dictionary attack, the hacker uses a list of words and phrases to try to guess the password. Dictionary attacks work well if weak passwords are used. Using longer and uncommon passphrases is the best way to secure data against these attacks. Some common password-cracking tools that can be used to carry out brute-force attacks are: John the Ripper Hashcat Medusa Cain and Abel Implementing proper password protocols is the best defense against password-cracking attempts. A strong password should: Be at least eight characters; more is better. Contain upper and lower case letters. Contain numbers. Contain symbols. Not use common words or phrases. A passphrase is the best option to use instead of a password. Rainbow Attacks When a plaintext password is stored, it is encrypted, and a hash is generated. Rainbow attacks are similar to dictionary attacks, but instead of trying to match the words and phrases, a rainbow attack uses special tables called rainbow tables that are already filled with common passwords and their generated hashes. The attacker uses this table to match the hashes instead of the password. Rainbow attacks require less computing power and are much faster than brute-force attacks. Storing rainbow tables requires a lot of storage. A single rainbow table can range anywhere from 30 GB to over 300 GB. The character set (lower and/or upper case letters, numbers, symbols) will greatly increase the size. A different rainbow table needs to be generated for each encryption algorithm. The best defense against rainbow attacks is salting the hashes. Salting the hash means that random characters are added at the beginning or end of the password. This generates a completely different hash. The login server is programmed to identify the part of the hash that is salted, but anyone intercepting the hash will have no idea, so the hash cannot be decrypted. Cracking Passwords Using Rainbow Tables An encrypted plaintext password stored in a hash file can be cracked using rainbow tables. There are several types of programs that can be used to create and crack these types of passwords, such as: Rtgen Winrtgen RainbowCrack Ophcrack As an example, the following table lists a few examples of the commands needed to create and sort a rainbow crack table: Command Description rtgen This command generates a rainbow table based on the parameters specified by the user. The parameters are: rtgen hash_algorithm charset plaintext_len_min plaintext_len_max table_index chain_len chain_num part_index rtgen md5 ascii-32-95 1 7 0 1000 1000 0 hash_algorithm - A hashing algorithm is a mathematical algorithm that can convert an input data array of a certain type and arbitrary length to an output bit string of a fixed length. A rainbow table must be generated for the type of hash algorithm used. Although there are many hash algorithms that can be used, some of the more common are ntlm, md5, and sha1. charset - A charset specifies all the possible characters for the plaintext. Some of the possible charset that can be used include: Numeric = [0123456789] alpha = [ABCDEFGHIJKLMNOPQRSTUVWXYZ] alpha-numeric = [ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789] loweralpha = [abcdefghijklmnopqrstuvwxyz] loweralpha-numeric = [abcdefghijklmnopqrstuvwxyz0123456789] ascii-32-95 = ascii-32-95 = [ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_'abcdefghijklmngpqrstuvwxyz{|}~] plaintext_len_min and plaintext_len_max - These two values, such as 1 7, specify the length of the plaintext. The next four parameters are advanced values and are beyond the scope of this lesson. Therefore, only a brief explanation is given here: table_index - Specifies the reduction function. Examples are: 0, 1, 2, 3, 4. Zero is often used as the default. chain_len - This specifies the rainbow chain length. chain_num - This specifies the number of rainbow chains to generate. part_index - The number of files used to store the rainbow table. If a value greater than zero is used, the rainbow table is saved in the number of smaller files specified by the value. 0 1000 1000 0 rtsort A rainbow table is an array of rainbow chains. Each rainbow chain has a starting point and an endpoint. The rtsort program sorts the rainbow chains by endpoint to make binary search possible. To sort a rainbow table, use the following command (the period at the end is part of the command): rtsort . rcrack After the rainbow table has been created, you are now ready to crack the passwords. This can be done using the rcrack command. The rcrack syntax is: rcrack path parameter",
      "summary": "This lesson on password attacks highlights the various methods attackers use to exploit weaknesses in password management, including brute force, rainbow, and social engineering techniques. It emphasizes the importance of strong password practices, such as using complex passphrases and implementing security measures like account lockout policies and salting hashes to mitigate these attacks. Additionally, it underscores the role of user education in preventing social engineering attacks, which often target the human element as the weakest link in security.",
      "metadata": {
        "chapter_num": "6",
        "section_num": "6.6.2",
        "title": "Password Attack Facts",
        "content_type": "text",
        "filename": "6.6.2_Password_Attack_Facts_[text].txt",
        "file_path": "data_raw/06_Resiliency_and_Site_Security/6.6.2_Password_Attack_Facts_[text].txt",
        "word_count": 1918,
        "has_content": true
      },
      "section_header": "6.6.2 Password Attack Facts",
      "timestamp_range": null
    },
    {
      "chunk_id": "6.6.2_chunk_3",
      "content": "Command Description rcrack . -l /root/hashes.txt The -l parameter loads the hashes from a file, and each hash is shown on its own line. The hash is shown, followed by the cracked password.",
      "summary": "The rcrack command is utilized for cracking password hashes, with the -l parameter specifically designed to load hashes from a specified file, such as /root/hashes.txt. Each hash is processed individually, displaying the cracked password alongside the original hash. This practical application is essential for understanding password security and vulnerability assessment in cybersecurity.",
      "metadata": {
        "chapter_num": "6",
        "section_num": "6.6.2",
        "title": "Password Attack Facts",
        "content_type": "text",
        "filename": "6.6.2_Password_Attack_Facts_[text].txt",
        "file_path": "data_raw/06_Resiliency_and_Site_Security/6.6.2_Password_Attack_Facts_[text].txt",
        "word_count": 1918,
        "has_content": true
      },
      "section_header": "The following table lists a few examples of how the rcrack command can be used:",
      "timestamp_range": null
    },
    {
      "chunk_id": "6.6.2_chunk_4",
      "content": "plaintext of 590cb9bZaC590/5b9b4b0/152d2321117 P@ssw0rd plaintext of 400238780e6c41f8f790161e6ed4aafc21 Test_Out@11_Last plaintext of 89BF04763BF91C9EE2DDBE23D735C73OBDD41FF2 NeverLAnd5 rcrack . -h hash_value The -h parameter loads and displays the results for a single hash. rcrack . -h 590cb9bZaC590/5b9b4b0/152d2321117 Settings Theater Mode Full Screen Play Video Video Previous Segment Video Control Resume Play Video Next Segment Volume Control Play Speed Interactive Script",
      "summary": "The CompTIA Security+ course covers essential security concepts including risk management, threat analysis, and incident response. Key topics include network security, encryption techniques, and identity management, with a focus on practical applications such as implementing security controls and developing security policies. The course prepares learners to identify and mitigate security vulnerabilities in various environments, ensuring a comprehensive understanding of cybersecurity principles.",
      "metadata": {
        "chapter_num": "6",
        "section_num": "6.6.2",
        "title": "Password Attack Facts",
        "content_type": "text",
        "filename": "6.6.2_Password_Attack_Facts_[text].txt",
        "file_path": "data_raw/06_Resiliency_and_Site_Security/6.6.2_Password_Attack_Facts_[text].txt",
        "word_count": 1918,
        "has_content": true
      },
      "section_header": "Example output:",
      "timestamp_range": null
    }
  ],
  "num_chunks": 4
}