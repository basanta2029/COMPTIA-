{
  "metadata": {
    "chapter_num": "6",
    "section_num": "6.5.11",
    "title": "Malicious Code Facts",
    "content_type": "text",
    "filename": "6.5.11_Malicious_Code_Facts_[text].txt",
    "file_path": "data_raw/06_Resiliency_and_Site_Security/6.5.11_Malicious_Code_Facts_[text].txt",
    "word_count": 1037,
    "has_content": true
  },
  "full_content": "Security Pro 8.0 Malicious software (malware) is perhaps the most dangerous threat to any computing device. Malware can be created using a variety of programming languages and methods. Malicious code indicators Python Command shells Macros Malicious Code Indicators Many network attacks are launched by compromised hosts running various types of malicious code. Indicators of malicious code execution are either caught by endpoint protection software or discovered after the fact in logs of how the malware interacted with the network, file system, and registry. To understand how and where these indicators are generated, it is helpful to consider the main types of malicious activity: Shellcode — this is a minimal program designed to exploit a vulnerability in the OS or a legitimate app to gain privileges or to drop a backdoor on the host if run as a Trojan. Having gained a foothold, this type of attack will be followed by some type of network connection to download additional tools. Credential dumping — the malware might try to access the credentials file (SAM on a local Windows workstation) or sniff credentials held in memory by the lsass.exe system process. Additionally, a DCSync attack attempts to trick a domain controller into replicating its user list along with its credentials with a rogue host. Pivoting/lateral movement/insider attack — the general procedure is to use the foothold to execute a process remotely, using a tool such as PsExec or PowerShell. The attacker might be seeking data assets or may try to widen access by changing the system security configuration, such as opening a firewall port or creating an account. If the attacker has compromised an account, these commands can blend in with ordinary network operations, though they could be anomalous behavior for that account. Persistence — this is a mechanism that allows the threat actor's backdoor to restart if the host reboots or the user logs off. Typical methods are to use AutoRun keys in the registry, add a scheduled task, or use Windows Management Instrumentation (WMI) event subscriptions. Python Python has become one of the most popular programming languages. First released in 1991, Python is designed to be easy to learn and read. It can be used on most operating systems, including Windows, MacOS, and Linux. Python can also take advantage of open-source Python packages and repositories. Many Remote Access Trojans (RATs) are designed using Python. Python makes it easy to implement libraries that allow the RAT to perform functions such as: Taking screenshots. Enabling the webcam and viewing it remotely. Making web requests. Making phone calls. Python also makes it very simple to develop malicious code that can be run on many different systems and devices, including Android devices. One of the main drawbacks to using Python for malware is the file size. Python files are larger than other common languages. Also, Python must be installed on a system for a Python script to run. This works for MacOS and Linux, but Windows does not come with it installed. Python scripts can be converted to Windows-compatible executables fairly easily. Command Shells A shell provides an interface for users to access operating system functions and services. Shells are generally associated with command line interfaces, but they can have graphical interfaces also. Because these programs provide access to core operating system functions, they are extremely dangerous when exploited. Commands can be typed directly into the shell program or can be run from a script. A script is a plain-text document that has the commands typed out just like they would be in the shell. When the script is run, the commands are executed. Two of the more heavily used shells are PowerShell and Bash. The following table describes these two shell programs: Shell Program Description PowerShell PowerShell is a management framework that Microsoft developed to replace Command Prompt and give users more power and control over the Windows system. PowerShell is built on the .NET framework and can now be run on multiple operating systems, including MacOS and Linux. PowerShell uses cmdlets to execute commands. Cmdlets are tiny scripts that perform certain functions. Some cmdlets replace older commands and provide more advanced functions. Users can combine these cmdlets to develop scripts to automate tasks and configure just about anything in Windows. Malicious PowerShell scripts pose a major security threat. These scripts can run in the memory of the system, which means they do not need an executable to run. An attacker can take advantage by running malicious PowerShell scripts in the background. This type of malware is known as fileless malware. Fileless malware is especially dangerous because many anti-virus programs are unable to detect it. Bash Bash is a command shell and scripting language used in most Linux distributions and MacOS versions prior to Catalina. Bash was released in 1989 and is still heavily used. When a command is executed in Linux, Bash works in the background to execute the command using environment variables. Since many web servers run on Linux’s Apache platform, malware can be designed in Bash to attack these systems. A well-known malware called Shellshock uses Bash commands to exploit a flaw within the Bash shell. The flaw allows an attacker to inject malicious commands. Malware that exploits shell programs uses the operating system against itself, making this type of malware difficult to detect and prevent. Keeping anti-malware up to date and training users not to click unknown links or run unknown programs is vital to staying safe. Macros Macros are similar to scripts in that they are little bits of code used to perform a series of steps or functions. Macros, however, are used inside specific applications. Many different programs can make use of macros, but the most common use of macros is in the Microsoft Office programs. Microsoft Office programs use the Visual Basic for Applications (VBA) programming language to create and run macros. If the Office program is not configured properly, malicious VBA code can be used to open a shell on the Windows operating system. The shell can be used to perform malicious attacks. In newer versions of Microsoft Office, macros are disabled by default, and a user must specifically allow them to run.",
  "chunks": [
    {
      "chunk_id": "6.5.11_chunk_1",
      "content": "Security Pro 8.0",
      "summary": "The CompTIA Security+ course introduces fundamental security concepts essential for protecting information systems and networks. Key topics include risk management, threat analysis, cryptography, and incident response, providing learners with practical skills to implement security measures effectively. This foundational knowledge prepares individuals for roles in cybersecurity and helps organizations safeguard their digital assets.",
      "metadata": {
        "chapter_num": "6",
        "section_num": "6.5.11",
        "title": "Malicious Code Facts",
        "content_type": "text",
        "filename": "6.5.11_Malicious_Code_Facts_[text].txt",
        "file_path": "data_raw/06_Resiliency_and_Site_Security/6.5.11_Malicious_Code_Facts_[text].txt",
        "word_count": 1037,
        "has_content": true
      },
      "section_header": "Introduction",
      "timestamp_range": null
    },
    {
      "chunk_id": "6.5.11_chunk_2",
      "content": "Malicious software (malware) is perhaps the most dangerous threat to any computing device. Malware can be created using a variety of programming languages and methods.",
      "summary": "Malicious software, or malware, poses a significant threat to computing devices, as it can be developed using various programming languages and techniques. Understanding the different types of malware, their behaviors, and the methods of prevention and detection is crucial for maintaining cybersecurity. Practical applications include implementing security measures and best practices to protect systems from malware attacks.",
      "metadata": {
        "chapter_num": "6",
        "section_num": "6.5.11",
        "title": "Malicious Code Facts",
        "content_type": "text",
        "filename": "6.5.11_Malicious_Code_Facts_[text].txt",
        "file_path": "data_raw/06_Resiliency_and_Site_Security/6.5.11_Malicious_Code_Facts_[text].txt",
        "word_count": 1037,
        "has_content": true
      },
      "section_header": "6.5.11 Malicious Code Facts",
      "timestamp_range": null
    },
    {
      "chunk_id": "6.5.11_chunk_3",
      "content": "Malicious code indicators Python Command shells Macros Malicious Code Indicators Many network attacks are launched by compromised hosts running various types of malicious code. Indicators of malicious code execution are either caught by endpoint protection software or discovered after the fact in logs of how the malware interacted with the network, file system, and registry. To understand how and where these indicators are generated, it is helpful to consider the main types of malicious activity: Shellcode — this is a minimal program designed to exploit a vulnerability in the OS or a legitimate app to gain privileges or to drop a backdoor on the host if run as a Trojan. Having gained a foothold, this type of attack will be followed by some type of network connection to download additional tools. Credential dumping — the malware might try to access the credentials file (SAM on a local Windows workstation) or sniff credentials held in memory by the lsass.exe system process. Additionally, a DCSync attack attempts to trick a domain controller into replicating its user list along with its credentials with a rogue host. Pivoting/lateral movement/insider attack — the general procedure is to use the foothold to execute a process remotely, using a tool such as PsExec or PowerShell. The attacker might be seeking data assets or may try to widen access by changing the system security configuration, such as opening a firewall port or creating an account. If the attacker has compromised an account, these commands can blend in with ordinary network operations, though they could be anomalous behavior for that account. Persistence — this is a mechanism that allows the threat actor's backdoor to restart if the host reboots or the user logs off. Typical methods are to use AutoRun keys in the registry, add a scheduled task, or use Windows Management Instrumentation (WMI) event subscriptions. Python Python has become one of the most popular programming languages. First released in 1991, Python is designed to be easy to learn and read. It can be used on most operating systems, including Windows, MacOS, and Linux. Python can also take advantage of open-source Python packages and repositories. Many Remote Access Trojans (RATs) are designed using Python. Python makes it easy to implement libraries that allow the RAT to perform functions such as: Taking screenshots. Enabling the webcam and viewing it remotely. Making web requests. Making phone calls. Python also makes it very simple to develop malicious code that can be run on many different systems and devices, including Android devices. One of the main drawbacks to using Python for malware is the file size. Python files are larger than other common languages. Also, Python must be installed on a system for a Python script to run. This works for MacOS and Linux, but Windows does not come with it installed. Python scripts can be converted to Windows-compatible executables fairly easily. Command Shells A shell provides an interface for users to access operating system functions and services. Shells are generally associated with command line interfaces, but they can have graphical interfaces also. Because these programs provide access to core operating system functions, they are extremely dangerous when exploited. Commands can be typed directly into the shell program or can be run from a script. A script is a plain-text document that has the commands typed out just like they would be in the shell. When the script is run, the commands are executed. Two of the more heavily used shells are PowerShell and Bash. The following table describes these two shell programs: Shell Program Description PowerShell PowerShell is a management framework that Microsoft developed to replace Command Prompt and give users more power and control over the Windows system. PowerShell is built on the .NET framework and can now be run on multiple operating systems, including MacOS and Linux. PowerShell uses cmdlets to execute commands. Cmdlets are tiny scripts that perform certain functions. Some cmdlets replace older commands and provide more advanced functions. Users can combine these cmdlets to develop scripts to automate tasks and configure just about anything in Windows. Malicious PowerShell scripts pose a major security threat. These scripts can run in the memory of the system, which means they do not need an executable to run. An attacker can take advantage by running malicious PowerShell scripts in the background. This type of malware is known as fileless malware. Fileless malware is especially dangerous because many anti-virus programs are unable to detect it. Bash Bash is a command shell and scripting language used in most Linux distributions and MacOS versions prior to Catalina. Bash was released in 1989 and is still heavily used. When a command is executed in Linux, Bash works in the background to execute the command using environment variables. Since many web servers run on Linux’s Apache platform, malware can be designed in Bash to attack these systems. A well-known malware called Shellshock uses Bash commands to exploit a flaw within the Bash shell. The flaw allows an attacker to inject malicious commands. Malware that exploits shell programs uses the operating system against itself, making this type of malware difficult to detect and prevent. Keeping anti-malware up to date and training users not to click unknown links or run unknown programs is vital to staying safe. Macros Macros are similar to scripts in that they are little bits of code used to perform a series of steps or functions. Macros, however, are used inside specific applications. Many different programs can make use of macros, but the most common use of macros is in the Microsoft Office programs. Microsoft Office programs use the Visual Basic for Applications (VBA) programming language to create and run macros. If the Office program is not configured properly, malicious VBA code can be used to open a shell on the Windows operating system. The shell can be used to perform malicious attacks. In newer versions of Microsoft Office, macros are disabled by default, and a user must specifically allow them to run.",
      "summary": "This lesson covers key concepts of malicious code, including types of attacks such as shellcode exploitation, credential dumping, and persistence mechanisms, which highlight how malware can gain and maintain access to systems. It also discusses the use of programming languages like Python for creating Remote Access Trojans (RATs) and the risks associated with command shells like PowerShell and Bash, which can execute malicious scripts. Additionally, it addresses the dangers of macros in applications like Microsoft Office, emphasizing the importance of proper configuration and user awareness to mitigate these threats.",
      "metadata": {
        "chapter_num": "6",
        "section_num": "6.5.11",
        "title": "Malicious Code Facts",
        "content_type": "text",
        "filename": "6.5.11_Malicious_Code_Facts_[text].txt",
        "file_path": "data_raw/06_Resiliency_and_Site_Security/6.5.11_Malicious_Code_Facts_[text].txt",
        "word_count": 1037,
        "has_content": true
      },
      "section_header": "This lesson covers the following topics:",
      "timestamp_range": null
    }
  ],
  "num_chunks": 3
}